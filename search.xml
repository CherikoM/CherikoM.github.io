<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>这是本站点的第一个页面</title>
    <url>/selfTalking/firstPage.html</url>
    <content><![CDATA[<p>之前曾经试着搞过……</p>
<p>首先是用的第三方图床崩了</p>
<p>接着工程自己也崩了（始终没找到是哪里崩的）</p>
<p>正好要做毕设，没时间整这玩意</p>
<p>这下毕设做完了，干脆重新整一个吧（</p>
<p>于是你就见到了这个新站点……</p>
<p>框架：hexo、主题：butterfly、现在以及今后可能都会出现各种魔改（</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
        <tag>本站</tag>
      </tags>
  </entry>
  <entry>
    <title>碎碎念2023.5.25</title>
    <url>/selfTalking/%E7%BB%9D%E6%9C%9B%E7%9A%84%E6%96%87%E7%9B%B2.html</url>
    <content><![CDATA[<p>orzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorzorz</p>
<p>有的人是绝望的智者</p>
<p>有的人是快乐的文盲</p>
<p>还有的人是快乐的智者</p>
<p>但我是绝望的文盲</p>
<p>绝望于不明事理</p>
<p>绝望于与智力不匹配的妄想</p>
<p>绝望于不善行事</p>
<p>绝望于与能力不匹配的欲望</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>我制作了一个唱片架</title>
    <url>/web/diy/1.%E6%88%91%E5%88%B6%E4%BD%9C%E4%BA%86%E4%B8%80%E4%B8%AA%E5%94%B1%E7%89%87%E6%9E%B6.html</url>
    <content><![CDATA[<p>因为我很喜欢听音乐（尤其是电子音乐），所以我希望我自己的博客能给浏览者安利很多很多好听的音乐。</p>
<p>总感觉这个全局吸底aplayer如果只能播一个歌单的话太浪费了。我希望它能像家里摆着的唱片机一样，当客人来做客时，任他在唱片架挑选中意的唱片，并放进这个唱片机里开始聆听。</p>
<p>虽然我是技术渣，但还是想试试。</p>
<h1 id="乐辑"><a href="#乐辑" class="headerlink" title="乐辑"></a>乐辑</h1><p>这里直接照搬了butterfly主题中图册页的样式和标签插件（确实很好看），就不赘述了。</p>
<p>收藏的唱片一多，确实就需要对唱片架中的唱片进行归类。</p>
<h1 id="唱片架"><a href="#唱片架" class="headerlink" title="唱片架"></a>唱片架</h1><p>一定程度上参考了butterfly的图片页。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>大概长这样：</p>
<p><img src="https://image.cheriko.fun/post/202305011601485.png"></p>
<p>当鼠标移至唱片封面时，会出现个人的<del>吐槽</del>评价，以及黑胶唱片被拿出的效果。</p>
<p>点击下方的播放，底部aplayer的播放列表就会变成这个唱片的曲目啦。</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>为了方便日后使用，干脆做成一个标签插件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AuroraCafe</span></span><br><span class="line"><span class="comment"> * musicGroup and musicItem</span></span><br><span class="line"><span class="comment"> * &#123;% musicGroup [name] [descr] [url] [img] %&#125;</span></span><br><span class="line"><span class="comment"> * &#123;% musicItem [cover] [title] [author] [id] [server] [type] [description] %&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> urlFor = <span class="built_in">require</span>(<span class="string">&#x27;hexo-util&#x27;</span>).<span class="property">url_for</span>.<span class="title function_">bind</span>(hexo)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * musicGroup省略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">musicItem</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> cover = args[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">const</span> title = args[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">const</span> author = args[<span class="number">2</span>]</span><br><span class="line">  <span class="keyword">const</span> id = args[<span class="number">3</span>]</span><br><span class="line">  <span class="keyword">const</span> server = args[<span class="number">4</span>]</span><br><span class="line">  <span class="keyword">const</span> type = args[<span class="number">5</span>]</span><br><span class="line">  <span class="keyword">const</span> description = args[<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> extraHTML = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">if</span>(description &amp;&amp; <span class="title function_">typeof</span>(description)!==<span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    extraHTML = <span class="string">`&lt;div class=&quot;description&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;p class=&quot;des-inner&quot;&gt;<span class="subst">$&#123;description&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;music-item&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;div class=&quot;pic-item&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;img class=&quot;cover no-lightbox&quot; src=&quot;<span class="subst">$&#123;cover&#125;</span>?x-oss-process=image/resize,s_300&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;inner&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;img no-lazy src=&quot;/img/vinyl.png&quot; class=&quot;vinyl no-lightbox&quot;&gt;</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;extraHTML&#125;</span></span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;p class=&quot;title&quot;&gt;<span class="subst">$&#123;title&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p class=&quot;author&quot;&gt;<span class="subst">$&#123;author&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;button class=&quot;music-play-btn&quot; data-id=&quot;<span class="subst">$&#123;id&#125;</span>&quot; data-server=&quot;<span class="subst">$&#123;server&#125;</span>&quot; data-type=&quot;<span class="subst">$&#123;type&#125;</span>&quot;&gt;播放&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hexo.extend.tag.register(&#x27;musicGroup&#x27;, musicGroup)</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;musicItem&#x27;</span>, musicItem)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><p>在<code>/source/css/tags</code>中创建了<code>musicItem.styl</code>，用于唱片架样式。</p>
<blockquote>
<p>别忘了引入到总样式文件里。</p>
</blockquote>
<p>每一个唱片是<code>.music-item</code>，一个唱片架就是<code>.music-list</code>。</p>
<blockquote>
<p>老实说我还是比较习惯scss的写法，stylus让我觉得好别扭orz。</p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#article-container</span></span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.music-list</span> </span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-row</span>-gap: <span class="number">1.5rem</span>;</span><br><span class="line">    justify-items: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2rem</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">500px</span>)</span><br><span class="line">      &amp;</span><br><span class="line">        grid-template-columns: <span class="number">1</span>fr;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.music-item</span> </span><br><span class="line">      <span class="attribute">width</span>: <span class="number">14rem</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">18rem</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    </span><br><span class="line">      <span class="selector-class">.pic-item</span> </span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">12rem</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">12rem</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="selector-class">.cover</span> </span><br><span class="line">          <span class="attribute">width</span>: <span class="number">12rem</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">12rem</span>;</span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">          <span class="attribute">transition</span>: <span class="number">0.1s</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="selector-class">.inner</span> </span><br><span class="line">          <span class="attribute">width</span>: <span class="number">11.5rem</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">11.5rem</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">3</span>);</span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">1rem</span>;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">top</span>: <span class="number">0.25rem</span>;</span><br><span class="line">          <span class="attribute">left</span>: <span class="number">1.25rem</span>;</span><br><span class="line">          <span class="attribute">transition</span>: <span class="number">0.1s</span>;</span><br><span class="line">          <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.vinyl</span> </span><br><span class="line">          <span class="attribute">width</span>: <span class="number">12rem</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">12rem</span>;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">background-color</span>: transparent;</span><br><span class="line">          <span class="attribute">left</span>: <span class="number">1.5rem</span>;</span><br><span class="line">          <span class="attribute">transition</span>: <span class="number">0.1s</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="selector-class">.description</span> </span><br><span class="line">          <span class="attribute">visibility</span>: hidden;</span><br><span class="line">          <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">12rem</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">12rem</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</span><br><span class="line">          <span class="attribute">overflow</span>: hidden;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">transition</span>: <span class="number">0.1s</span>;</span><br><span class="line">          <span class="attribute">z-index</span>: <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.des-inner</span> </span><br><span class="line">            <span class="attribute">width</span>: <span class="number">12rem</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">12rem</span>;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">0.8rem</span>;</span><br><span class="line">            <span class="attribute">letter-spacing</span>: <span class="number">0.05rem</span>;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">1.1rem</span>;</span><br><span class="line">            <span class="attribute">text-indent</span>: <span class="number">1.6rem</span>;</span><br><span class="line">            <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">            <span class="attribute">transition</span>: <span class="number">0.1s</span>;</span><br><span class="line">            <span class="attribute">z-index</span>: <span class="number">5</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span> </span><br><span class="line">          <span class="selector-class">.vinyl</span> </span><br><span class="line">            <span class="attribute">left</span>: <span class="number">3.5rem</span>;</span><br><span class="line">    </span><br><span class="line">          <span class="selector-class">.cover</span> </span><br><span class="line">            <span class="attribute">box-shadow</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>) <span class="number">0px</span> <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line">          </span><br><span class="line">          <span class="selector-class">.inner</span> </span><br><span class="line">            <span class="attribute">box-shadow</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>) <span class="number">0px</span> <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.description</span></span><br><span class="line">            <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">            <span class="attribute">visibility</span>: visible;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">      <span class="selector-tag">p</span> </span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">cursor</span>: default;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.title</span> </span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">        <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">        <span class="attribute">word-break</span>: break-all;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  </span><br><span class="line">      <span class="selector-class">.author</span> </span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">0.8rem</span>;</span><br><span class="line">        <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">        <span class="attribute">word-break</span>: break-all;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    </span><br><span class="line">      </span><br><span class="line">      <span class="selector-tag">button</span> </span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0.25rem</span></span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">1rem</span>;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">0.5rem</span>;</span><br><span class="line">        <span class="attribute">transition</span>: <span class="number">0.1s</span>;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>) <span class="number">0px</span> <span class="number">4px</span> <span class="number">12px</span>;</span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span> </span><br><span class="line">          <span class="attribute">cursor</span>: pointer;</span><br><span class="line">          <span class="attribute">box-shadow</span>: <span class="built_in">rgba</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">93</span>, <span class="number">0.25</span>) <span class="number">0px</span> <span class="number">2px</span> <span class="number">5px</span> -<span class="number">1px</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>) <span class="number">0px</span> <span class="number">1px</span> <span class="number">3px</span> -<span class="number">1px</span>;</span><br></pre></td></tr></table></figure>

<h2 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h2><p>在<code>/source/js</code>中创建了<code>changePlay.js</code>，用于唱片架样式。</p>
<blockquote>
<p>其实也就点击播放后切换播放列表这一个行为。</p>
</blockquote>
<p>查阅了其他人的一些博客，各位推介的最佳实践都是使用meting.js对aplayer进行增强，这样只要输入几个参数就能获取整个网络音乐平台的播放列表，不需要自己想办法获得音乐的api。就像这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meting-js</span> <span class="attr">server</span>=<span class="string">&quot;netease&quot;</span> <span class="attr">type</span>=<span class="string">&quot;album&quot;</span> <span class="attr">id</span>=<span class="string">&quot;154548341&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是这样并不符合我的要求，因为当我查阅meting.js的文档时，我发现一个问题：meting.js仿佛是一个完全的黑箱操作，它好像没有提供任何透露流程细节的API，我只能输入几个参数看着它自己在网页的该位置生成一个aplayer播放器。</p>
<blockquote>
<p>这明显不符合我的需求，我希望操作博客已有的全局吸底播放器，而不是生成一个新播放器。</p>
</blockquote>
<p>于是我查看了meting.js的源码，从其中摘取了一段核心代码，并另写了一个普通的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getMusicList</span> = <span class="keyword">async</span> (<span class="params">options</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> (options) !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> api</span><br><span class="line">  <span class="keyword">let</span> result</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化</span></span><br><span class="line">  <span class="title function_">init</span>()</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">parse</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    api =</span><br><span class="line">      options.<span class="property">api</span> ||</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">meting_api</span> ||</span><br><span class="line">      <span class="string">&#x27;https://api.i-meto.com/meting/api?server=:server&amp;type=:type&amp;id=:id&amp;r=:r&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">auto</span>) <span class="title function_">_parse_link</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_parse_link</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> rules = [</span><br><span class="line">        [<span class="string">&#x27;music.163.com.*song.*id=(\\d+)&#x27;</span>, <span class="string">&#x27;netease&#x27;</span>, <span class="string">&#x27;song&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;music.163.com.*album.*id=(\\d+)&#x27;</span>, <span class="string">&#x27;netease&#x27;</span>, <span class="string">&#x27;album&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;music.163.com.*artist.*id=(\\d+)&#x27;</span>, <span class="string">&#x27;netease&#x27;</span>, <span class="string">&#x27;artist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;music.163.com.*playlist.*id=(\\d+)&#x27;</span>, <span class="string">&#x27;netease&#x27;</span>, <span class="string">&#x27;playlist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;music.163.com.*discover/toplist.*id=(\\d+)&#x27;</span>, <span class="string">&#x27;netease&#x27;</span>, <span class="string">&#x27;playlist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;y.qq.com.*song/(\\w+).html&#x27;</span>, <span class="string">&#x27;tencent&#x27;</span>, <span class="string">&#x27;song&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;y.qq.com.*album/(\\w+).html&#x27;</span>, <span class="string">&#x27;tencent&#x27;</span>, <span class="string">&#x27;album&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;y.qq.com.*singer/(\\w+).html&#x27;</span>, <span class="string">&#x27;tencent&#x27;</span>, <span class="string">&#x27;artist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;y.qq.com.*playsquare/(\\w+).html&#x27;</span>, <span class="string">&#x27;tencent&#x27;</span>, <span class="string">&#x27;playlist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;y.qq.com.*playlist/(\\w+).html&#x27;</span>, <span class="string">&#x27;tencent&#x27;</span>, <span class="string">&#x27;playlist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;xiami.com.*song/(\\w+)&#x27;</span>, <span class="string">&#x27;xiami&#x27;</span>, <span class="string">&#x27;song&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;xiami.com.*album/(\\w+)&#x27;</span>, <span class="string">&#x27;xiami&#x27;</span>, <span class="string">&#x27;album&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;xiami.com.*artist/(\\w+)&#x27;</span>, <span class="string">&#x27;xiami&#x27;</span>, <span class="string">&#x27;artist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;xiami.com.*collect/(\\w+)&#x27;</span>, <span class="string">&#x27;xiami&#x27;</span>, <span class="string">&#x27;playlist&#x27;</span>],</span><br><span class="line">      ]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> rule <span class="keyword">of</span> rules) &#123;</span><br><span class="line">        <span class="comment">// 返回匹配</span></span><br><span class="line">        <span class="comment">// eg: &quot;https://y.qq.com/n/yqq/song/001RGrEX3ija5X.html&quot;</span></span><br><span class="line">        <span class="comment">// [&quot;y.qq.com/n/yqq/song/001RGrEX3ija5X.html&quot;, &quot;001RGrEX3ija5X&quot;]</span></span><br><span class="line">        <span class="keyword">let</span> patt = <span class="keyword">new</span> <span class="title class_">RegExp</span>(rule[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">let</span> res = patt.<span class="title function_">exec</span>(options.<span class="property">auto</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (res !== <span class="literal">null</span>) &#123;</span><br><span class="line">          options.<span class="property">server</span> = rule[<span class="number">1</span>]</span><br><span class="line">          options.<span class="property">type</span> = rule[<span class="number">2</span>]</span><br><span class="line">          options.<span class="property">id</span> = res[<span class="number">1</span>]</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">parse</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">url</span>) &#123;</span><br><span class="line">      <span class="comment">// 直接构建 APlayer 配置</span></span><br><span class="line">      <span class="keyword">let</span> res = &#123;</span><br><span class="line">        <span class="attr">name</span>: options.<span class="property">name</span> || options.<span class="property">title</span> || <span class="string">&#x27;Audio name&#x27;</span>,</span><br><span class="line">        <span class="attr">artist</span>: options.<span class="property">artist</span> || options.<span class="property">author</span> || <span class="string">&#x27;Audio artist&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: options.<span class="property">url</span>,</span><br><span class="line">        <span class="attr">cover</span>: options.<span class="property">cover</span> || options.<span class="property">pic</span>,</span><br><span class="line">        <span class="attr">lrc</span>: options.<span class="property">lrc</span> || options.<span class="property">lyric</span> || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: options.<span class="property">type</span> || <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      result = res</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// // 1. 通过 meta 拼凑接口参数获得完整接口 （_init 中存放的默认 api）</span></span><br><span class="line">    <span class="comment">// // 2. 请求接口，得到播放列表数据</span></span><br><span class="line">    <span class="keyword">let</span> url = api</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;:server&#x27;</span>, options.<span class="property">server</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;:type&#x27;</span>, options.<span class="property">type</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;:id&#x27;</span>, options.<span class="property">id</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;:auth&#x27;</span>, options.<span class="property">auth</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;:r&#x27;</span>, <span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> r = <span class="keyword">await</span> <span class="title function_">fetch</span>(url)</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> r.<span class="title function_">json</span>()</span><br><span class="line"></span><br><span class="line">    result = res</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源码是一个继承了HTMLElement的类（因为要以HTML标签形式使用），其中最核心的两个部分即<code>init()</code>（调整参数）和<code>parse()</code>（获得播放列表）两个方法。</p>
<p>我把它简单修改成了一个传入配置对象参数就可以获得播放列表的函数，把后续各种构建aplayer实例以及创建DOM元素之类的行为都舍弃了。</p>
<blockquote>
<p>你非得问我的话就是我也不懂（</p>
</blockquote>
<p>然后就是为按钮绑定事件了，但好像产生了新问题：hexo中，用户自定义js好像只能全局引入。</p>
<blockquote>
<p> 如果确实有按页面引入的方法的话请务必告诉我</p>
</blockquote>
<p>这意味着如果我是为music-list还是为music-item绑定事件都不行，因为只有在特定的页面中才会有这两类元素，在其他页面载入话就会产生空指针报错。</p>
<p>最后我想了个笨方法：直接给全局绑定点击事件，并检测点击目标（</p>
<blockquote>
<p>别嘲笑我，我要脸orz。</p>
</blockquote>
<p>具体代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">async</span> (event) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> target = event.<span class="property">target</span></span><br><span class="line">  <span class="keyword">const</span> tagName = target.<span class="property">tagName</span></span><br><span class="line">  <span class="keyword">if</span> (tagName.<span class="title function_">toUpperCase</span>() == <span class="string">&quot;BUTTON&quot;</span> &amp;&amp; target.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;music-play-btn&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dataset = target.<span class="property">dataset</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dataset.<span class="property">server</span> == <span class="string">&quot;undefined&quot;</span> || dataset.<span class="property">type</span> == <span class="string">&quot;undefined&quot;</span> || dataset.<span class="property">id</span> == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;param err&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用上面的魔改meting.js，获取播放列表</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getMusicList</span>(&#123;</span><br><span class="line">      <span class="attr">server</span>: dataset.<span class="property">server</span>,</span><br><span class="line">      <span class="attr">type</span>: dataset.<span class="property">type</span>,</span><br><span class="line">      <span class="attr">id</span>: dataset.<span class="property">id</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据全局吸底aplayer构建实例</span></span><br><span class="line">    <span class="keyword">const</span> ap = <span class="keyword">new</span> <span class="title class_">APlayer</span>(&#123;</span><br><span class="line">      <span class="attr">container</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bottom-aplayer&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ap) &#123;</span><br><span class="line">      <span class="comment">// 清空目前的播放列表</span></span><br><span class="line">      ap.<span class="property">list</span>.<span class="title function_">clear</span>()</span><br><span class="line">      <span class="comment">// 添加播放列表</span></span><br><span class="line">      ap.<span class="property">list</span>.<span class="title function_">add</span>(res)</span><br><span class="line">      <span class="comment">// 获取缓存的音量信息</span></span><br><span class="line">      <span class="keyword">const</span> metingStr = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;metingjs&quot;</span>)</span><br><span class="line">      <span class="keyword">const</span> metingjs = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(metingStr)</span><br><span class="line">      <span class="keyword">let</span> vol</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> (metingjs.<span class="property">volume</span>) == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">        vol = metingjs.<span class="property">volume</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        vol = ap.<span class="property">audio</span>.<span class="property">volume</span></span><br><span class="line">      &#125;</span><br><span class="line">      ap.<span class="title function_">volume</span>(vol, <span class="literal">true</span>)</span><br><span class="line">      <span class="comment">// 展开给浏览者看一下，“我已经改好播放列表了！”</span></span><br><span class="line">      ap.<span class="title function_">setMode</span>(<span class="string">&quot;normal&quot;</span>)</span><br><span class="line">      <span class="comment">// 开始播放</span></span><br><span class="line">      ap.<span class="title function_">play</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>随后我又想尝试新的功能：添加一个按钮，点击后不改变播放列表，只是在播放列表末尾插入曲目。</p>
<p>我尝试了一阵子，始终未能成功，但发现了问题所在：</p>
<p>加载站点后所处的的第一个页面，可以从console找到该页面中所有aplayer实例（全部都被butterfly框架放在了<code>aplayers</code>这个数组中，包括吸底aplayer）。</p>
<p>但前往其他页面时，再看<code>aplayers</code>数组，就找不到刚才的实例了。</p>
<p>确实hexo博客不是单页面应用，这样其实也挺正常的。但全局吸底aplayer托了pjax的福，即便页面连续跳转，播放也不间断。</p>
<p>经观察，上面的代码本质上是给原本全局aplayer的位置新建了一个aplayer实例，如果我只想末尾插入曲目，我可能需要获得原本的aplayer实例。</p>
<p>到底该怎么做呢（我不知道pjax的运行机制）。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>DIY</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>hexo</tag>
        <tag>音乐</tag>
        <tag>DIY</tag>
      </tags>
  </entry>
  <entry>
    <title>唱片架完善+魔改Aplayer</title>
    <url>/web/diy/2.%E5%94%B1%E7%89%87%E6%9E%B6%E5%AE%8C%E5%96%84+%E9%AD%94%E6%94%B9Aplayer.html</url>
    <content><![CDATA[<p>书接上文，因为上次还有未能实现的想法，所以接着鼓捣。</p>
<h1 id="唱片架"><a href="#唱片架" class="headerlink" title="唱片架"></a>唱片架</h1><p>稍稍修改了结构和样式，加上了“添至列表”按钮，点击后就会把这张专里的内容加进左下角播放器的播放列表。</p>
<p><img src="https://image.cheriko.fun/post/202305311147177.png"></p>
<p>篇幅所限，结构和样式就先省略了。</p>
<h2 id="添至列表"><a href="#添至列表" class="headerlink" title="添至列表"></a>添至列表</h2><p>主要加上了点击“添至列表”的逻辑。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配合标签外挂music食用~</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> useSnackbar <span class="keyword">from</span> <span class="string">&quot;../Tools/useSnackbar.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> addCoverColor <span class="keyword">from</span> <span class="string">&quot;./addCoverColor.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 播放事件委托（</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">async</span> (event) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> target = event.<span class="property">target</span></span><br><span class="line">  <span class="keyword">const</span> tagName = target.<span class="property">tagName</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dataset = target.<span class="property">dataset</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 参数有误</span></span><br><span class="line">  <span class="keyword">if</span> (dataset.<span class="property">server</span> == <span class="string">&quot;undefined&quot;</span> || dataset.<span class="property">type</span> == <span class="string">&quot;undefined&quot;</span> || dataset.<span class="property">id</span> == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点击操作按钮</span></span><br><span class="line">  <span class="keyword">if</span> (tagName.<span class="title function_">toUpperCase</span>() == <span class="string">&quot;BUTTON&quot;</span> &amp;&amp; target.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;music-play-btn&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 获得音乐列表</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getMusicList</span>(&#123;</span><br><span class="line">      <span class="attr">server</span>: dataset.<span class="property">server</span>,</span><br><span class="line">      <span class="attr">type</span>: dataset.<span class="property">type</span>,</span><br><span class="line">      <span class="attr">id</span>: dataset.<span class="property">id</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ap = <span class="variable language_">window</span>.<span class="property">fixedap</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ap) &#123;</span><br><span class="line">      <span class="keyword">if</span> (target.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;play-album&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 清空并添加</span></span><br><span class="line">        ap.<span class="property">list</span>.<span class="title function_">clear</span>()</span><br><span class="line">        ap.<span class="property">list</span>.<span class="title function_">add</span>(res)</span><br><span class="line">        ap.<span class="title function_">setMode</span>(<span class="string">&quot;normal&quot;</span>)</span><br><span class="line">        ap.<span class="title function_">play</span>()</span><br><span class="line">        <span class="title function_">useSnackbar</span>(<span class="string">&quot;让你见识见识我珍藏已久的好曲子（〃｀ 3′〃）&quot;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;add-album&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 目前的播放列表</span></span><br><span class="line">        <span class="keyword">const</span> nowList = ap.<span class="property">list</span>.<span class="property">audios</span></span><br><span class="line">        <span class="comment">// 去重</span></span><br><span class="line">        <span class="keyword">const</span> res2 = res.<span class="title function_">filter</span>(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> !nowList.<span class="title function_">some</span>(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> n.<span class="property">url</span> === r.<span class="property">url</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 全是重复</span></span><br><span class="line">        <span class="keyword">if</span> (res2.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="title function_">useSnackbar</span>(<span class="string">&quot;添加过的就不要再加啦w(ﾟДﾟ)w&quot;</span>)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加</span></span><br><span class="line">        ap.<span class="property">list</span>.<span class="title function_">add</span>(res2)</span><br><span class="line">        ap.<span class="title function_">setMode</span>(<span class="string">&quot;normal&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滚动音乐列表</span></span><br><span class="line">        <span class="keyword">const</span> apDOM = ap.<span class="property">options</span>.<span class="property">container</span></span><br><span class="line">        <span class="keyword">const</span> apolDOM = apDOM.<span class="title function_">querySelector</span>(<span class="string">&quot;ol&quot;</span>)</span><br><span class="line">        <span class="keyword">const</span> scrollHeight = apolDOM.<span class="property">scrollHeight</span></span><br><span class="line">        apolDOM.<span class="title function_">scrollTo</span>(&#123; <span class="attr">top</span>: scrollHeight, <span class="attr">behavior</span>: <span class="string">&quot;smooth&quot;</span> &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="title function_">useSnackbar</span>(<span class="string">&quot;加到播放列表里啦，慢慢听ᕕ( ᐛ )ᕗ&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点击标题</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (target.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;music-to-site&quot;</span>)) &#123;</span><br><span class="line">    <span class="keyword">let</span> href</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(dataset.<span class="property">server</span>) &#123;</span><br><span class="line">      <span class="keyword">case</span>(<span class="string">&quot;netease&quot;</span>):</span><br><span class="line">        href = <span class="string">`https://music.163.com/#/<span class="subst">$&#123;dataset.type&#125;</span>?id=<span class="subst">$&#123;dataset.id&#125;</span>`</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span>(<span class="string">&quot;tencent&quot;</span>):</span><br><span class="line">        <span class="keyword">let</span> type</span><br><span class="line">        <span class="keyword">if</span>(dataset.<span class="property">type</span> === <span class="string">&quot;song&quot;</span>) &#123;</span><br><span class="line">          type = <span class="string">&quot;songDetail&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(dataset.<span class="property">type</span> === <span class="string">&quot;album&quot;</span>) &#123;</span><br><span class="line">          type = <span class="string">&quot;albumDetail&quot;</span></span><br><span class="line">        &#125; <span class="keyword">else</span> type = <span class="string">&quot;playlist&quot;</span></span><br><span class="line"></span><br><span class="line">        href = <span class="string">`https://y.qq.com/n/ryqq/<span class="subst">$&#123;type&#125;</span>/<span class="subst">$&#123;dataset.id&#125;</span>`</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(href)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(href) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">open</span>(href)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得音乐列表</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getMusicList</span> = <span class="keyword">async</span> (<span class="params">options</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> (options) !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> api</span><br><span class="line">  <span class="keyword">let</span> result</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化</span></span><br><span class="line">  <span class="title function_">init</span>()</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">parse</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    api =</span><br><span class="line">      options.<span class="property">api</span> ||</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">meting_api</span> ||</span><br><span class="line">      <span class="string">&#x27;https://api.i-meto.com/meting/api?server=:server&amp;type=:type&amp;id=:id&amp;r=:r&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">auto</span>) <span class="title function_">_parse_link</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_parse_link</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> rules = [</span><br><span class="line">        [<span class="string">&#x27;music.163.com.*song.*id=(\\d+)&#x27;</span>, <span class="string">&#x27;netease&#x27;</span>, <span class="string">&#x27;song&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;music.163.com.*album.*id=(\\d+)&#x27;</span>, <span class="string">&#x27;netease&#x27;</span>, <span class="string">&#x27;album&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;music.163.com.*artist.*id=(\\d+)&#x27;</span>, <span class="string">&#x27;netease&#x27;</span>, <span class="string">&#x27;artist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;music.163.com.*playlist.*id=(\\d+)&#x27;</span>, <span class="string">&#x27;netease&#x27;</span>, <span class="string">&#x27;playlist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;music.163.com.*discover/toplist.*id=(\\d+)&#x27;</span>, <span class="string">&#x27;netease&#x27;</span>, <span class="string">&#x27;playlist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;y.qq.com.*song/(\\w+).html&#x27;</span>, <span class="string">&#x27;tencent&#x27;</span>, <span class="string">&#x27;song&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;y.qq.com.*album/(\\w+).html&#x27;</span>, <span class="string">&#x27;tencent&#x27;</span>, <span class="string">&#x27;album&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;y.qq.com.*singer/(\\w+).html&#x27;</span>, <span class="string">&#x27;tencent&#x27;</span>, <span class="string">&#x27;artist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;y.qq.com.*playsquare/(\\w+).html&#x27;</span>, <span class="string">&#x27;tencent&#x27;</span>, <span class="string">&#x27;playlist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;y.qq.com.*playlist/(\\w+).html&#x27;</span>, <span class="string">&#x27;tencent&#x27;</span>, <span class="string">&#x27;playlist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;xiami.com.*song/(\\w+)&#x27;</span>, <span class="string">&#x27;xiami&#x27;</span>, <span class="string">&#x27;song&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;xiami.com.*album/(\\w+)&#x27;</span>, <span class="string">&#x27;xiami&#x27;</span>, <span class="string">&#x27;album&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;xiami.com.*artist/(\\w+)&#x27;</span>, <span class="string">&#x27;xiami&#x27;</span>, <span class="string">&#x27;artist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;xiami.com.*collect/(\\w+)&#x27;</span>, <span class="string">&#x27;xiami&#x27;</span>, <span class="string">&#x27;playlist&#x27;</span>],</span><br><span class="line">      ]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> rule <span class="keyword">of</span> rules) &#123;</span><br><span class="line">        <span class="comment">// 返回匹配</span></span><br><span class="line">        <span class="comment">// eg: &quot;https://y.qq.com/n/yqq/song/001RGrEX3ija5X.html&quot;</span></span><br><span class="line">        <span class="comment">// [&quot;y.qq.com/n/yqq/song/001RGrEX3ija5X.html&quot;, &quot;001RGrEX3ija5X&quot;]</span></span><br><span class="line">        <span class="keyword">let</span> patt = <span class="keyword">new</span> <span class="title class_">RegExp</span>(rule[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">let</span> res = patt.<span class="title function_">exec</span>(options.<span class="property">auto</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (res !== <span class="literal">null</span>) &#123;</span><br><span class="line">          options.<span class="property">server</span> = rule[<span class="number">1</span>]</span><br><span class="line">          options.<span class="property">type</span> = rule[<span class="number">2</span>]</span><br><span class="line">          options.<span class="property">id</span> = res[<span class="number">1</span>]</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">parse</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">url</span>) &#123;</span><br><span class="line">      <span class="comment">// 直接构建 APlayer 配置并加载 APlayer</span></span><br><span class="line">      <span class="keyword">let</span> res = &#123;</span><br><span class="line">        <span class="attr">name</span>: options.<span class="property">name</span> || options.<span class="property">title</span> || <span class="string">&#x27;Audio name&#x27;</span>,</span><br><span class="line">        <span class="attr">artist</span>: options.<span class="property">artist</span> || options.<span class="property">author</span> || <span class="string">&#x27;Audio artist&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: options.<span class="property">url</span>,</span><br><span class="line">        <span class="attr">cover</span>: options.<span class="property">cover</span> || options.<span class="property">pic</span>,</span><br><span class="line">        <span class="attr">lrc</span>: options.<span class="property">lrc</span> || options.<span class="property">lyric</span> || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: options.<span class="property">type</span> || <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        result = <span class="keyword">await</span> <span class="title function_">addCoverColor</span>(res)</span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// // 1. 通过 meta 拼凑接口参数获得完整接口 （_init 中存放的默认 api）</span></span><br><span class="line">    <span class="comment">// // 2. 请求接口，得到播放列表数据</span></span><br><span class="line">    <span class="comment">// // 3. 加载 APlayer</span></span><br><span class="line">    <span class="keyword">let</span> url = api</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;:server&#x27;</span>, options.<span class="property">server</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;:type&#x27;</span>, options.<span class="property">type</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;:id&#x27;</span>, options.<span class="property">id</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;:auth&#x27;</span>, options.<span class="property">auth</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;:r&#x27;</span>, <span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> r = <span class="keyword">await</span> <span class="title function_">fetch</span>(url)</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> r.<span class="title function_">json</span>()</span><br><span class="line"></span><br><span class="line">    result = res</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">addCoverColor</span>(result)</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="提取封面颜色值"><a href="#提取封面颜色值" class="headerlink" title="提取封面颜色值"></a>提取封面颜色值</h2><p>为播放器样式自适应准备的东西。</p>
<h3 id="根据图片获取平均色值"><a href="#根据图片获取平均色值" class="headerlink" title="根据图片获取平均色值"></a>根据图片获取平均色值</h3><p>使用canvas计算图片的rgb色值</p>
<p>获取网络图片应该是个异步的操作，所以返回一个Promise。</p>
<p>QQ音乐源的封面出现了跨域问题，如果有大佬知道怎么解决请务必教导我（网易云源一切正常）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算专辑图片的平均色值（rgb）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// js创建一个canvas元素</span></span><br><span class="line"><span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示绘制一个2d图</span></span><br><span class="line"><span class="keyword">const</span> context = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>,&#123;<span class="attr">willReadFrequently</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (src) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 创建图片元素用来加载图片地址        </span></span><br><span class="line">  <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将图片地址传给nimg</span></span><br><span class="line">  img.<span class="property">src</span> = src</span><br><span class="line">  img.<span class="property">crossOrigin</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取图片的大小</span></span><br><span class="line">        <span class="keyword">const</span> width = img.<span class="property">width</span></span><br><span class="line">        <span class="keyword">const</span> height = img.<span class="property">height</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置canvas的大小</span></span><br><span class="line">        canvas.<span class="property">width</span> = width</span><br><span class="line">        canvas.<span class="property">height</span> = height</span><br><span class="line"></span><br><span class="line">        <span class="comment">// rgba值</span></span><br><span class="line">        <span class="keyword">let</span> r = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> g = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> b = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> a = <span class="number">0</span></span><br><span class="line">        <span class="keyword">const</span> fxs = width * height</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置要绘制的图片</span></span><br><span class="line">        context.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取图片的像素信息，并.data获得数组</span></span><br><span class="line">        <span class="keyword">const</span> data = context.<span class="title function_">getImageData</span>(<span class="number">0</span>, <span class="number">0</span>, width, height).<span class="property">data</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取所有的rgba的和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span> / <span class="number">4</span>; i++) &#123;</span><br><span class="line">          r += data[i * <span class="number">4</span>]</span><br><span class="line">          g += data[i * <span class="number">4</span> + <span class="number">1</span>]</span><br><span class="line">          b += data[i * <span class="number">4</span> + <span class="number">2</span>]</span><br><span class="line">          a += data[i * <span class="number">4</span> + <span class="number">3</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获得平均值</span></span><br><span class="line">        <span class="keyword">const</span> rgba = [<span class="built_in">parseInt</span>(r / fxs), <span class="built_in">parseInt</span>(g / fxs), <span class="built_in">parseInt</span>(b / fxs), <span class="built_in">parseInt</span>(a / fxs)]</span><br><span class="line">        <span class="title function_">resolve</span>(rgba)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> e</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="rgb颜色转hsl颜色"><a href="#rgb颜色转hsl颜色" class="headerlink" title="rgb颜色转hsl颜色"></a>rgb颜色转hsl颜色</h3><p>转换成hsl颜色而不适用rgb是因为hsl颜色的计算更符合人类的大脑（</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将rgb颜色转换成hsl颜色（方便人类计算）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (r, g, b) =&gt; &#123;</span><br><span class="line">  r /= <span class="number">255</span>, g /= <span class="number">255</span>, b /= <span class="number">255</span></span><br><span class="line">  <span class="keyword">let</span> max = <span class="title class_">Math</span>.<span class="title function_">max</span>(r, g, b), min = <span class="title class_">Math</span>.<span class="title function_">min</span>(r, g, b)</span><br><span class="line">  <span class="keyword">let</span> h, s, l = (max + min) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (max == min) &#123;</span><br><span class="line">    h = s = <span class="number">0</span> <span class="comment">// achromatic</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> d = max - min</span><br><span class="line">    s = l &gt; <span class="number">0.5</span> ? d / (<span class="number">2</span> - max - min) : d / (max + min)</span><br><span class="line">    <span class="keyword">switch</span> (max) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="attr">r</span>: h = (g - b) / d + (g &lt; b ? <span class="number">6</span> : <span class="number">0</span>); <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="attr">g</span>: h = (b - r) / d + <span class="number">2</span>; <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="attr">b</span>: h = (r - g) / d + <span class="number">4</span>; <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    h /= <span class="number">6</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [h, s, l]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加颜色"><a href="#添加颜色" class="headerlink" title="添加颜色"></a>添加颜色</h3><p>在获取曲目列表时就顺便给每一个曲目加上一个颜色值。</p>
<p>加了缓存机制，避免重复计算（如果是网络获取音乐，不缓存的话，还要发很多请求）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给歌曲加颜色值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> getColor <span class="keyword">from</span> <span class="string">&quot;../Tools/getColor.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> rgbToShl <span class="keyword">from</span> <span class="string">&quot;../Tools/rgbToHsl.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存封面的颜色值</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">coverCacheMap</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> (audios) =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; audios.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> cover = audios[i].<span class="property">cover</span> || audios[i].<span class="property">pic</span></span><br><span class="line">    <span class="keyword">if</span> (cover &amp;&amp; !audios[i].<span class="property">theme</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> cache = <span class="variable language_">window</span>.<span class="property">coverCacheMap</span>.<span class="title function_">get</span>(cover)</span><br><span class="line">      <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">        audios[i].<span class="property">theme</span> = cache</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> rgba = <span class="keyword">await</span> <span class="title function_">getColor</span>(cover)</span><br><span class="line">        <span class="keyword">const</span> hsl = <span class="title function_">rgbToShl</span>(rgba[<span class="number">0</span>], rgba[<span class="number">1</span>], rgba[<span class="number">2</span>])</span><br><span class="line">        audios[i].<span class="property">theme</span> = hsl</span><br><span class="line">        <span class="comment">// 缓存颜色值</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">coverCacheMap</span>.<span class="title function_">set</span>(cover, hsl)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="白天-x2F-夜晚模式"><a href="#白天-x2F-夜晚模式" class="headerlink" title="白天&#x2F;夜晚模式"></a>白天&#x2F;夜晚模式</h2><p>添加了可供白天&#x2F;夜晚模式样式切换的方法。</p>
<p>一个小技巧，:root中定义的css变量可以通过js修改从而实现改变样式。这样就不用操作DOM的行内样式啦。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * musicBlock标签外挂 按钮的夜晚/白天样式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> htmlEl = <span class="variable language_">document</span>.<span class="property">documentElement</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// let darkChange = mode===&quot;dark&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断夜晚模式</span></span><br><span class="line">  <span class="keyword">if</span> (htmlEl.<span class="property">dataset</span>.<span class="property">theme</span> !== <span class="string">&quot;dark&quot;</span>) &#123;</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-item-bg&quot;</span>, <span class="string">&quot;white&quot;</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-item-words&quot;</span>, <span class="string">&quot;black&quot;</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-item-shadow&quot;</span>, <span class="string">&quot;rgba(0,0,0,0.1)&quot;</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-item-hover-shadow-1&quot;</span>, <span class="string">&quot;rgba(50,50,93,0.25)&quot;</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-item-hover-shadow-2&quot;</span>, <span class="string">&quot;rgba(255,255,255,0.4)&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-item-bg&quot;</span>, <span class="string">&quot;#444444&quot;</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-item-words&quot;</span>, <span class="string">&quot;white&quot;</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-item-shadow&quot;</span>, <span class="string">&quot;rgba(255,255,255,0.1)&quot;</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-item-hover-shadow-1&quot;</span>, <span class="string">&quot;rgba(50,50,93,0.25)&quot;</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-item-hover-shadow-2&quot;</span>, <span class="string">&quot;rgba(255,255,255,0.4)&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="随时调用提示框"><a href="#随时调用提示框" class="headerlink" title="随时调用提示框"></a>随时调用提示框</h2><p>观察butterfly主题的源码后写的，所以应该只适用于butterfly（悲）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 随时使用snackbar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (str) =&gt; &#123;</span><br><span class="line">  <span class="comment">// window.onload = () =&gt; &#123;</span></span><br><span class="line">  <span class="comment">// 使用提示框（如果有进行配置的话）</span></span><br><span class="line">  <span class="comment">// window.useSnackbar = (str) =&gt; &#123;</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span>) &#123;</span><br><span class="line">    <span class="comment">// snackbar配置对象</span></span><br><span class="line">    <span class="keyword">const</span> snackbar = <span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span></span><br><span class="line">    <span class="comment">// 页面的亮度模式</span></span><br><span class="line">    <span class="keyword">const</span> dark = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> bgc</span><br><span class="line">    <span class="keyword">if</span> (dark === <span class="string">&quot;light&quot;</span>) &#123;</span><br><span class="line">      bgc = snackbar.<span class="property">bgLight</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dark === <span class="string">&quot;dark&quot;</span>) &#123;</span><br><span class="line">      bgc = snackbar.<span class="property">bgDark</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">Snackbar</span>.<span class="title function_">show</span>(&#123;</span><br><span class="line">      <span class="attr">backgroundColor</span>: bgc,</span><br><span class="line">      <span class="attr">text</span>: str,</span><br><span class="line">      <span class="attr">actionText</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">pos</span>: snackbar.<span class="property">position</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="播放器配色自适应"><a href="#播放器配色自适应" class="headerlink" title="播放器配色自适应"></a>播放器配色自适应</h1><p>感觉Aplayer播放器的默认样式颜色太素了，不是很好看。</p>
<p>于是我查阅了<a href="https://aplayer.js.org/#/">APlayer文档</a>，配置项可以配置主题，那我试试看。</p>
<p>但是配置了后啥也没变啊？是我瞎了还是播放器坏了？</p>
<p>观察了114514次后才发现，原来配置后改变颜色的是这玩意……</p>
<p><img src="https://image.cheriko.fun/post/202305311235894.png"></p>
<p>那我自己去修改样式改变它的配色吧，要做就要做好点，直接按照封面自适应配色（</p>
<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><p>我就光写css不写styl了吧，styl实在写不习惯（不知道这里能不能写scss（写完编译一下不就行了x）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--bg-color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>,<span class="number">100%</span>,<span class="number">100%</span>);</span><br><span class="line">  <span class="attr">--bg-color-choose</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">91%</span>);</span><br><span class="line">  <span class="attr">--scroll-bar-bg-color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">93%</span>);</span><br><span class="line">  <span class="attr">--scroll-bar-bg-color-hover</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">50%</span>);</span><br><span class="line">  <span class="attr">--music-list-cur-color</span>: <span class="built_in">hsl</span>(<span class="number">204</span>, <span class="number">64%</span>, <span class="number">44%</span>);</span><br><span class="line">  <span class="attr">--music-words-color</span>: <span class="built_in">hsl</span>(<span class="number">15</span>, <span class="number">3%</span>, <span class="number">29%</span>);</span><br><span class="line">  <span class="attr">--music-words-color-lighter</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">40%</span>);</span><br><span class="line">  <span class="attr">--music-words-color-lightest</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">60%</span>);</span><br><span class="line">  <span class="attr">--music-icon-color-hover</span>: <span class="built_in">hsl</span>(<span class="number">120</span>, <span class="number">1%</span>, <span class="number">20%</span>);</span><br><span class="line">  <span class="attr">--music-player-bar</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">80%</span>);</span><br><span class="line">  <span class="attr">--music-player-bar-load</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">67%</span>);</span><br><span class="line">  <span class="attr">--music-player-bar-played</span>: <span class="built_in">hsl</span>(<span class="number">204</span>, <span class="number">64%</span>, <span class="number">44%</span>);</span><br><span class="line">  <span class="attr">--music-border-color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">93%</span>);</span><br><span class="line">  <span class="attr">--music-console-border-color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">91%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 播放列表 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--bg-color) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 播放列表 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span> <span class="selector-class">.aplayer-list</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--music-border-color) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 滚动条本体 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-list</span> <span class="selector-tag">ol</span>::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--scroll-bar-bg-color) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.2s</span> all ease;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 滚动条悬停 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-list</span> <span class="selector-tag">ol</span>::-webkit-scrollbar-thumb:hover &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--scroll-bar-bg-color-hover) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 播放列表项 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-list</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--music-border-color) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 播放列表项首项 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-list</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 播放列表项悬停 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-list</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--bg-color-choose) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 正在播放 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-list</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span><span class="selector-class">.aplayer-list-light</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--bg-color-choose) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 正在播放指针 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-list</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span><span class="selector-class">.aplayer-list-light</span> <span class="selector-class">.aplayer-list-cur</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--music-list-cur-color) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 播放列表序号/艺人 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-list</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span> <span class="selector-class">.aplayer-list-index</span>,</span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-list</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span> <span class="selector-class">.aplayer-list-author</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--music-words-color-lighter) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 播放列表曲目标题 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-list</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span> <span class="selector-class">.aplayer-list-title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--music-words-color) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作台 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span> <span class="selector-class">.aplayer-body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--bg-color) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作台边框 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span> <span class="selector-class">.aplayer-info</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--music-console-border-color) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作台曲目标题 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-info</span> <span class="selector-class">.aplayer-music</span> <span class="selector-class">.aplayer-title</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--music-words-color) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作台艺人 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-info</span> <span class="selector-class">.aplayer-music</span> <span class="selector-class">.aplayer-author</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--music-words-color-lighter) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作台图标 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-info</span> <span class="selector-class">.aplayer-controller</span> <span class="selector-class">.aplayer-time</span> <span class="selector-class">.aplayer-icon</span> path &#123;</span><br><span class="line">  fill: <span class="built_in">var</span>(--music-words-color-lighter) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作台图标悬停 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-info</span> <span class="selector-class">.aplayer-controller</span> <span class="selector-class">.aplayer-time</span> <span class="selector-class">.aplayer-icon</span><span class="selector-pseudo">:hover</span> path &#123;</span><br><span class="line">  fill: <span class="built_in">var</span>(--music-icon-color-hover) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作台曲目时长 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-info</span> <span class="selector-class">.aplayer-controller</span> <span class="selector-class">.aplayer-time</span> <span class="selector-class">.aplayer-time-inner</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--music-words-color-lightest) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作台进度条 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-info</span> <span class="selector-class">.aplayer-controller</span> <span class="selector-class">.aplayer-bar-wrap</span> <span class="selector-class">.aplayer-bar</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--music-player-bar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作台已加载进度条 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-info</span> <span class="selector-class">.aplayer-controller</span> <span class="selector-class">.aplayer-bar-wrap</span> <span class="selector-class">.aplayer-bar</span> <span class="selector-class">.aplayer-loaded</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--music-player-bar-load);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作台已播放进度条 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-info</span> <span class="selector-class">.aplayer-controller</span> <span class="selector-class">.aplayer-bar-wrap</span> <span class="selector-class">.aplayer-bar</span> <span class="selector-class">.aplayer-played</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--music-player-bar-played);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作台进度条控制点 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-info</span> <span class="selector-class">.aplayer-controller</span> <span class="selector-class">.aplayer-bar-wrap</span> <span class="selector-class">.aplayer-bar</span> <span class="selector-class">.aplayer-played</span> <span class="selector-class">.aplayer-thumb</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--music-player-bar-played);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作台音量条 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-info</span> <span class="selector-class">.aplayer-controller</span> <span class="selector-class">.aplayer-volume-wrap</span> <span class="selector-class">.aplayer-volume-bar-wrap</span> <span class="selector-class">.aplayer-volume-bar</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--music-player-bar-load);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作台音量高低条 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-info</span> <span class="selector-class">.aplayer-controller</span> <span class="selector-class">.aplayer-volume-wrap</span> <span class="selector-class">.aplayer-volume-bar-wrap</span> <span class="selector-class">.aplayer-volume-bar</span> <span class="selector-class">.aplayer-volume</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--music-player-bar-load);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作台迷你模式开关 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span> <span class="selector-class">.aplayer-miniswitcher</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--scroll-bar-bg-color) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作台图标 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-miniswitcher</span> <span class="selector-class">.aplayer-icon</span> path &#123;</span><br><span class="line">  fill: <span class="built_in">var</span>(--music-words-color-lighter) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 操作台图标悬停 */</span></span><br><span class="line"><span class="selector-class">.aplayer</span> <span class="selector-class">.aplayer-miniswitcher</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.aplayer-icon</span> path &#123;</span><br><span class="line">  fill: <span class="built_in">var</span>(--music-icon-color-hover) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配色方案生成"><a href="#配色方案生成" class="headerlink" title="配色方案生成"></a>配色方案生成</h2><p>添加一个根据色值自动生成配色的方法吧，兼容白天&#x2F;夜晚模式。</p>
<p>使用缓存和步进的方式减少运算量（太细致的颜色差别一般人也看不出来x）。</p>
<p>其实我觉得步进值还可以高一点，因为这样理论上最多需要缓存200个配色（虽然实际上应该刷不出这么多）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> useSnackbar <span class="keyword">from</span> <span class="string">&quot;../Tools/useSnackbar.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 播放器颜色自适应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存当前的颜色</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">hueColors</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"><span class="comment">// 当前使用的缓存key</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">nowHue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> ap = <span class="variable language_">window</span>.<span class="property">fixedap</span></span><br><span class="line">  <span class="keyword">if</span> (ap) &#123;</span><br><span class="line">    <span class="comment">// 获取当前播放的样式</span></span><br><span class="line">    <span class="keyword">const</span> playList = ap.<span class="property">list</span></span><br><span class="line">    <span class="keyword">const</span> playIndex = playList.<span class="property">index</span></span><br><span class="line">    <span class="keyword">const</span> nowStyle = playList.<span class="property">audios</span>[playIndex].<span class="property">theme</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">changeStyle</span>(nowStyle)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">useSnackbar</span>(<span class="string">&quot;因不可抗力因素没得到封面颜色w(ﾟДﾟ)w，但至少不影响你收听啦.....((/- -)/&quot;</span>)</span><br><span class="line">          <span class="title function_">resolve</span>()</span><br><span class="line">        &#125;, <span class="number">3000</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">hslToStr</span> = (<span class="params">hsl</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`hsl(<span class="subst">$&#123;hsl[<span class="number">0</span>] * <span class="number">360</span>&#125;</span>,<span class="subst">$&#123;hsl[<span class="number">1</span>] * <span class="number">100</span>&#125;</span>%,<span class="subst">$&#123;hsl[<span class="number">2</span>] * <span class="number">100</span>&#125;</span>%)`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeStyle</span> = (<span class="params">hsl</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> htmlEl = <span class="variable language_">document</span>.<span class="property">documentElement</span></span><br><span class="line">  <span class="keyword">const</span> mode = htmlEl.<span class="property">dataset</span>.<span class="property">theme</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> hue = hsl[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每10为一个取色点，如果太黑了就直接gray</span></span><br><span class="line">  <span class="keyword">const</span> hueKey = <span class="title class_">Math</span>.<span class="title function_">round</span>(hue * <span class="number">100</span>) / <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> keyName</span><br><span class="line">  <span class="keyword">if</span> (hsl[<span class="number">1</span>] &lt; <span class="number">0.05</span>) &#123;</span><br><span class="line">    keyName = <span class="string">&quot;gray&quot;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    keyName = hueKey</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> darkChange = mode === <span class="string">&quot;dark&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断夜晚模式</span></span><br><span class="line">  <span class="keyword">if</span> (darkChange) &#123;</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-border-color&quot;</span>, <span class="string">&quot;hsl(0, 0%, 20%)&quot;</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-console-border-color&quot;</span>, <span class="string">&quot;hsl(0, 0%, 40%)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    keyName = mode + keyName</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-border-color&quot;</span>, <span class="string">&quot;hsl(0, 0%, 93%)&quot;</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-console-border-color&quot;</span>, <span class="string">&quot;hsl(0, 0%, 91%)&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 切换的key和上一首的key一样，那就不调整样式了</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">nowHue</span> === keyName) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 从缓存中获取样式</span></span><br><span class="line">    <span class="keyword">let</span> colors = <span class="variable language_">window</span>.<span class="property">hueColors</span>.<span class="title function_">get</span>(keyName)</span><br><span class="line">    <span class="comment">// 缓存中没有样式，生成</span></span><br><span class="line">    <span class="keyword">if</span> (!colors) &#123;</span><br><span class="line">      <span class="comment">// 夜晚模式</span></span><br><span class="line">      <span class="keyword">if</span> (darkChange) &#123;</span><br><span class="line">        <span class="comment">// 灰色配色</span></span><br><span class="line">        <span class="keyword">if</span> (keyName === <span class="string">&quot;gray&quot;</span> || keyName === <span class="string">&quot;darkgray&quot;</span>) &#123;</span><br><span class="line">          colors = &#123;</span><br><span class="line">            <span class="attr">bgColor</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>]),</span><br><span class="line">            <span class="attr">bgColorChoose</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>]),</span><br><span class="line">            <span class="attr">scrollBarBgColor</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.4</span>]),</span><br><span class="line">            <span class="attr">scrollBarBgColorHover</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>]),</span><br><span class="line">            <span class="attr">musicListCurColor</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.6</span>]),</span><br><span class="line">            <span class="attr">musicWordsColor</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]),</span><br><span class="line">            <span class="attr">musicWordsColorLighter</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>]),</span><br><span class="line">            <span class="attr">musicWordsColorLightest</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.7</span>]),</span><br><span class="line">            <span class="attr">musicIconColorHover</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]),</span><br><span class="line">            <span class="attr">musicPlayerBar</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>]),</span><br><span class="line">            <span class="attr">musicPlayerBarLoad</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.9</span>]),</span><br><span class="line">            <span class="attr">musicPlayerBarPlayed</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>])</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 彩色配色</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          colors = &#123;</span><br><span class="line">            <span class="attr">bgColor</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0.3</span>, <span class="number">0.1</span>]),</span><br><span class="line">            <span class="attr">bgColorChoose</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0.5</span>, <span class="number">0.2</span>]),</span><br><span class="line">            <span class="attr">scrollBarBgColor</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0.25</span>, <span class="number">0.4</span>]),</span><br><span class="line">            <span class="attr">scrollBarBgColorHover</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0.4</span>, <span class="number">0.5</span>]),</span><br><span class="line">            <span class="attr">musicListCurColor</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0.9</span>, <span class="number">0.6</span>]),</span><br><span class="line">            <span class="attr">musicWordsColor</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0</span>, <span class="number">1</span>]),</span><br><span class="line">            <span class="attr">musicWordsColorLighter</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0.05</span>, <span class="number">0.8</span>]),</span><br><span class="line">            <span class="attr">musicWordsColorLightest</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0.05</span>, <span class="number">0.7</span>]),</span><br><span class="line">            <span class="attr">musicIconColorHover</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0.01</span>, <span class="number">1</span>]),</span><br><span class="line">            <span class="attr">musicPlayerBar</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0.05</span>, <span class="number">0.75</span>]),</span><br><span class="line">            <span class="attr">musicPlayerBarLoad</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0.05</span>, <span class="number">0.9</span>]),</span><br><span class="line">            <span class="attr">musicPlayerBarPlayed</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">1</span>, <span class="number">0.44</span>])</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 白天模式</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 灰色配色</span></span><br><span class="line">        <span class="keyword">if</span> (keyName === <span class="string">&quot;gray&quot;</span>) &#123;</span><br><span class="line">          colors = &#123;</span><br><span class="line">            <span class="attr">bgColor</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.99</span>]),</span><br><span class="line">            <span class="attr">bgColorChoose</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.95</span>]),</span><br><span class="line">            <span class="attr">scrollBarBgColor</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.9</span>]),</span><br><span class="line">            <span class="attr">scrollBarBgColorHover</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>]),</span><br><span class="line">            <span class="attr">musicListCurColor</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.6</span>]),</span><br><span class="line">            <span class="attr">musicWordsColor</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0.</span>, <span class="number">0.29</span>]),</span><br><span class="line">            <span class="attr">musicWordsColorLighter</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.4</span>]),</span><br><span class="line">            <span class="attr">musicWordsColorLightest</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.6</span>]),</span><br><span class="line">            <span class="attr">musicIconColorHover</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>]),</span><br><span class="line">            <span class="attr">musicPlayerBar</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>]),</span><br><span class="line">            <span class="attr">musicPlayerBarLoad</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.67</span>]),</span><br><span class="line">            <span class="attr">musicPlayerBarPlayed</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.44</span>])</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 彩色配色</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          colors = &#123;</span><br><span class="line">            <span class="attr">bgColor</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">1</span>, <span class="number">0.99</span>]),</span><br><span class="line">            <span class="attr">bgColorChoose</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0.5</span>, <span class="number">0.95</span>]),</span><br><span class="line">            <span class="attr">scrollBarBgColor</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0.4</span>, <span class="number">0.9</span>]),</span><br><span class="line">            <span class="attr">scrollBarBgColorHover</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0.25</span>, <span class="number">0.8</span>]),</span><br><span class="line">            <span class="attr">musicListCurColor</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0.9</span>, <span class="number">0.6</span>]),</span><br><span class="line">            <span class="attr">musicWordsColor</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0.03</span>, <span class="number">0.29</span>]),</span><br><span class="line">            <span class="attr">musicWordsColorLighter</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.4</span>]),</span><br><span class="line">            <span class="attr">musicWordsColorLightest</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.6</span>]),</span><br><span class="line">            <span class="attr">musicIconColorHover</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0.01</span>, <span class="number">0.2</span>]),</span><br><span class="line">            <span class="attr">musicPlayerBar</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.8</span>]),</span><br><span class="line">            <span class="attr">musicPlayerBarLoad</span>: <span class="title function_">hslToStr</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0.67</span>]),</span><br><span class="line">            <span class="attr">musicPlayerBarPlayed</span>: <span class="title function_">hslToStr</span>([hueKey, <span class="number">0.64</span>, <span class="number">0.44</span>])</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 把新颜色值存入缓存</span></span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">hueColors</span>.<span class="title function_">set</span>(keyName, colors)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更改css变量从而改变配色</span></span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--bg-color&quot;</span>, colors.<span class="property">bgColor</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--bg-color-choose&quot;</span>, colors.<span class="property">bgColorChoose</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--scroll-bar-bg-color&quot;</span>, colors.<span class="property">scrollBarBgColor</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--scroll-bar-bg-color-hover&quot;</span>, colors.<span class="property">scrollBarBgColorHover</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-list-cur-color&quot;</span>, colors.<span class="property">musicListCurColor</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-words-color&quot;</span>, colors.<span class="property">musicWordsColor</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-words-color-lighter&quot;</span>, colors.<span class="property">musicWordsColorLighter</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-words-color-lightest&quot;</span>, colors.<span class="property">musicWordsColorLightest</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-icon-color-hover&quot;</span>, colors.<span class="property">musicIconColorHover</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-player-bar&quot;</span>, colors.<span class="property">musicPlayerBar</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-player-bar-load&quot;</span>, colors.<span class="property">musicPlayerBarLoad</span>)</span><br><span class="line">    htmlEl.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&quot;--music-player-bar-played&quot;</span>, colors.<span class="property">musicPlayerBarPlayed</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 某几个DOM被设了行内样式，所以这么改</span></span><br><span class="line">    <span class="keyword">const</span> apDOM = <span class="variable language_">window</span>.<span class="property">fixedap</span>.<span class="property">container</span></span><br><span class="line">    <span class="keyword">const</span> dot = apDOM.<span class="title function_">querySelector</span>(<span class="string">&quot;.aplayer-thumb&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> bar = apDOM.<span class="title function_">querySelector</span>(<span class="string">&quot;.aplayer-played&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> vol = apDOM.<span class="title function_">querySelector</span>(<span class="string">&quot;.aplayer-volume&quot;</span>)</span><br><span class="line">    dot.<span class="property">style</span>.<span class="property">backgroundColor</span> = colors.<span class="property">musicPlayerBarPlayed</span></span><br><span class="line">    bar.<span class="property">style</span>.<span class="property">backgroundColor</span> = colors.<span class="property">musicPlayerBarPlayed</span></span><br><span class="line">    vol.<span class="property">style</span>.<span class="property">backgroundColor</span> = colors.<span class="property">musicPlayerBarPlayed</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存当前使用key</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">nowHue</span> = keyName</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="添加事件"><a href="#添加事件" class="headerlink" title="添加事件"></a>添加事件</h2><p>调戏播放器的操作台好像也会触发canplay事件，其实我只希望切换播放时才触发，有没有更好的事件名？</p>
<p>另外感觉夜晚模式的那个按钮有点诡异，我点击后到底是先执行代码逻辑还是先改变data-theme啊。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 音乐切换时发起事件~</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> changeBlockStyle <span class="keyword">from</span> <span class="string">&quot;./changeBlockStyle.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> changePlayerStyle <span class="keyword">from</span> <span class="string">&quot;./changePlayerStyle.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> ap = <span class="variable language_">window</span>.<span class="property">fixedap</span></span><br><span class="line">  <span class="comment">// 更改播放时刷新样式</span></span><br><span class="line">  ap.<span class="title function_">on</span>(<span class="string">&quot;canplay&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">changePlayerStyle</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 点击夜晚模式按钮时刷新样式</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> target = e.<span class="property">target</span></span><br><span class="line">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;darkmode&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(target === btn || target.<span class="property">parentNode</span> === btn) &#123;</span><br><span class="line">      <span class="title function_">changePlayerStyle</span>()</span><br><span class="line">      <span class="title function_">changeBlockStyle</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="播放器实例问题"><a href="#播放器实例问题" class="headerlink" title="播放器实例问题"></a>播放器实例问题</h1><p>找到了解决方法，直接在开启应用（Window.onload）时就读取播放器实例然后存在全局window中。</p>
<p>亲测除了刷新否则不会丢，这样就可以随时操作该实例，不用每次都创建了（创建新实例还容易出bug）。</p>
<p>顺便把其他需要初始化的东西也丢进去。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> changePlay <span class="keyword">from</span> <span class="string">&quot;./changePlay.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> addCoverColor <span class="keyword">from</span> <span class="string">&quot;./addCoverColor.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> changePlayerStyle <span class="keyword">from</span> <span class="string">&quot;./changePlayerStyle.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> changeBlockStyle <span class="keyword">from</span> <span class="string">&quot;./changeBlockStyle.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存所有aplayer实例到全局上（butterfly本身为什么切换页面就失去window.aplayers了？）</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> aps = <span class="variable language_">window</span>.<span class="property">aplayers</span></span><br><span class="line">  <span class="comment">// 获得全局吸底aplayer（有fixed配置的那个）</span></span><br><span class="line">  aps.<span class="title function_">some</span>(<span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a.<span class="property">options</span>.<span class="property">fixed</span>) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">fixedap</span> = a</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 我不知道aplayer播放器有没有列表生成完毕的事件，所以先干脆直接上轮询（</span></span><br><span class="line">  <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 为初始播放列表增加配色</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">fixedap</span>.<span class="property">list</span>?.<span class="property">audios</span>?.<span class="property">length</span>&gt;<span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">addCoverColor</span>(<span class="variable language_">window</span>.<span class="property">fixedap</span>.<span class="property">list</span>.<span class="property">audios</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 初始化播放器样式</span></span><br><span class="line">      <span class="title function_">changePlayerStyle</span>()   </span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 绑定使播放器样式变化的事件</span></span><br><span class="line">      <span class="title function_">changePlay</span>()</span><br><span class="line"></span><br><span class="line">      <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化音乐卡样式</span></span><br><span class="line">  <span class="title function_">changeBlockStyle</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>能保存播放器实例后玩得舒服多了。</p>
<p>但是好像因为服务端的设置，我无法获取QQ源封面的平均颜色，如果哪位大佬有解决方法请狠狠地教导我orz。</p>
<p>有时间的话想把获取音乐的接口换一下，要不用<a href="https://neteasecloudmusicapi.js.org/#/">网易云音乐API</a>&#x2F;<a href="https://jsososo.github.io/QQMusicApi/#/?id=qq-%E9%9F%B3%E4%B9%90-api">QQ音乐API</a>自己造一个接口？</p>
<p>如果可以的话我甚至还想在网站背景加个音乐可视化（错乱）</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>DIY</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>hexo</tag>
        <tag>音乐</tag>
        <tag>DIY</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3概述</title>
    <url>/web/study/vue/1.Vue3%E6%A6%82%E8%BF%B0.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="介绍Vue"><a href="#介绍Vue" class="headerlink" title="介绍Vue"></a>介绍Vue</h1><ul>
<li><p>Vue是一套用于构建用户界面的渐进式框架</p>
</li>
<li><p>Vue的优点</p>
<ul>
<li>自底向上逐层运用</li>
<li>只关注视图层，易上手</li>
<li>易与第三方库或现有项目整合</li>
<li>能驱动复杂的单页面项目</li>
</ul>
</li>
<li><p>Vue是MVVM（Model-View-ViewModel）架构</p>
<ul>
<li>View：视图层（UI用户界面）</li>
<li>ViewModel：业务逻辑层（一切JS可视为业务逻辑）</li>
<li>Model：数据层（存储数据、对数据的处理）</li>
</ul>
</li>
</ul>
<p><img src="https://image.cheriko.fun/post/202305011714208.png" alt="MVVM架构"></p>
<h1 id="Vue2-vs-Vue3"><a href="#Vue2-vs-Vue3" class="headerlink" title="Vue2 vs Vue3"></a>Vue2 vs Vue3</h1><ul>
<li>声明式API（Options API）写的比较分散，Vue2的写法</li>
<li>组合式API（Composition API）可以把连贯的逻辑写在一起，或者封装成hook</li>
</ul>
<p><img src="https://image.cheriko.fun/post/202305011714210.png" alt="声明式API &amp; 组合式API"></p>
<h1 id="Vue3新特性"><a href="#Vue3新特性" class="headerlink" title="Vue3新特性"></a>Vue3新特性</h1><ul>
<li><p>重写双向数据绑定</p>
<ul>
<li><p>Vue2：基于<code>Object.defineProperty()</code>实现</p>
<ul>
<li><p>需要使用一个备份对象</p>
</li>
<li><p>需要for in循环，才能给原对象每个属性都加响应式</p>
</li>
<li><p>无法监听数组变化，需要重写数组方法才能实现响应式（但实现的不完全）</p>
</li>
<li><p>代码复杂</p>
</li>
<li><p>原数据新增的属性不带响应式</p>
</li>
<li><p>原数据删除属性时不删除对应响应式</p>
</li>
<li><p>无法处理索引和length属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">property</span>: <span class="number">114514</span>&#125;</span><br><span class="line"><span class="keyword">const</span> _obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(_obj, <span class="string">&#x27;property&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人读取property属性了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> property <span class="keyword">in</span> obj? obj.<span class="property">property</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">       	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改property属性了，且值是&#x27;</span>+value)</span><br><span class="line">        obj.<span class="property">property</span> = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Vue3：基于Proxy实现（ES6新增）</p>
<ul>
<li><p>丢掉麻烦的备份数据</p>
</li>
<li><p>省去for in循环</p>
</li>
<li><p>监听数组变化</p>
</li>
<li><p>代码简化</p>
</li>
<li><p>监听动态新增的属性</p>
</li>
<li><p>监听删除的属性</p>
</li>
<li><p>监听数据的索引和length属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> proxyObj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">	<span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人读取property属性了&#x27;</span>)</span><br><span class="line">		<span class="keyword">return</span> prop <span class="keyword">in</span> target? target[prop]: <span class="number">0</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">target, property, value</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改property属性了，且值是&#x27;</span>+value)</span><br><span class="line">		target[prop] = value</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>VDOM性能瓶颈的解决</p>
<ul>
<li><p>Vue2中，每次更新diff都是全量对比</p>
</li>
<li><p>Vue3中只对比带有标记的，减少了非动态内容的对比消耗（<a href="https://template-explorer.vuejs.org/">能感受diff优化的工具</a>）</p>
<p><img src="https://image.cheriko.fun/post/202305011714211.png" alt="diff的优化"></p>
</li>
</ul>
</li>
<li><p>支持Fragments</p>
<blockquote>
<p>文档碎片，表示一个没有父级文件的最小文档对象，被视作轻量版Document。</p>
</blockquote>
<blockquote>
<p>它不是真实DOM树的一部分，变化不触发DOM重绘、不导致性能问题。</p>
</blockquote>
<blockquote>
<p>主要解决DOM元素的插入问题，例如需插入多个节点时，先创建一个Fragment，把节点依次添加到Fragment上，再把Fragment添加到页面Document上，这样只会产生一次重绘；而如果直接把DOM节点依次添加到Document，就会引发多次重绘。</p>
</blockquote>
<ul>
<li>Vue2：Template中只能有一个父节点，其他节点要被包在里面</li>
<li>Vue3：Template里可以有多个节点，并支持了tsx和jsx写法（类似react），还新增了Suspense和teleport两个内置组件，和多v-model用法</li>
</ul>
</li>
<li><p>支持Tree-shaking</p>
<blockquote>
<p>代码运行结果保持不变的前提下，去掉无用代码。</p>
</blockquote>
<ul>
<li>Vue2：无论使用什么功能，最终都会出现在生产代码中，Vue实例在项目中是单例的，捆绑程序无法检测到该对象的哪些属性在代码中被使用到</li>
<li>Vue3：将全局API进行分块，如果不使用某些功能，就不会被包含在基础包中（不会被打包）</li>
</ul>
</li>
<li><p>新增Composition API（Setup语法糖式编程）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>watch侦听器</title>
    <url>/web/study/vue/11.watch%E4%BE%A6%E5%90%AC%E5%99%A8.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h1><p>主要用来监听响应式数据（被ref或reactive包裹的数据）的变化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    case1: &lt;input v-model=&quot;message&quot; type=&quot;text&quot;&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    case2: &lt;input v-model=&quot;message2&quot; type=&quot;text&quot;&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    case3: &lt;input v-model=&quot;message3.foo.bar.baz.value&quot; type=&quot;text&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, reactive, watch &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">const message = ref&lt;string&gt;(&quot;野兽先辈&quot;)</span><br><span class="line"></span><br><span class="line">const message2 = ref&lt;string&gt;(&quot;UDK姐贵&quot;)</span><br><span class="line"></span><br><span class="line">const message3 = reactive(&#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    bar: &#123;</span><br><span class="line">      baz: &#123;</span><br><span class="line">        value: &quot;qux&quot;,</span><br><span class="line">        tag: &quot;qur&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 参数1：要被侦听的数据 参数2：回调函数cb</span><br><span class="line">// watch(message, (newValue, oldValue)=&gt; &#123;</span><br><span class="line">//   // 参数1：新值 参数2：旧值</span><br><span class="line">//   console.log(newValue, oldValue)</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">// 也可以侦听多个词</span><br><span class="line">// 此时参数1和回调函数的两个参数都是数组，它们的顺序对应</span><br><span class="line">watch([message, message2], (newValue, oldValue)=&gt; &#123;</span><br><span class="line">  console.log(newValue, oldValue)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 参数3是options配置项</span><br><span class="line">watch(message3, (newValue, oldValue)=&gt; &#123;</span><br><span class="line">  // 监听引用类型时，所返回的新值和旧值是一样的</span><br><span class="line">  console.log(newValue, oldValue)</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  // 开启深度监听，能监听到对象的深层嵌套内容</span><br><span class="line">  // 如果引用类型是由reactive包裹的，则不开启深度监听也能被监听</span><br><span class="line">  deep: true,</span><br><span class="line"></span><br><span class="line">  // 立马就让cb执行一次，此次的newValue为数据的默认值，oldValue为undefined</span><br><span class="line">  immediate: true,</span><br><span class="line"></span><br><span class="line">  // pre：组件更新之前执行 sync：与组件更新同步执行 post：组件更新之后执行</span><br><span class="line">  flush: &quot;pre&quot;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 这样监听一个对象的某一属性值</span><br><span class="line">// watch(()=&gt; message3.foo.bar.baz.value, (newValue, oldValue)=&gt; &#123;</span><br><span class="line">//   console.log(newValue, oldValue)</span><br><span class="line">// &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h1><p>另一种监听数据的方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    case1: &lt;input v-model=&quot;message&quot; type=&quot;text&quot; ref=&quot;ipt&quot;&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    case2: &lt;input v-model=&quot;message2&quot; type=&quot;text&quot;&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;button @click=&quot;stopWatch&quot;&gt;停止监听&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, watchEffect &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">const message = ref&lt;string&gt;(&quot;野兽先辈&quot;)</span><br><span class="line"></span><br><span class="line">const message2 = ref&lt;string&gt;(&quot;野兽妹&quot;)</span><br><span class="line"></span><br><span class="line">const ipt = ref&lt;HTMLInputElement&gt;()</span><br><span class="line"></span><br><span class="line">// 只要是写进回调函数内的数据都会被监听</span><br><span class="line">// 一进页面，回调函数就会立即被调用</span><br><span class="line">// 返回值是一个监听停止操作函数</span><br><span class="line">const stop = watchEffect((oninvalidate)=&gt; &#123;</span><br><span class="line">  console.log(&quot;message=====&gt;&quot;, message.value)</span><br><span class="line">  console.log(&quot;message2=====&gt;&quot;, message2.value)</span><br><span class="line"></span><br><span class="line">  // 刚开始dom还没挂载，所以输出的一定是undefined</span><br><span class="line">  // 配置项中使用flush: &quot;post&quot;即可挂载后读</span><br><span class="line">  console.log(ipt.value, &quot;input&quot;)</span><br><span class="line"></span><br><span class="line">  // 在监听cb之前做一些其他处理，这个函数的调用先于函数体内其他代码</span><br><span class="line">  // 可以用来进行防抖、清除接口等操作</span><br><span class="line">  oninvalidate(()=&gt; &#123;</span><br><span class="line">    console.log(&quot;before&quot;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, &#123;</span><br><span class="line">  // DOM挂载后读</span><br><span class="line">  flush: &quot;post&quot;,</span><br><span class="line"></span><br><span class="line">  // 开发环境的调试函数</span><br><span class="line">  onTrigger(e) &#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 调用监听停止操作函数就能停止该数据监听</span><br><span class="line">const stopWatch = ()=&gt; stop()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>在Vue源码（<code>/package/runtime-core/src/apiWatch.ts</code>）中可以看到watch的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> watch&lt;T = <span class="built_in">any</span>, <span class="title class_">Immediate</span> <span class="keyword">extends</span> <span class="title class_">Readonly</span>&lt;<span class="built_in">boolean</span>&gt; = <span class="literal">false</span>&gt;(</span><br><span class="line">  <span class="attr">source</span>: T | <span class="title class_">WatchSource</span>&lt;T&gt;,</span><br><span class="line">  <span class="attr">cb</span>: <span class="built_in">any</span>,</span><br><span class="line">  options?: <span class="title class_">WatchOptions</span>&lt;<span class="title class_">Immediate</span>&gt;</span><br><span class="line">): <span class="title class_">WatchStopHandle</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (__DEV__ &amp;&amp; !<span class="title function_">isFunction</span>(cb)) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(</span><br><span class="line">      <span class="string">`\`watch(fn, options?)\` signature has been moved to a separate API. `</span> +</span><br><span class="line">        <span class="string">`Use \`watchEffect(fn, options?)\` instead. \`watch\` now only `</span> +</span><br><span class="line">        <span class="string">`supports \`watch(source, cb, options?) signature.`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doWatch</span>(source <span class="keyword">as</span> <span class="built_in">any</span>, cb, options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doWatch</span>(<span class="params"></span></span><br><span class="line"><span class="params">  source: WatchSource | WatchSource[] | WatchEffect | <span class="built_in">object</span>,</span></span><br><span class="line"><span class="params">  cb: WatchCallback | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  &#123; immediate, deep, flush, onTrack, onTrigger &#125;: WatchOptions = EMPTY_OBJ</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">WatchStopHandle</span> &#123;</span><br><span class="line">  <span class="comment">// 一些错误处理</span></span><br><span class="line">  <span class="keyword">if</span> (__DEV__ &amp;&amp; !cb) &#123;</span><br><span class="line">    <span class="keyword">if</span> (immediate !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="title function_">warn</span>(</span><br><span class="line">        <span class="string">`watch() &quot;immediate&quot; option is only respected when using the `</span> +</span><br><span class="line">          <span class="string">`watch(source, callback, options?) signature.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (deep !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="title function_">warn</span>(</span><br><span class="line">        <span class="string">`watch() &quot;deep&quot; option is only respected when using the `</span> +</span><br><span class="line">          <span class="string">`watch(source, callback, options?) signature.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">warnInvalidSource</span> = (<span class="params">s: <span class="built_in">unknown</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">warn</span>(</span><br><span class="line">      <span class="string">`Invalid watch source: `</span>,</span><br><span class="line">      s,</span><br><span class="line">      <span class="string">`A watch source can only be a getter/effect function, a ref, `</span> +</span><br><span class="line">        <span class="string">`a reactive object, or an array of these types.`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> instance =</span><br><span class="line">    <span class="title function_">getCurrentScope</span>() === currentInstance?.<span class="property">scope</span> ? currentInstance : <span class="literal">null</span></span><br><span class="line">  <span class="comment">// const instance = currentInstance</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">getter</span>: <span class="function">() =&gt;</span> <span class="built_in">any</span></span><br><span class="line">  <span class="keyword">let</span> forceTrigger = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> isMultiSource = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 格式化source，赋给getter函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isRef</span>(source)) &#123;</span><br><span class="line">    <span class="comment">// 如果是ref对象，创建一个getter函数并读取了ref对象的value属性</span></span><br><span class="line">    getter = <span class="function">() =&gt;</span> source.<span class="property">value</span></span><br><span class="line">    forceTrigger = <span class="title function_">isShallow</span>(source)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isReactive</span>(source)) &#123;</span><br><span class="line">    <span class="comment">// 如果是reactive对象，直接返回一个getter函数，并设deep为true</span></span><br><span class="line">    getter = <span class="function">() =&gt;</span> source</span><br><span class="line">    deep = <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isArray</span>(source)) &#123;</span><br><span class="line">    isMultiSource = <span class="literal">true</span></span><br><span class="line">    forceTrigger = source.<span class="title function_">some</span>(<span class="function"><span class="params">s</span> =&gt;</span> <span class="title function_">isReactive</span>(s) || <span class="title function_">isShallow</span>(s))</span><br><span class="line">    getter = <span class="function">() =&gt;</span></span><br><span class="line">      <span class="comment">// 如果是数组，遍历并处理里面的ref和reactive</span></span><br><span class="line">      source.<span class="title function_">map</span>(<span class="function"><span class="params">s</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isRef</span>(s)) &#123;</span><br><span class="line">          <span class="keyword">return</span> s.<span class="property">value</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isReactive</span>(s)) &#123;</span><br><span class="line">          <span class="comment">// 递归对每个属性进行侦听</span></span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">traverse</span>(s)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isFunction</span>(s)) &#123;</span><br><span class="line">          <span class="comment">// 进行某种封装</span></span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">callWithErrorHandling</span>(s, instance, <span class="title class_">ErrorCodes</span>.<span class="property">WATCH_GETTER</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          __DEV__ &amp;&amp; <span class="title function_">warnInvalidSource</span>(s)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isFunction</span>(source)) &#123;</span><br><span class="line">    <span class="comment">// 如果是函数，判断cb是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">      <span class="comment">// getter with cb</span></span><br><span class="line">      <span class="comment">// cb存在，getter对source进行简单的封装</span></span><br><span class="line">      getter = <span class="function">() =&gt;</span></span><br><span class="line">        <span class="title function_">callWithErrorHandling</span>(source, instance, <span class="title class_">ErrorCodes</span>.<span class="property">WATCH_GETTER</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// no cb -&gt; simple effect</span></span><br><span class="line">      <span class="comment">// cb不存在，会执行watch effect</span></span><br><span class="line">      getter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance &amp;&amp; instance.<span class="property">isUnmounted</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cleanup) &#123;</span><br><span class="line">          <span class="title function_">cleanup</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">callWithAsyncErrorHandling</span>(</span><br><span class="line">          source,</span><br><span class="line">          instance,</span><br><span class="line">          <span class="title class_">ErrorCodes</span>.<span class="property">WATCH_CALLBACK</span>,</span><br><span class="line">          [onCleanup]</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    getter = <span class="variable constant_">NOOP</span></span><br><span class="line">    __DEV__ &amp;&amp; <span class="title function_">warnInvalidSource</span>(source)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.x array mutation watch compat</span></span><br><span class="line">  <span class="keyword">if</span> (__COMPAT__ &amp;&amp; cb &amp;&amp; !deep) &#123;</span><br><span class="line">    <span class="keyword">const</span> baseGetter = getter</span><br><span class="line">    getter = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> val = <span class="title function_">baseGetter</span>()</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        <span class="title function_">isArray</span>(val) &amp;&amp;</span><br><span class="line">        <span class="title function_">checkCompatEnabled</span>(<span class="title class_">DeprecationTypes</span>.<span class="property">WATCH_ARRAY</span>, instance)</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="title function_">traverse</span>(val)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理deep深度监听</span></span><br><span class="line">  <span class="keyword">if</span> (cb &amp;&amp; deep) &#123;</span><br><span class="line">    <span class="keyword">const</span> baseGetter = getter</span><br><span class="line">    <span class="comment">// 递归对每个属性进行侦听，比较耗时，非必要不开启</span></span><br><span class="line">    getter = <span class="function">() =&gt;</span> <span class="title function_">traverse</span>(<span class="title function_">baseGetter</span>())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">cleanup</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">onCleanup</span>: <span class="title class_">OnCleanup</span> = <span class="function">(<span class="params">fn: () =&gt; <span class="built_in">void</span></span>) =&gt;</span> &#123;</span><br><span class="line">    cleanup = effect.<span class="property">onStop</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">callWithErrorHandling</span>(fn, instance, <span class="title class_">ErrorCodes</span>.<span class="property">WATCH_CLEANUP</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// in SSR there is no need to setup an actual effect, and it should be noop</span></span><br><span class="line">  <span class="comment">// unless it&#x27;s eager or sync flush</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">ssrCleanup</span>: (<span class="function">() =&gt;</span> <span class="built_in">void</span>)[] | <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">if</span> (__SSR__ &amp;&amp; isInSSRComponentSetup) &#123;</span><br><span class="line">    <span class="comment">// we will also not call the invalidate callback (+ runner is not set up)</span></span><br><span class="line">    onCleanup = <span class="variable constant_">NOOP</span></span><br><span class="line">    <span class="keyword">if</span> (!cb) &#123;</span><br><span class="line">      <span class="title function_">getter</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="title function_">callWithAsyncErrorHandling</span>(cb, instance, <span class="title class_">ErrorCodes</span>.<span class="property">WATCH_CALLBACK</span>, [</span><br><span class="line">        <span class="title function_">getter</span>(),</span><br><span class="line">        isMultiSource ? [] : <span class="literal">undefined</span>,</span><br><span class="line">        onCleanup</span><br><span class="line">      ])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flush === <span class="string">&#x27;sync&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> ctx = <span class="title function_">useSSRContext</span>() <span class="keyword">as</span> <span class="title class_">SSRContext</span></span><br><span class="line">      ssrCleanup = ctx.<span class="property">__watcherHandles</span> || (ctx.<span class="property">__watcherHandles</span> = [])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">NOOP</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 给旧值作初始化</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">oldValue</span>: <span class="built_in">any</span> = isMultiSource</span><br><span class="line">    ? <span class="keyword">new</span> <span class="title class_">Array</span>((source <span class="keyword">as</span> []).<span class="property">length</span>).<span class="title function_">fill</span>(<span class="variable constant_">INITIAL_WATCHER_VALUE</span>)</span><br><span class="line">    : <span class="variable constant_">INITIAL_WATCHER_VALUE</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 进行监听的核心，cb也在这里调用</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">job</span>: <span class="title class_">SchedulerJob</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!effect.<span class="property">active</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">      <span class="comment">// watch(source, cb)</span></span><br><span class="line">      <span class="comment">// 获取新值</span></span><br><span class="line">      <span class="keyword">const</span> newValue = effect.<span class="title function_">run</span>()</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        deep ||</span><br><span class="line">        forceTrigger ||</span><br><span class="line">        (isMultiSource</span><br><span class="line">          ? (newValue <span class="keyword">as</span> <span class="built_in">any</span>[]).<span class="title function_">some</span>(<span class="function">(<span class="params">v, i</span>) =&gt;</span></span><br><span class="line">              <span class="title function_">hasChanged</span>(v, (oldValue <span class="keyword">as</span> <span class="built_in">any</span>[])[i])</span><br><span class="line">            )</span><br><span class="line">          : <span class="title function_">hasChanged</span>(newValue, oldValue)) ||</span><br><span class="line">        (__COMPAT__ &amp;&amp;</span><br><span class="line">          <span class="title function_">isArray</span>(newValue) &amp;&amp;</span><br><span class="line">          <span class="title function_">isCompatEnabled</span>(<span class="title class_">DeprecationTypes</span>.<span class="property">WATCH_ARRAY</span>, instance))</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">// cleanup before running cb again</span></span><br><span class="line">        <span class="keyword">if</span> (cleanup) &#123;</span><br><span class="line">          <span class="title function_">cleanup</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">callWithAsyncErrorHandling</span>(cb, instance, <span class="title class_">ErrorCodes</span>.<span class="property">WATCH_CALLBACK</span>, [</span><br><span class="line">          newValue,</span><br><span class="line">          <span class="comment">// pass undefined as the old value when it&#x27;s changed for the first time</span></span><br><span class="line">          <span class="comment">// 第一次（immediate）执行旧值 oldValue是undefined或空数组</span></span><br><span class="line">          oldValue === <span class="variable constant_">INITIAL_WATCHER_VALUE</span></span><br><span class="line">            ? <span class="literal">undefined</span></span><br><span class="line">            : isMultiSource &amp;&amp; oldValue[<span class="number">0</span>] === <span class="variable constant_">INITIAL_WATCHER_VALUE</span></span><br><span class="line">            ? []</span><br><span class="line">            : oldValue,</span><br><span class="line">          onCleanup</span><br><span class="line">        ])</span><br><span class="line">        <span class="comment">// 直接赋值，更新旧值，一切操作执行完才会更新</span></span><br><span class="line">        <span class="comment">// 如果是对象的话，就直接引用了，所以会导致新旧值一样</span></span><br><span class="line">        oldValue = newValue</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 变成watchEffect模式</span></span><br><span class="line">      effect.<span class="title function_">run</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// important: mark the job as a watcher callback so that scheduler knows</span></span><br><span class="line">  <span class="comment">// it is allowed to self-trigger (#1727)</span></span><br><span class="line">  job.<span class="property">allowRecurse</span> = !!cb</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调度模式</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">scheduler</span>: <span class="title class_">EffectScheduler</span></span><br><span class="line">  <span class="keyword">if</span> (flush === <span class="string">&#x27;sync&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 同步执行</span></span><br><span class="line">    scheduler = job <span class="keyword">as</span> <span class="built_in">any</span> <span class="comment">// the scheduler function gets called directly</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flush === <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 把job传给queuePostRenderEffect（组件更新后执行）</span></span><br><span class="line">    scheduler = <span class="function">() =&gt;</span> <span class="title function_">queuePostRenderEffect</span>(job, instance &amp;&amp; instance.<span class="property">suspense</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 组件更新前执行</span></span><br><span class="line">    <span class="comment">// default: &#x27;pre&#x27;</span></span><br><span class="line">    job.<span class="property">pre</span> = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (instance) job.<span class="property">id</span> = instance.<span class="property">uid</span></span><br><span class="line">    scheduler = <span class="function">() =&gt;</span> <span class="title function_">queueJob</span>(job)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 收集依赖（没有更新，所以job还不会走）</span></span><br><span class="line">  <span class="comment">// 更新的时候就会调用scheduler，进而调用job，这时就能读到新值了</span></span><br><span class="line">  <span class="keyword">const</span> effect = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(getter, scheduler)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    effect.<span class="property">onTrack</span> = onTrack</span><br><span class="line">    effect.<span class="property">onTrigger</span> = onTrigger</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// initial run</span></span><br><span class="line">  <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">    <span class="comment">// 传了cb</span></span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="comment">// 设置了immediate，立马调用一次</span></span><br><span class="line">      <span class="title function_">job</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 没有设置immediate，给旧值设置初始值</span></span><br><span class="line">      oldValue = effect.<span class="title function_">run</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flush === <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">    <span class="title function_">queuePostRenderEffect</span>(</span><br><span class="line">      effect.<span class="property">run</span>.<span class="title function_">bind</span>(effect),</span><br><span class="line">      instance &amp;&amp; instance.<span class="property">suspense</span></span><br><span class="line">    )</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    effect.<span class="title function_">run</span>()</span><br><span class="line">  &#125;</span><br><span class="line">      </span><br><span class="line">  <span class="comment">// 取消侦听的函数作为返回值</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">unwatch</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    effect.<span class="title function_">stop</span>()</span><br><span class="line">    <span class="keyword">if</span> (instance &amp;&amp; instance.<span class="property">scope</span>) &#123;</span><br><span class="line">      <span class="title function_">remove</span>(instance.<span class="property">scope</span>.<span class="property">effects</span>!, effect)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__SSR__ &amp;&amp; ssrCleanup) ssrCleanup.<span class="title function_">push</span>(unwatch)</span><br><span class="line">  <span class="keyword">return</span> unwatch  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>组件＆Vue3生命周期</title>
    <url>/web/study/vue/12.%E7%BB%84%E4%BB%B6%EF%BC%86Vue3%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>每一个<code>.vue</code>文件都可以充当组件使用，每一个组件都可以复用。</p>
<p><img src="https://image.cheriko.fun/post/202305181518701.png"></p>
<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;1145141919810&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 组件可以进行复用，还可以做循环、嵌套、传参 --&gt;</span><br><span class="line">    &lt;A&gt;&lt;/A&gt;</span><br><span class="line">    &lt;A&gt;&lt;/A&gt;</span><br><span class="line">    &lt;A&gt;&lt;/A&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, reactive &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">// 不能和html标签名起冲突</span><br><span class="line">// import div from &quot;@/components/A.vue&quot;</span><br><span class="line">import A from &quot;@/components/A.vue&quot;</span><br><span class="line"></span><br><span class="line">// 在Vue2中需要通过components选项对组件进行注册，但Vue3中不需要（开箱即用）</span><br><span class="line">// component: &#123;</span><br><span class="line">// A</span><br><span class="line">// &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>A.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;我是一个组件&lt;/p&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Vue3生命周期"><a href="#Vue3生命周期" class="headerlink" title="Vue3生命周期"></a>Vue3生命周期</h1><p>一个组件从创建到销毁的全过程。</p>
<p><img src="https://image.cheriko.fun/post/202305181642173.png"></p>
<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;1145141919810&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 当组件绑定了v-if，flag值变化时会触发组件的创建或销毁，而v-show不会 --&gt;</span><br><span class="line">    &lt;A v-if=&quot;flag&quot;&gt;&lt;/A&gt;</span><br><span class="line">    &lt;A v-if=&quot;flag&quot;&gt;&lt;/A&gt;</span><br><span class="line">    &lt;button @click=&quot;flag=!flag&quot;&gt;创建/销毁&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, reactive &#125; from &quot;vue&quot;</span><br><span class="line">import A from &quot;@/components/A.vue&quot;</span><br><span class="line">const flag = ref&lt;Boolean&gt;(false)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>A.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;我是一个组件&lt;/p&gt;</span><br><span class="line">    &lt;div ref=&quot;div&quot;&gt;&#123;&#123; str &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;change&quot;&gt;修改str&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 在setup语法糖模式中没有beforeCreate和created（因为相当于setup）</span><br><span class="line">import &#123; getCurrentInstance, ref, onBeforeMount, onMounted, onBeforeUpdate, onUpdated, onBeforeUnmount, onUnmounted, onRenderTracked, onRenderTriggered &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">const str = ref&lt;string&gt;(&quot;野兽先辈&quot;)</span><br><span class="line">const div = ref&lt;HTMLDivElement&gt;()</span><br><span class="line">const instance = getCurrentInstance()</span><br><span class="line"></span><br><span class="line">const change = ()=&gt; &#123;</span><br><span class="line">  str.value = str.value + 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 在setup时还读不到任何DOM元素</span><br><span class="line">// 可以看到这些生命周期函数都被注册到组件实例上了</span><br><span class="line">console.log(&quot;setup&quot;, div.value, instance)</span><br><span class="line"></span><br><span class="line">// 挂载前</span><br><span class="line">onBeforeMount(()=&gt; &#123;</span><br><span class="line">  // 在onBeforeMount时还读不到任何DOM元素</span><br><span class="line">  console.log(&quot;onBeforeMount&quot;, div.value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 挂载后</span><br><span class="line">onMounted(()=&gt; &#123;</span><br><span class="line">  // 从onMounted开始能读到DOM元素了</span><br><span class="line">  console.log(&quot;onMounted&quot;, div.value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 更新前</span><br><span class="line">onBeforeUpdate(()=&gt; &#123;</span><br><span class="line">  // 在onBeforeUpdate时DOM元素还未被更新</span><br><span class="line">  console.log(&quot;onBeforeUpdate&quot;, div.value?.innerText)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 更新后</span><br><span class="line">onUpdated(()=&gt; &#123;</span><br><span class="line">  // 从onUpdated开始DOM元素已被更新了</span><br><span class="line">  console.log(&quot;onUpdated&quot;, div.value?.innerText)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 销毁前</span><br><span class="line">onBeforeUnmount(()=&gt; &#123;</span><br><span class="line">  // 在onBeforeUnmount时还能读到DOM元素</span><br><span class="line">  console.log(&quot;onBeforeUnmount&quot;, div.value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 销毁后</span><br><span class="line">onUnmounted(()=&gt; &#123;</span><br><span class="line">  // 从onUnmounted开始组件已经被销毁了，自然读不到DOM元素了</span><br><span class="line">  console.log(&quot;onUnmounted&quot;, div.value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 收集依赖时</span><br><span class="line">onRenderTracked((e)=&gt; &#123;</span><br><span class="line">  // 用来调试代码，e其实就是一个effect对象</span><br><span class="line">  console.log(&quot;onRenderTracked&quot;, e)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 更新依赖时</span><br><span class="line">onRenderTriggered((e)=&gt; &#123;</span><br><span class="line">  // 用来调试代码，e其实就是一个effect对象</span><br><span class="line">  console.log(&quot;onRenderTriggered&quot;, e)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>在Vue源码（<code>/package/runtime-core/src/apiLifecycle.ts</code>）中可以看到watch的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在这个函数里创建钩子并作缓存</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">injectHook</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="keyword">type</span>: LifecycleHooks,</span></span><br><span class="line"><span class="params">  hook: <span class="built_in">Function</span> &amp; &#123; __weh?: <span class="built_in">Function</span> &#125;,</span></span><br><span class="line"><span class="params">  target: ComponentInternalInstance | <span class="literal">null</span> = currentInstance,</span></span><br><span class="line"><span class="params">  prepend: <span class="built_in">boolean</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Function</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (target) &#123;</span><br><span class="line">    <span class="comment">// 如果有钩子函数直接返回，否则创建一个空数组（Function类型数组）</span></span><br><span class="line">    <span class="keyword">const</span> hooks = target[<span class="keyword">type</span>] || (target[<span class="keyword">type</span>] = [])</span><br><span class="line">    <span class="comment">// cache the error handling wrapper for injected hooks so the same hook</span></span><br><span class="line">    <span class="comment">// can be properly deduped by the scheduler. &quot;__weh&quot; stands for &quot;with error</span></span><br><span class="line">    <span class="comment">// handling&quot;.</span></span><br><span class="line">    <span class="keyword">const</span> wrappedHook =</span><br><span class="line">      hook.<span class="property">__weh</span> ||</span><br><span class="line">      (hook.<span class="property">__weh</span> = <span class="function">(<span class="params">...args: <span class="built_in">unknown</span>[]</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 如果组件卸载了，什么都不做</span></span><br><span class="line">        <span class="keyword">if</span> (target.<span class="property">isUnmounted</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// disable tracking inside all lifecycle hooks</span></span><br><span class="line">        <span class="comment">// since they can potentially be called inside effects.</span></span><br><span class="line">        <span class="comment">// 停止依赖收集，避免重复收集依赖（在组件初始化时就收集过依赖了）</span></span><br><span class="line">        <span class="title function_">pauseTracking</span>()</span><br><span class="line">        <span class="comment">// Set currentInstance during hook invocation.</span></span><br><span class="line">        <span class="comment">// This assumes the hook does not synchronously trigger other hooks, which</span></span><br><span class="line">        <span class="comment">// can only be false when the user does something really funky.</span></span><br><span class="line">        <span class="comment">// 设target为当前组件实例</span></span><br><span class="line">        <span class="title function_">setCurrentInstance</span>(target)</span><br><span class="line">        <span class="comment">// 执行钩子函数</span></span><br><span class="line">        <span class="keyword">const</span> res = <span class="title function_">callWithAsyncErrorHandling</span>(hook, target, <span class="keyword">type</span>, args)</span><br><span class="line">        <span class="comment">// 清空当前组件实例</span></span><br><span class="line">        <span class="title function_">unsetCurrentInstance</span>()</span><br><span class="line">        <span class="comment">// 恢复依赖收集</span></span><br><span class="line">        <span class="title function_">resetTracking</span>()</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">      &#125;)</span><br><span class="line">    <span class="keyword">if</span> (prepend) &#123;</span><br><span class="line">      hooks.<span class="title function_">unshift</span>(wrappedHook)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 添加hook</span></span><br><span class="line">      hooks.<span class="title function_">push</span>(wrappedHook)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> wrappedHook</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="keyword">const</span> apiName = <span class="title function_">toHandlerKey</span>(<span class="title class_">ErrorTypeStrings</span>[<span class="keyword">type</span>].<span class="title function_">replace</span>(<span class="regexp">/ hook$/</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">    <span class="title function_">warn</span>(</span><br><span class="line">      <span class="string">`<span class="subst">$&#123;apiName&#125;</span> is called when there is no active component instance to be `</span> +</span><br><span class="line">        <span class="string">`associated with. `</span> +</span><br><span class="line">        <span class="string">`Lifecycle injection APIs can only be used during execution of setup().`</span> +</span><br><span class="line">        (__FEATURE_SUSPENSE__</span><br><span class="line">          ? <span class="string">` If you are using async setup(), make sure to register lifecycle `</span> +</span><br><span class="line">            <span class="string">`hooks before the first await statement.`</span></span><br><span class="line">          : <span class="string">``</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册生命周期，使用函数柯里化封装，因为此处只是第一个参数不同，其他的都相同</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createHook =</span><br><span class="line">  &lt;T <span class="keyword">extends</span> <span class="title class_">Function</span> = <span class="function">() =&gt;</span> <span class="built_in">any</span>&gt;<span class="function">(<span class="params">lifecycle: LifecycleHooks</span>) =&gt;</span></span><br><span class="line">  <span class="function">(<span class="params">hook: T, target: ComponentInternalInstance | <span class="literal">null</span> = currentInstance</span>) =&gt;</span></span><br><span class="line">    <span class="comment">// post-create lifecycle registrations are noops during SSR (except for serverPrefetch)</span></span><br><span class="line">    (!isInSSRComponentSetup || lifecycle === <span class="title class_">LifecycleHooks</span>.<span class="property">SERVER_PREFETCH</span>) &amp;&amp;</span><br><span class="line">    <span class="title function_">injectHook</span>(lifecycle, <span class="function">(<span class="params">...args: <span class="built_in">unknown</span>[]</span>) =&gt;</span> <span class="title function_">hook</span>(...args), target)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出一些钩子函数，它们都调用了createHook函数，并传入一个参数（枚举）</span></span><br><span class="line"><span class="comment">// 因为生命周期钩子函数是在组件生命周期的各个阶段去执行的，所以把这些钩子放到组件实例上</span></span><br><span class="line"><span class="comment">// export const enum LifecycleHooks &#123;</span></span><br><span class="line"><span class="comment">//   BEFORE_CREATE = &#x27;bc&#x27;,</span></span><br><span class="line"><span class="comment">//   CREATED = &#x27;c&#x27;,</span></span><br><span class="line"><span class="comment">//   BEFORE_MOUNT = &#x27;bm&#x27;,</span></span><br><span class="line"><span class="comment">//   MOUNTED = &#x27;m&#x27;,</span></span><br><span class="line"><span class="comment">//   BEFORE_UPDATE = &#x27;bu&#x27;,</span></span><br><span class="line"><span class="comment">//   UPDATED = &#x27;u&#x27;,</span></span><br><span class="line"><span class="comment">//   BEFORE_UNMOUNT = &#x27;bum&#x27;,</span></span><br><span class="line"><span class="comment">//   UNMOUNTED = &#x27;um&#x27;,</span></span><br><span class="line"><span class="comment">//   DEACTIVATED = &#x27;da&#x27;,</span></span><br><span class="line"><span class="comment">//   ACTIVATED = &#x27;a&#x27;,</span></span><br><span class="line"><span class="comment">//   RENDER_TRIGGERED = &#x27;rtg&#x27;,</span></span><br><span class="line"><span class="comment">//   RENDER_TRACKED = &#x27;rtc&#x27;,</span></span><br><span class="line"><span class="comment">//   ERROR_CAPTURED = &#x27;ec&#x27;,</span></span><br><span class="line"><span class="comment">//   SERVER_PREFETCH = &#x27;sp&#x27;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onBeforeMount = <span class="title function_">createHook</span>(<span class="title class_">LifecycleHooks</span>.<span class="property">BEFORE_MOUNT</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onMounted = <span class="title function_">createHook</span>(<span class="title class_">LifecycleHooks</span>.<span class="property">MOUNTED</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onBeforeUpdate = <span class="title function_">createHook</span>(<span class="title class_">LifecycleHooks</span>.<span class="property">BEFORE_UPDATE</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onUpdated = <span class="title function_">createHook</span>(<span class="title class_">LifecycleHooks</span>.<span class="property">UPDATED</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onBeforeUnmount = <span class="title function_">createHook</span>(<span class="title class_">LifecycleHooks</span>.<span class="property">BEFORE_UNMOUNT</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onUnmounted = <span class="title function_">createHook</span>(<span class="title class_">LifecycleHooks</span>.<span class="property">UNMOUNTED</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> onServerPrefetch = <span class="title function_">createHook</span>(<span class="title class_">LifecycleHooks</span>.<span class="property">SERVER_PREFETCH</span>)</span><br></pre></td></tr></table></figure>

<p>钩子被注册后，在<code>/package/runtime-core/src/render.ts</code>的一些生命周期对应阶段会调用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 挂载和更新</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">setupRenderEffect</span>: <span class="title class_">SetupRenderEffectFn</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    instance,</span></span></span><br><span class="line"><span class="params"><span class="function">    initialVNode,</span></span></span><br><span class="line"><span class="params"><span class="function">    container,</span></span></span><br><span class="line"><span class="params"><span class="function">    anchor,</span></span></span><br><span class="line"><span class="params"><span class="function">    parentSuspense,</span></span></span><br><span class="line"><span class="params"><span class="function">    isSVG,</span></span></span><br><span class="line"><span class="params"><span class="function">    optimized</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">componentUpdateFn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 如果当前组件没有挂载</span></span><br><span class="line">      <span class="keyword">if</span> (!instance.<span class="property">isMounted</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">vnodeHook</span>: <span class="title class_">VNodeHook</span> | <span class="literal">null</span> | <span class="literal">undefined</span></span><br><span class="line">        <span class="keyword">const</span> &#123; el, props &#125; = initialVNode</span><br><span class="line">        <span class="keyword">const</span> &#123; bm, m, parent &#125; = instance</span><br><span class="line">        <span class="keyword">const</span> isAsyncWrapperVNode = <span class="title function_">isAsyncWrapper</span>(initialVNode)</span><br><span class="line"></span><br><span class="line">        <span class="title function_">toggleRecurse</span>(instance, <span class="literal">false</span>)</span><br><span class="line">        <span class="comment">// beforeMount hook</span></span><br><span class="line">        <span class="comment">// 执行beforeMount钩子</span></span><br><span class="line">        <span class="keyword">if</span> (bm) &#123;</span><br><span class="line">          <span class="title function_">invokeArrayFns</span>(bm)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// onVnodeBeforeMount</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          !isAsyncWrapperVNode &amp;&amp;</span><br><span class="line">          (vnodeHook = props &amp;&amp; props.<span class="property">onVnodeBeforeMount</span>)</span><br><span class="line">        ) &#123;</span><br><span class="line">          <span class="title function_">invokeVNodeHook</span>(vnodeHook, parent, initialVNode)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          __COMPAT__ &amp;&amp;</span><br><span class="line">          <span class="title function_">isCompatEnabled</span>(<span class="title class_">DeprecationTypes</span>.<span class="property">INSTANCE_EVENT_HOOKS</span>, instance)</span><br><span class="line">        ) &#123;</span><br><span class="line">          instance.<span class="title function_">emit</span>(<span class="string">&#x27;hook:beforeMount&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">toggleRecurse</span>(instance, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行完beforeMount钩子后进行渲染</span></span><br><span class="line">        <span class="keyword">if</span> (el &amp;&amp; hydrateNode) &#123;</span><br><span class="line">          <span class="comment">// vnode has adopted host node - perform hydration instead of mount.</span></span><br><span class="line">          <span class="keyword">const</span> <span class="title function_">hydrateSubTree</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">              <span class="title function_">startMeasure</span>(instance, <span class="string">`render`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            instance.<span class="property">subTree</span> = <span class="title function_">renderComponentRoot</span>(instance)</span><br><span class="line">            <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">              <span class="title function_">endMeasure</span>(instance, <span class="string">`render`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">              <span class="title function_">startMeasure</span>(instance, <span class="string">`hydrate`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            hydrateNode!(</span><br><span class="line">              el <span class="keyword">as</span> <span class="title class_">Node</span>,</span><br><span class="line">              instance.<span class="property">subTree</span>,</span><br><span class="line">              instance,</span><br><span class="line">              parentSuspense,</span><br><span class="line">              <span class="literal">null</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">              <span class="title function_">endMeasure</span>(instance, <span class="string">`hydrate`</span>)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (isAsyncWrapperVNode) &#123;</span><br><span class="line">            ;(initialVNode.<span class="property">type</span> <span class="keyword">as</span> <span class="title class_">ComponentOptions</span>).<span class="property">__asyncLoader</span>!().<span class="title function_">then</span>(</span><br><span class="line">              <span class="comment">// note: we are moving the render call into an async callback,</span></span><br><span class="line">              <span class="comment">// which means it won&#x27;t track dependencies - but it&#x27;s ok because</span></span><br><span class="line">              <span class="comment">// a server-rendered async wrapper is already in resolved state</span></span><br><span class="line">              <span class="comment">// and it will never need to change.</span></span><br><span class="line">              <span class="function">() =&gt;</span> !instance.<span class="property">isUnmounted</span> &amp;&amp; <span class="title function_">hydrateSubTree</span>()</span><br><span class="line">            )</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">hydrateSubTree</span>()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">            <span class="title function_">startMeasure</span>(instance, <span class="string">`render`</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">const</span> subTree = (instance.<span class="property">subTree</span> = <span class="title function_">renderComponentRoot</span>(instance))</span><br><span class="line">          <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">            <span class="title function_">endMeasure</span>(instance, <span class="string">`render`</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">            <span class="title function_">startMeasure</span>(instance, <span class="string">`patch`</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 挂载Vnode到容器中</span></span><br><span class="line">          <span class="title function_">patch</span>(</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            subTree,</span><br><span class="line">            container,</span><br><span class="line">            anchor,</span><br><span class="line">            instance,</span><br><span class="line">            parentSuspense,</span><br><span class="line">            isSVG</span><br><span class="line">          )</span><br><span class="line">          <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">            <span class="title function_">endMeasure</span>(instance, <span class="string">`patch`</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// el是DOM元素，此时已经可以读到它了</span></span><br><span class="line">          initialVNode.<span class="property">el</span> = subTree.<span class="property">el</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// mounted hook</span></span><br><span class="line">        <span class="comment">// 执行mounted钩子</span></span><br><span class="line">        <span class="keyword">if</span> (m) &#123;</span><br><span class="line">          <span class="title function_">queuePostRenderEffect</span>(m, parentSuspense)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// onVnodeMounted</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          !isAsyncWrapperVNode &amp;&amp;</span><br><span class="line">          (vnodeHook = props &amp;&amp; props.<span class="property">onVnodeMounted</span>)</span><br><span class="line">        ) &#123;</span><br><span class="line">          <span class="keyword">const</span> scopedInitialVNode = initialVNode</span><br><span class="line">          <span class="title function_">queuePostRenderEffect</span>(</span><br><span class="line">            <span class="function">() =&gt;</span> <span class="title function_">invokeVNodeHook</span>(vnodeHook!, parent, scopedInitialVNode),</span><br><span class="line">            parentSuspense</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          __COMPAT__ &amp;&amp;</span><br><span class="line">          <span class="title function_">isCompatEnabled</span>(<span class="title class_">DeprecationTypes</span>.<span class="property">INSTANCE_EVENT_HOOKS</span>, instance)</span><br><span class="line">        ) &#123;</span><br><span class="line">          <span class="title function_">queuePostRenderEffect</span>(</span><br><span class="line">            <span class="function">() =&gt;</span> instance.<span class="title function_">emit</span>(<span class="string">&#x27;hook:mounted&#x27;</span>),</span><br><span class="line">            parentSuspense</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// activated hook for keep-alive roots.</span></span><br><span class="line">        <span class="comment">// #1742 activated hook must be accessed after first render</span></span><br><span class="line">        <span class="comment">// since the hook may be injected by a child keep-alive</span></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          initialVNode.<span class="property">shapeFlag</span> &amp; <span class="title class_">ShapeFlags</span>.<span class="property">COMPONENT_SHOULD_KEEP_ALIVE</span> ||</span><br><span class="line">          (parent &amp;&amp;</span><br><span class="line">            <span class="title function_">isAsyncWrapper</span>(parent.<span class="property">vnode</span>) &amp;&amp;</span><br><span class="line">            parent.<span class="property">vnode</span>.<span class="property">shapeFlag</span> &amp; <span class="title class_">ShapeFlags</span>.<span class="property">COMPONENT_SHOULD_KEEP_ALIVE</span>)</span><br><span class="line">        ) &#123;</span><br><span class="line">          instance.<span class="property">a</span> &amp;&amp; <span class="title function_">queuePostRenderEffect</span>(instance.<span class="property">a</span>, parentSuspense)</span><br><span class="line">          <span class="keyword">if</span> (</span><br><span class="line">            __COMPAT__ &amp;&amp;</span><br><span class="line">            <span class="title function_">isCompatEnabled</span>(<span class="title class_">DeprecationTypes</span>.<span class="property">INSTANCE_EVENT_HOOKS</span>, instance)</span><br><span class="line">          ) &#123;</span><br><span class="line">            <span class="title function_">queuePostRenderEffect</span>(</span><br><span class="line">              <span class="function">() =&gt;</span> instance.<span class="title function_">emit</span>(<span class="string">&#x27;hook:activated&#x27;</span>),</span><br><span class="line">              parentSuspense</span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        instance.<span class="property">isMounted</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (__DEV__ || __FEATURE_PROD_DEVTOOLS__) &#123;</span><br><span class="line">          <span class="title function_">devtoolsComponentAdded</span>(instance)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// #2458: deference mount-only object parameters to prevent memleaks</span></span><br><span class="line">        initialVNode = container = anchor = <span class="literal">null</span> <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// updateComponent</span></span><br><span class="line">        <span class="comment">// This is triggered by mutation of component&#x27;s own state (next: null)</span></span><br><span class="line">        <span class="comment">// OR parent calling processComponent (next: VNode)</span></span><br><span class="line">        <span class="keyword">let</span> &#123; next, bu, u, parent, vnode &#125; = instance</span><br><span class="line">        <span class="keyword">let</span> originNext = next</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">vnodeHook</span>: <span class="title class_">VNodeHook</span> | <span class="literal">null</span> | <span class="literal">undefined</span></span><br><span class="line">        <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">          <span class="title function_">pushWarningContext</span>(next || instance.<span class="property">vnode</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Disallow component effect recursion during pre-lifecycle hooks.</span></span><br><span class="line">        <span class="title function_">toggleRecurse</span>(instance, <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">if</span> (next) &#123;</span><br><span class="line">          next.<span class="property">el</span> = vnode.<span class="property">el</span></span><br><span class="line">          <span class="title function_">updateComponentPreRender</span>(instance, next, optimized)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          next = vnode</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// beforeUpdate hook</span></span><br><span class="line">        <span class="comment">// 执行beforeUpdate钩子</span></span><br><span class="line">        <span class="keyword">if</span> (bu) &#123;</span><br><span class="line">          <span class="title function_">invokeArrayFns</span>(bu)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// onVnodeBeforeUpdate</span></span><br><span class="line">        <span class="keyword">if</span> ((vnodeHook = next.<span class="property">props</span> &amp;&amp; next.<span class="property">props</span>.<span class="property">onVnodeBeforeUpdate</span>)) &#123;</span><br><span class="line">          <span class="title function_">invokeVNodeHook</span>(vnodeHook, parent, next, vnode)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          __COMPAT__ &amp;&amp;</span><br><span class="line">          <span class="title function_">isCompatEnabled</span>(<span class="title class_">DeprecationTypes</span>.<span class="property">INSTANCE_EVENT_HOOKS</span>, instance)</span><br><span class="line">        ) &#123;</span><br><span class="line">          instance.<span class="title function_">emit</span>(<span class="string">&#x27;hook:beforeUpdate&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">toggleRecurse</span>(instance, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// render</span></span><br><span class="line">        <span class="comment">// 执行beforeUpdate钩子后也要进行渲染</span></span><br><span class="line">        <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">          <span class="title function_">startMeasure</span>(instance, <span class="string">`render`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> nextTree = <span class="title function_">renderComponentRoot</span>(instance)</span><br><span class="line">        <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">          <span class="title function_">endMeasure</span>(instance, <span class="string">`render`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> prevTree = instance.<span class="property">subTree</span></span><br><span class="line">        instance.<span class="property">subTree</span> = nextTree</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">          <span class="title function_">startMeasure</span>(instance, <span class="string">`patch`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">patch</span>(</span><br><span class="line">          prevTree,</span><br><span class="line">          nextTree,</span><br><span class="line">          <span class="comment">// parent may have changed if it&#x27;s in a teleport</span></span><br><span class="line">          <span class="title function_">hostParentNode</span>(prevTree.<span class="property">el</span>!)!,</span><br><span class="line">          <span class="comment">// anchor may have changed if it&#x27;s in a fragment</span></span><br><span class="line">          <span class="title function_">getNextHostNode</span>(prevTree),</span><br><span class="line">          instance,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">          <span class="title function_">endMeasure</span>(instance, <span class="string">`patch`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        next.<span class="property">el</span> = nextTree.<span class="property">el</span></span><br><span class="line">        <span class="keyword">if</span> (originNext === <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">// self-triggered update. In case of HOC, update parent component</span></span><br><span class="line">          <span class="comment">// vnode el. HOC is indicated by parent instance&#x27;s subTree pointing</span></span><br><span class="line">          <span class="comment">// to child component&#x27;s vnode</span></span><br><span class="line">          <span class="title function_">updateHOCHostEl</span>(instance, nextTree.<span class="property">el</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// updated hook</span></span><br><span class="line">        <span class="comment">// 执行updated钩子</span></span><br><span class="line">        <span class="keyword">if</span> (u) &#123;</span><br><span class="line">          <span class="title function_">queuePostRenderEffect</span>(u, parentSuspense)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// onVnodeUpdated</span></span><br><span class="line">        <span class="comment">// 组件更新后执行，此时DOM已经更新</span></span><br><span class="line">        <span class="keyword">if</span> ((vnodeHook = next.<span class="property">props</span> &amp;&amp; next.<span class="property">props</span>.<span class="property">onVnodeUpdated</span>)) &#123;</span><br><span class="line">          <span class="title function_">queuePostRenderEffect</span>(</span><br><span class="line">            <span class="function">() =&gt;</span> <span class="title function_">invokeVNodeHook</span>(vnodeHook!, parent, next!, vnode),</span><br><span class="line">            parentSuspense</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          __COMPAT__ &amp;&amp;</span><br><span class="line">          <span class="title function_">isCompatEnabled</span>(<span class="title class_">DeprecationTypes</span>.<span class="property">INSTANCE_EVENT_HOOKS</span>, instance)</span><br><span class="line">        ) &#123;</span><br><span class="line">          <span class="title function_">queuePostRenderEffect</span>(</span><br><span class="line">            <span class="function">() =&gt;</span> instance.<span class="title function_">emit</span>(<span class="string">&#x27;hook:updated&#x27;</span>),</span><br><span class="line">            parentSuspense</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (__DEV__ || __FEATURE_PROD_DEVTOOLS__) &#123;</span><br><span class="line">          <span class="title function_">devtoolsComponentUpdated</span>(instance)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">          <span class="title function_">popWarningContext</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create reactive effect for rendering</span></span><br><span class="line">    <span class="keyword">const</span> effect = (instance.<span class="property">effect</span> = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(</span><br><span class="line">      componentUpdateFn,</span><br><span class="line">      <span class="function">() =&gt;</span> <span class="title function_">queueJob</span>(update),</span><br><span class="line">      instance.<span class="property">scope</span> <span class="comment">// track it in component&#x27;s effect scope</span></span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">update</span>: <span class="title class_">SchedulerJob</span> = (instance.<span class="property">update</span> = <span class="function">() =&gt;</span> effect.<span class="title function_">run</span>())</span><br><span class="line">    update.<span class="property">id</span> = instance.<span class="property">uid</span></span><br><span class="line">    <span class="comment">// allowRecurse</span></span><br><span class="line">    <span class="comment">// #1801, #2043 component render effects should allow recursive updates</span></span><br><span class="line">    <span class="title function_">toggleRecurse</span>(instance, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      effect.<span class="property">onTrack</span> = instance.<span class="property">rtc</span></span><br><span class="line">        ? <span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">invokeArrayFns</span>(instance.<span class="property">rtc</span>!, e)</span><br><span class="line">        : <span class="built_in">void</span> <span class="number">0</span></span><br><span class="line">      effect.<span class="property">onTrigger</span> = instance.<span class="property">rtg</span></span><br><span class="line">        ? <span class="function"><span class="params">e</span> =&gt;</span> <span class="title function_">invokeArrayFns</span>(instance.<span class="property">rtg</span>!, e)</span><br><span class="line">        : <span class="built_in">void</span> <span class="number">0</span></span><br><span class="line">      update.<span class="property">ownerInstance</span> = instance</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">update</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">unmount</span>: <span class="title class_">UnmountFn</span> = <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    vnode,</span></span></span><br><span class="line"><span class="params"><span class="function">    parentComponent,</span></span></span><br><span class="line"><span class="params"><span class="function">    parentSuspense,</span></span></span><br><span class="line"><span class="params"><span class="function">    doRemove = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    optimized = <span class="literal">false</span></span></span></span><br><span class="line"><span class="params"><span class="function">  </span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      <span class="keyword">type</span>,</span><br><span class="line">      props,</span><br><span class="line">      ref,</span><br><span class="line">      children,</span><br><span class="line">      dynamicChildren,</span><br><span class="line">      shapeFlag,</span><br><span class="line">      patchFlag,</span><br><span class="line">      dirs</span><br><span class="line">    &#125; = vnode</span><br><span class="line">    <span class="comment">// unset ref</span></span><br><span class="line">    <span class="keyword">if</span> (ref != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="title function_">setRef</span>(ref, <span class="literal">null</span>, parentSuspense, vnode, <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">COMPONENT_SHOULD_KEEP_ALIVE</span>) &#123;</span><br><span class="line">      ;(parentComponent!.<span class="property">ctx</span> <span class="keyword">as</span> <span class="title class_">KeepAliveContext</span>).<span class="title function_">deactivate</span>(vnode)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> shouldInvokeDirs = shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ELEMENT</span> &amp;&amp; dirs</span><br><span class="line">    <span class="keyword">const</span> shouldInvokeVnodeHook = !<span class="title function_">isAsyncWrapper</span>(vnode)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">vnodeHook</span>: <span class="title class_">VNodeHook</span> | <span class="literal">undefined</span> | <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      shouldInvokeVnodeHook &amp;&amp;</span><br><span class="line">      (vnodeHook = props &amp;&amp; props.<span class="property">onVnodeBeforeUnmount</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="title function_">invokeVNodeHook</span>(vnodeHook, parentComponent, vnode)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">COMPONENT</span>) &#123;</span><br><span class="line">      <span class="comment">// 清除组件引用的effect副作用函数</span></span><br><span class="line">      <span class="title function_">unmountComponent</span>(vnode.<span class="property">component</span>!, parentSuspense, doRemove)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (__FEATURE_SUSPENSE__ &amp;&amp; shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">SUSPENSE</span>) &#123;</span><br><span class="line">        vnode.<span class="property">suspense</span>!.<span class="title function_">unmount</span>(parentSuspense, doRemove)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 执行beforeUnmount钩子</span></span><br><span class="line">      <span class="keyword">if</span> (shouldInvokeDirs) &#123;</span><br><span class="line">        <span class="title function_">invokeDirectiveHook</span>(vnode, <span class="literal">null</span>, parentComponent, <span class="string">&#x27;beforeUnmount&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TELEPORT</span>) &#123;</span><br><span class="line">        ;(vnode.<span class="property">type</span> <span class="keyword">as</span> <span class="keyword">typeof</span> <span class="title class_">TeleportImpl</span>).<span class="title function_">remove</span>(</span><br><span class="line">          vnode,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          optimized,</span><br><span class="line">          internals,</span><br><span class="line">          doRemove</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">        dynamicChildren &amp;&amp;</span><br><span class="line">        <span class="comment">// #1153: fast path should not be taken for non-stable (v-for) fragments</span></span><br><span class="line">        (<span class="keyword">type</span> !== <span class="title class_">Fragment</span> ||</span><br><span class="line">          (patchFlag &gt; <span class="number">0</span> &amp;&amp; patchFlag &amp; <span class="title class_">PatchFlags</span>.<span class="property">STABLE_FRAGMENT</span>))</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">// fast path for block nodes: only need to unmount dynamic children.</span></span><br><span class="line">        <span class="comment">// 组件卸载完成后，清空当前组件下所有的子节点</span></span><br><span class="line">        <span class="title function_">unmountChildren</span>(</span><br><span class="line">          dynamicChildren,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          <span class="literal">false</span>,</span><br><span class="line">          <span class="literal">true</span></span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">        (<span class="keyword">type</span> === <span class="title class_">Fragment</span> &amp;&amp;</span><br><span class="line">          patchFlag &amp;</span><br><span class="line">            (<span class="title class_">PatchFlags</span>.<span class="property">KEYED_FRAGMENT</span> | <span class="title class_">PatchFlags</span>.<span class="property">UNKEYED_FRAGMENT</span>)) ||</span><br><span class="line">        (!optimized &amp;&amp; shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span>)</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="title function_">unmountChildren</span>(children <span class="keyword">as</span> <span class="title class_">VNode</span>[], parentComponent, parentSuspense)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (doRemove) &#123;</span><br><span class="line">        <span class="title function_">remove</span>(vnode)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 卸载完成，执行unmounted钩子</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      (shouldInvokeVnodeHook &amp;&amp;</span><br><span class="line">        (vnodeHook = props &amp;&amp; props.<span class="property">onVnodeUnmounted</span>)) ||</span><br><span class="line">      shouldInvokeDirs</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="title function_">queuePostRenderEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        vnodeHook &amp;&amp; <span class="title function_">invokeVNodeHook</span>(vnodeHook, parentComponent, vnode)</span><br><span class="line">        shouldInvokeDirs &amp;&amp;</span><br><span class="line">          <span class="title function_">invokeDirectiveHook</span>(vnode, <span class="literal">null</span>, parentComponent, <span class="string">&#x27;unmounted&#x27;</span>)</span><br><span class="line">      &#125;, parentSuspense)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>BEM架构&amp;Layout布局</title>
    <url>/web/study/vue/13.BEM%E6%9E%B6%E6%9E%84&amp;Layout%E5%B8%83%E5%B1%80.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="BEM架构"><a href="#BEM架构" class="headerlink" title="BEM架构"></a>BEM架构</h1><p>BEM架构是OOCSS架构（面向对象CSS）的一种实现。</p>
<p>BEM是block（块层）、element（元素层）、modifier（修饰符层）的缩写。</p>
<p>Element+用的就是这种架构。</p>
<p>BEM的命名规范：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 块，一个元素区域 */</span></span><br><span class="line"><span class="selector-class">.block</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素，块内的某元素 */</span> </span><br><span class="line"><span class="selector-class">.block__element</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修饰符，一些同类元素的区分 */</span> </span><br><span class="line"><span class="selector-class">.block--modifier</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="编写bem架构"><a href="#编写bem架构" class="headerlink" title="编写bem架构"></a>编写bem架构</h1><p>全局bem.scss：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// !default：变量如果没有赋过别的值，就使用&quot;cheriko&quot;这个默认值</span></span><br><span class="line"><span class="variable">$namespace</span>: <span class="string">&quot;cheriko&quot;</span> !default;</span><br><span class="line"><span class="variable">$block-sel</span>: <span class="string">&quot;-&quot;</span> !default;</span><br><span class="line"><span class="variable">$elem-sel</span>: <span class="string">&quot;__&quot;</span> !default;</span><br><span class="line"><span class="variable">$mod-sel</span>: <span class="string">&quot;--&quot;</span> !default;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> b(<span class="variable">$block</span>) &#123;</span><br><span class="line">  <span class="comment">// 拼装类名</span></span><br><span class="line">  <span class="variable">$B</span>: #&#123;<span class="variable">$namespace</span> + <span class="variable">$block-sel</span> + <span class="variable">$block</span>&#125;;</span><br><span class="line">  .#&#123;<span class="variable">$B</span>&#125; &#123;</span><br><span class="line">    <span class="comment">// 会被替换成真正的样式</span></span><br><span class="line">    <span class="keyword">@content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> e(<span class="variable">$el</span>) &#123;</span><br><span class="line">  <span class="comment">// 读取父级类名</span></span><br><span class="line">  <span class="variable">$selector</span>: &amp;;</span><br><span class="line">  <span class="comment">// 跳出嵌套</span></span><br><span class="line">  <span class="keyword">@at-root</span> &#123;</span><br><span class="line">    <span class="comment">// 拼装类名</span></span><br><span class="line">    #&#123;<span class="variable">$selector</span> + <span class="variable">$elem-sel</span> + <span class="variable">$el</span>&#125; &#123;</span><br><span class="line">      <span class="keyword">@content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@mixin</span> m(<span class="variable">$m</span>) &#123;</span><br><span class="line">  <span class="comment">// 读取父级类名</span></span><br><span class="line">  <span class="variable">$selector</span>: &amp;;</span><br><span class="line">  <span class="comment">// 跳出嵌套</span></span><br><span class="line">  <span class="keyword">@at-root</span> &#123;</span><br><span class="line">    <span class="comment">// 拼装类名</span></span><br><span class="line">    #&#123;<span class="variable">$selector</span> + <span class="variable">$mod-sel</span> + <span class="variable">$m</span>&#125; &#123;</span><br><span class="line">      <span class="keyword">@content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在vite.config.ts中加入配置：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">      <span class="attr">scss</span>: &#123;</span><br><span class="line">        <span class="attr">additionalData</span>: <span class="string">`@import &quot;@/bem.scss&quot;;`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>在App.vue中测试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 class=&quot;cheriko-test&quot;&gt;</span><br><span class="line">      1145141919810</span><br><span class="line">      &lt;div class=&quot;cheriko-test__inner&quot;&gt;el&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;cheriko-test--success&quot;&gt;test&lt;/div&gt;</span><br><span class="line">    &lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">@include b(test) &#123;</span><br><span class="line">  color: red;</span><br><span class="line">  @include e(inner) &#123;</span><br><span class="line">    color: blue;</span><br><span class="line">  &#125;</span><br><span class="line">  @include m(success) &#123;</span><br><span class="line">    color: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Layout布局"><a href="#Layout布局" class="headerlink" title="Layout布局"></a>Layout布局</h1><p>用BEM架构简单实现Element+的Layout布局。</p>
<p>创建scss全局混入（BEM实现代码见上）：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> bfc &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>App.vue中引入布局：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;Layout&gt;&lt;/Layout&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import Layout from &quot;./Layout/index.vue&quot;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">// scoped：给样式制定一个作用域，让它只在该文件里生效</span><br><span class="line">// App.vue中一般不加scoped</span><br><span class="line"></span><br><span class="line">#app &#123;</span><br><span class="line">  @include bfc;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>该布局的文件路径：</p>
<p><img src="https://image.cheriko.fun/post/202305182112063.png"></p>
<p>index.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;cheriko-box&quot;&gt;</span><br><span class="line">    &lt;div&gt;&lt;Menu&gt;&lt;/Menu&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;cheriko-box__right&quot;&gt;</span><br><span class="line">      &lt;Header&gt;&lt;/Header&gt;</span><br><span class="line">      &lt;Content&gt;&lt;/Content&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import Menu from &quot;./Menu/index.vue&quot;</span><br><span class="line">import Header from &quot;./Header/index.vue&quot;</span><br><span class="line">import Content from &quot;./Content/index.vue&quot;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">@include b(box) &#123;</span><br><span class="line">  @include bfc;</span><br><span class="line">  display: flex;</span><br><span class="line">  @include e(right) &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>Content：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;cheriko-content&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;cheriko-content__items&quot; v-for=&quot;item in 100&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">@include b(content) &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">  overflow: auto;</span><br><span class="line">  @include e(items) &#123;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    margin: 10px;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    border-radius: 4px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>Header：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;cheriko-header&quot;&gt;</span><br><span class="line">    Header</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">@include b(header) &#123;</span><br><span class="line">  height: 50px;</span><br><span class="line">  border-bottom: 1px solid #ccc;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>Menu：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;cheriko-menu&quot;&gt;</span><br><span class="line">    Menu</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">@include b(menu) &#123;</span><br><span class="line">  height: 100%;</span><br><span class="line">  min-width: 200px;</span><br><span class="line">  border-right: 1px solid #ccc;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>computed计算属性</title>
    <url>/web/study/vue/10.computed%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="computed用法"><a href="#computed用法" class="headerlink" title="computed用法"></a>computed用法</h1><p>当依赖的属性的值发生变化时，会触发它自身的更改。</p>
<p>依赖的值不发生变化时，使用的是缓存中的属性值。</p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      姓：&lt;input v-model=&quot;firstName&quot; type=&quot;text&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      名：&lt;input v-model=&quot;lastName&quot; type=&quot;text&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      全名：&#123;&#123; name &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button @click=&quot;changeName&quot;&gt;changeName&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, computed &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">let firstName = ref(&quot;李&quot;)</span><br><span class="line">let lastName = ref(&quot;田所&quot;)</span><br><span class="line"></span><br><span class="line">const changeName = ()=&gt; &#123;</span><br><span class="line">  // 使用函数式写法的话，name.value就是只读的</span><br><span class="line">  name.value = &quot;田所-浩二&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 选项式写法，支持一个对象传入get函数和set函数自定义操作</span><br><span class="line">let name = computed&lt;string&gt;(&#123;</span><br><span class="line">  get() &#123;</span><br><span class="line">    return firstName.value + &quot;-&quot; + lastName.value</span><br><span class="line">  &#125;,</span><br><span class="line">  set(newVal: string) &#123;</span><br><span class="line">    // 解构赋值</span><br><span class="line">    [firstName.value, lastName.value] = newVal.split(&quot;-&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 函数式写法，只能支持一个getter函数，不允许修改值</span><br><span class="line">// let name = computed(()=&gt; &#123;</span><br><span class="line">//   return firstName.value + &quot;-&quot; + lastName.value</span><br><span class="line">// &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="模拟案例"><a href="#模拟案例" class="headerlink" title="模拟案例"></a>模拟案例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input v-model=&quot;keyWord&quot; placeholder=&quot;搜索&quot; type=&quot;text&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div style=&quot;margin-top: 20px;&quot;&gt;</span><br><span class="line">      &lt;table border width=&quot;600&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;名称&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;单价&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;数量&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;总价&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">          &lt;!-- &lt;tr v-for=&quot;(item, index) in data&quot; :key=&quot;index&quot;&gt; --&gt;</span><br><span class="line">          &lt;tr v-for=&quot;(item, index) in searchData&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &lt;td align=&quot;center&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td align=&quot;center&quot;&gt;&#123;&#123; item.price &#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td align=&quot;center&quot;&gt;</span><br><span class="line">              &lt;button @click=&quot;sub(item)&quot;&gt;-&lt;/button&gt;</span><br><span class="line">              &#123;&#123; item.num &#125;&#125;</span><br><span class="line">              &lt;button @click=&quot;add(item)&quot;&gt;+&lt;/button&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td align=&quot;center&quot;&gt;&#123;&#123; item.num*item.price &#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td align=&quot;center&quot;&gt;&lt;button @click=&quot;del(index)&quot;&gt;删除&lt;/button&gt;&lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">        &lt;tfoot&gt;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;td colspan=&quot;5&quot; align=&quot;right&quot;&gt;</span><br><span class="line">              &lt;!-- 总价：&#123;&#123; $total &#125;&#125; --&gt;</span><br><span class="line">              总价：&#123;&#123; total &#125;&#125;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line">        &lt;/tfoot&gt;</span><br><span class="line">      &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, computed, reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">interface Data &#123;</span><br><span class="line">  name: string,</span><br><span class="line">  price: number,</span><br><span class="line">  num: number,</span><br><span class="line">&#125;</span><br><span class="line">let keyWord = ref&lt;string&gt;(&quot;&quot;)</span><br><span class="line"></span><br><span class="line">let data = reactive&lt;Data[]&gt;([</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;KNN&quot;,</span><br><span class="line">    price: 114,</span><br><span class="line">    num: 1,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;SNNN&quot;,</span><br><span class="line">    price: 514,</span><br><span class="line">    num: 1,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;YJSP&quot;,</span><br><span class="line">    price: 1919,</span><br><span class="line">    num: 1,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;RU&quot;,</span><br><span class="line">    price: 810,</span><br><span class="line">    num: 1,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;BNKRG&quot;,</span><br><span class="line">    price: 364,</span><br><span class="line">    num: 1,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;YMN&quot;,</span><br><span class="line">    price: 364,</span><br><span class="line">    num: 1,</span><br><span class="line">  &#125;,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">// 使用函数方式计算总价</span><br><span class="line">// let $total = ref&lt;number&gt;(0)</span><br><span class="line">// const total = ()=&gt; &#123;</span><br><span class="line">//   $total.value = data.reduce((prev: number, next: Data)=&gt; &#123;</span><br><span class="line">//     return prev+next.num*next.price</span><br><span class="line">//   &#125;, 0)</span><br><span class="line">// &#125;</span><br><span class="line">// 程序开始时、物品数量增删改时，都要调用这个函数，很麻烦</span><br><span class="line">// total()</span><br><span class="line"></span><br><span class="line">// 使用computed就很省心了</span><br><span class="line">const total = computed(()=&gt; &#123;</span><br><span class="line">  return data.reduce((prev: number, next: Data)=&gt; &#123;</span><br><span class="line">    return prev+next.num*next.price</span><br><span class="line">  &#125;, 0)</span><br><span class="line">&#125;)</span><br><span class="line">// 还可与用来过滤数据</span><br><span class="line">const searchData = computed(()=&gt; &#123;</span><br><span class="line">  return data.filter((item:Data)=&gt; &#123;</span><br><span class="line">    return item.name.includes(keyWord.value)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const sub = (item: Data)=&gt; &#123;</span><br><span class="line">  // return item.num&gt;1?(item.num--,total()):null</span><br><span class="line">  return item.num&gt;1?item.num--:null</span><br><span class="line">&#125;</span><br><span class="line">const add = (item: Data)=&gt; &#123;</span><br><span class="line">  // return item.num&lt;99?(item.num++,total()):null</span><br><span class="line">  return item.num&lt;99?item.num++:null</span><br><span class="line">&#125;</span><br><span class="line">const del = (index: number)=&gt; &#123;</span><br><span class="line">  data.splice(index,1)</span><br><span class="line">  // total()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>在Vue源码（<code>/package/reactivity/src/computed.ts</code>）中可以看到computed的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数重载，支持多种传参</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> computed&lt;T&gt;(</span><br><span class="line">  <span class="attr">getter</span>: <span class="title class_">ComputedGetter</span>&lt;T&gt;,</span><br><span class="line">  debugOptions?: <span class="title class_">DebuggerOptions</span></span><br><span class="line">): <span class="title class_">ComputedRef</span>&lt;T&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> computed&lt;T&gt;(</span><br><span class="line">  <span class="attr">options</span>: <span class="title class_">WritableComputedOptions</span>&lt;T&gt;,</span><br><span class="line">  debugOptions?: <span class="title class_">DebuggerOptions</span></span><br><span class="line">): <span class="title class_">WritableComputedRef</span>&lt;T&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> computed&lt;T&gt;(</span><br><span class="line">  <span class="attr">getterOrOptions</span>: <span class="title class_">ComputedGetter</span>&lt;T&gt; | <span class="title class_">WritableComputedOptions</span>&lt;T&gt;,</span><br><span class="line">  debugOptions?: <span class="title class_">DebuggerOptions</span>,</span><br><span class="line">  isSSR = <span class="literal">false</span></span><br><span class="line">) &#123;</span><br><span class="line">  <span class="comment">// 格式化参数</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">getter</span>: <span class="title class_">ComputedGetter</span>&lt;T&gt;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">setter</span>: <span class="title class_">ComputedSetter</span>&lt;T&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果传来的是函数，那么这个computed是只读的</span></span><br><span class="line">  <span class="keyword">const</span> onlyGetter = <span class="title function_">isFunction</span>(getterOrOptions)</span><br><span class="line">  <span class="keyword">if</span> (onlyGetter) &#123;</span><br><span class="line">    <span class="comment">// 传入的函数赋给getter</span></span><br><span class="line">    getter = getterOrOptions</span><br><span class="line">    <span class="comment">// 不能设置值，否则报错</span></span><br><span class="line">    setter = __DEV__</span><br><span class="line">      ? <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;Write operation failed: computed value is readonly&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      : <span class="variable constant_">NOOP</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果是选项，就可以进行读取、设置值</span></span><br><span class="line">    getter = getterOrOptions.<span class="property">get</span></span><br><span class="line">    setter = getterOrOptions.<span class="property">set</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> cRef = <span class="keyword">new</span> <span class="title class_">ComputedRefImpl</span>(getter, setter, onlyGetter || !setter, isSSR)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__DEV__ &amp;&amp; debugOptions &amp;&amp; !isSSR) &#123;</span><br><span class="line">    cRef.<span class="property">effect</span>.<span class="property">onTrack</span> = debugOptions.<span class="property">onTrack</span></span><br><span class="line">    cRef.<span class="property">effect</span>.<span class="property">onTrigger</span> = debugOptions.<span class="property">onTrigger</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cRef <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ComputedRefImpl</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> dep?: <span class="title class_">Dep</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> _value!: T</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="attr">effect</span>: <span class="title class_">ReactiveEffect</span>&lt;T&gt;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isRef = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> [<span class="title class_">ReactiveFlags</span>.<span class="property">IS_READONLY</span>]: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否是需要重新计算的脏值</span></span><br><span class="line">  <span class="comment">// 如果依赖值没有发生变化，就会使用缓存中的值，这个特性就是用脏值检测实现的</span></span><br><span class="line">  <span class="keyword">public</span> _dirty = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">public</span> <span class="attr">_cacheable</span>: <span class="built_in">boolean</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    getter: ComputedGetter&lt;T&gt;,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> _setter: ComputedSetter&lt;T&gt;,</span></span><br><span class="line"><span class="params">    isReadonly: <span class="built_in">boolean</span>,</span></span><br><span class="line"><span class="params">    isSSR: <span class="built_in">boolean</span></span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 依赖不变这个不走</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">effect</span> = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(getter, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 调度函数scheduler</span></span><br><span class="line">      <span class="comment">// 只有依赖发生变化，并且脏值_dirty为false时，调度函数才会走</span></span><br><span class="line">      <span class="comment">// 初始化时的脏值_dirty是true，所以不会进来</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_dirty</span>) &#123;</span><br><span class="line">        <span class="comment">// 把脏值_dirty变成true，说明依赖变化了，需要调用getter函数获取新值</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_dirty</span> = <span class="literal">true</span></span><br><span class="line">        <span class="title function_">triggerRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">effect</span>.<span class="property">computed</span> = <span class="variable language_">this</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">effect</span>.<span class="property">active</span> = <span class="variable language_">this</span>.<span class="property">_cacheable</span> = !isSSR</span><br><span class="line">    <span class="variable language_">this</span>[<span class="title class_">ReactiveFlags</span>.<span class="property">IS_READONLY</span>] = isReadonly</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// computed(()=&gt; &#123;</span></span><br><span class="line">  <span class="comment">// return a.xx + 10</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line">  <span class="comment">// 假设a.xx是5，那它返回的值就是15，effect.run()读取的值就是15</span></span><br><span class="line">  <span class="comment">// 如果a.xx变成6，ReactiveEffect就会走，它把脏值_dirty变成true，再调用一次effect.run()</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 劫持value</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="comment">// the computed ref may get wrapped by other proxies e.g. readonly() #3376</span></span><br><span class="line">    <span class="keyword">const</span> self = <span class="title function_">toRaw</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="title function_">trackRefValue</span>(self)</span><br><span class="line">    <span class="comment">// 如果脏值_dirty是true，就重新计算</span></span><br><span class="line">    <span class="comment">// 如果值不变就不重新计算，直接返回上次计算出来的值（缓存在_value中）</span></span><br><span class="line">    <span class="keyword">if</span> (self.<span class="property">_dirty</span> || !self.<span class="property">_cacheable</span>) &#123;</span><br><span class="line">      self.<span class="property">_dirty</span> = <span class="literal">false</span>	<span class="comment">// 脏值_dirty设为false，所以它不脏了</span></span><br><span class="line">      self.<span class="property">_value</span> = self.<span class="property">effect</span>.<span class="title function_">run</span>()!	<span class="comment">// effect.run()用来读取getter函数的返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把函数的返回值赋给_value并return</span></span><br><span class="line">    <span class="keyword">return</span> self.<span class="property">_value</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newValue: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">_setter</span>(newValue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这部分位于<code>/package/reactivity/src/effect.ts</code></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ReactiveEffect类接收调度函数scheduler，此处省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 会被trigger调用</span></span><br><span class="line"><span class="comment">// trigger在依赖更新时调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">triggerEffect</span>(<span class="params"></span></span><br><span class="line"><span class="params">  effect: ReactiveEffect,</span></span><br><span class="line"><span class="params">  debuggerEventExtraInfo?: DebuggerEventExtraInfo</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (effect !== activeEffect || effect.<span class="property">allowRecurse</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__ &amp;&amp; effect.<span class="property">onTrigger</span>) &#123;</span><br><span class="line">      effect.<span class="title function_">onTrigger</span>(<span class="title function_">extend</span>(&#123; effect &#125;, debuggerEventExtraInfo))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果有调度函数，调用</span></span><br><span class="line">    <span class="keyword">if</span> (effect.<span class="property">scheduler</span>) &#123;</span><br><span class="line">      effect.<span class="title function_">scheduler</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      effect.<span class="title function_">run</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="实现Computed"><a href="#实现Computed" class="headerlink" title="实现Computed"></a>实现Computed</h1><p><code>computed.ts</code>：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; effect &#125; <span class="keyword">from</span> <span class="string">&quot;./effect&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">computed</span> = (<span class="params">getter: <span class="built_in">Function</span></span>)=&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> _value = <span class="title function_">effect</span>(getter, &#123;</span><br><span class="line">    <span class="comment">// 因为它会在依赖更新时被调用，所以依赖更新时脏值被赋true</span></span><br><span class="line">    <span class="attr">scheduler</span>:<span class="function">()=&gt;</span>&#123;_dirty=<span class="literal">true</span>&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 缓存值</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">catchValue</span>: <span class="built_in">any</span></span><br><span class="line">  <span class="keyword">let</span> _dirty = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">ComputedRefImpl</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">      <span class="comment">// 如果脏值为true，更新</span></span><br><span class="line">      <span class="keyword">if</span>(_dirty) &#123;</span><br><span class="line">        catchValue = <span class="title function_">_value</span>()</span><br><span class="line">        _dirty = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> catchValue</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ComputedRefImpl</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改上一节的<code>effect.ts</code>的部分内容：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加入一个effect选项接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Options</span> &#123;</span><br><span class="line">  scheduler?: <span class="title class_">Function</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改effect</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn 匿名函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">effect</span> = (<span class="params">fn: <span class="built_in">Function</span>, options: Options</span>)=&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一个闭包</span></span><br><span class="line">  <span class="keyword">const</span> _effect = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    activeEffect = _effect</span><br><span class="line">    <span class="keyword">let</span> res = <span class="title function_">fn</span>()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 把选项（这里主要是调度函数）赋给返回值_effect</span></span><br><span class="line">  _effect.<span class="property">options</span> = options</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化的时候调用一下</span></span><br><span class="line">  <span class="title function_">_effect</span>()</span><br><span class="line">  <span class="keyword">return</span> _effect</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改trigger</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> trigger = &lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt; <span class="function">(<span class="params">target: T, key: <span class="built_in">string</span> | <span class="built_in">symbol</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;111&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> deps = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span>(!deps) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;222&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  deps.<span class="title function_">forEach</span>(<span class="function">(<span class="params">effect: <span class="built_in">any</span></span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 达到了每次依赖更新都会有则调用调度函数的效果</span></span><br><span class="line">    <span class="keyword">if</span>(effect?.<span class="property">options</span>?.<span class="property">scheduler</span>) &#123;</span><br><span class="line">      effect?.<span class="property">options</span>?.<span class="property">scheduler</span>?.()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">effect</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>全局组件、局部组件、递归组件</title>
    <url>/web/study/vue/15.%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6%E3%80%81%E5%B1%80%E9%83%A8%E7%BB%84%E4%BB%B6%E3%80%81%E9%80%92%E5%BD%92%E7%BB%84%E4%BB%B6.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="局部组件"><a href="#局部组件" class="headerlink" title="局部组件"></a>局部组件</h1><p>页面上模块非常多，又不想冗杂地写在同一个页面内，就可以把它拆成一个局部组件。</p>
<p>Card.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;card&quot;&gt;</span><br><span class="line">    &lt;header&gt;</span><br><span class="line">      &lt;div&gt;标题&lt;/div&gt; &lt;div&gt;副标题&lt;/div&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;section&gt;</span><br><span class="line">      内容</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">$border: #ccc;</span><br><span class="line">.card &#123;</span><br><span class="line">  border: 1px solid $border;</span><br><span class="line">  width: 400px;</span><br><span class="line">  header &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    border-bottom: 1px solid $border;</span><br><span class="line">  &#125;</span><br><span class="line">  section &#123;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    min-height: 300px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Card&gt;&lt;/Card&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import Card from &#x27;./components/expame/Card.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h1><p>在当前系统中出现频率较高的组件，可以被封装成全局组件。</p>
<p>Card.vue同上。</p>
<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Card&gt;&lt;/Card&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br></pre></td></tr></table></figure>

<p>main.ts：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CardVue</span> <span class="keyword">from</span> <span class="string">&#x27;./components/expame/Card.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册全局组件</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&quot;Card&quot;</span>, <span class="title class_">CardVue</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="递归组件"><a href="#递归组件" class="headerlink" title="递归组件"></a>递归组件</h1><p>对组件内容进行复用。</p>
<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Tree :data=&quot;data&quot;&gt;&lt;/Tree&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">import Tree from &quot;@/components/expame/Tree.vue&quot;</span><br><span class="line"></span><br><span class="line">interface TreeList &#123;</span><br><span class="line">  name: string,</span><br><span class="line">  checked: boolean,</span><br><span class="line">  children?: TreeList[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const data = reactive&lt;TreeList[]&gt;([</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;1&quot;,</span><br><span class="line">    checked: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;2&quot;,</span><br><span class="line">    checked: false,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;3&quot;,</span><br><span class="line">    checked: true,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        name: &quot;3.1&quot;,</span><br><span class="line">        checked: false,</span><br><span class="line">        children: [</span><br><span class="line">          &#123;</span><br><span class="line">            name: &quot;3.1.1&quot;,</span><br><span class="line">            checked: false,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: &quot;3.1.2&quot;,</span><br><span class="line">            checked: false,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            name: &quot;3.1.3&quot;,</span><br><span class="line">            checked: true,</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: &quot;3.2&quot;,</span><br><span class="line">        checked: false,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>Tree.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 使用.stop阻止冒泡 --&gt;</span><br><span class="line">  &lt;!-- $是Vue提供的关键词，可以接收事件对象 --&gt;</span><br><span class="line">  &lt;div @click.stop=&quot;clickTap(item, $event)&quot; v-for=&quot;(item, index) in data&quot; :key=&quot;index&quot; class=&quot;tree&quot;&gt;</span><br><span class="line">    &lt;input v-model=&quot;item.checked&quot; type=&quot;checkbox&quot;&gt; &lt;span&gt;&#123;&#123; item.name &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &lt;!-- 当该层递归还有子级时才进入下一层 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Vue3中，可以直接使用文件名当作递归组件的名称 --&gt;</span><br><span class="line">    &lt;!-- 但这样如果不想用这个名字，就只能更改文件名 --&gt;</span><br><span class="line">    &lt;Tree v-if=&quot;item?.children?.length&quot; :data=&quot;item.children&quot;&gt;&lt;/Tree&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 还可以导出该组件并起个别名，使用别名递归 --&gt;</span><br><span class="line">    &lt;!-- 但这样需要再写一个script --&gt;</span><br><span class="line">    &lt;!-- &lt;Test v-if=&quot;item?.children?.length&quot; :data=&quot;item.children&quot;&gt;&lt;/Test&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 也可以安装unplugin-vue-define-options插件 --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line"></span><br><span class="line">interface TreeList &#123;</span><br><span class="line">  name: string,</span><br><span class="line">  checked: boolean,</span><br><span class="line">  children?: TreeList[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">defineProps&lt;&#123;</span><br><span class="line">  data?: TreeList[]</span><br><span class="line">&#125;&gt;()</span><br><span class="line"></span><br><span class="line">const clickTap = &lt;T extends Event&gt; (item: TreeList, e: T)=&gt; &#123;</span><br><span class="line">  // 默认存在冒泡，点击递归子级时会冒泡到递归父级</span><br><span class="line">  console.log(item, e)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- &lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">// 暴露导出该组件，并起个别名，这样就可以在该组件中以别的名字递归了</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Test&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.tree &#123;</span><br><span class="line">  margin-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>父子组件传参</title>
    <url>/web/study/vue/14.%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%8F%82.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="props"><a href="#props" class="headerlink" title="props"></a>props</h1><p>父组件传给子组件的值。</p>
<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;我是父级&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;waterFall :title=&quot;name&quot; :arr=&quot;[1,2,3]&quot;&gt;&lt;/waterFall&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import waterFall from &quot;./components/WaterFall.vue&quot;</span><br><span class="line"></span><br><span class="line">// 传给子组件的值</span><br><span class="line">const name = &quot;yajue&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>WaterFall.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是子级</span><br><span class="line">    &lt;!-- 定义的父传子传值可以直接在模板里使用 --&gt;</span><br><span class="line">    &lt;div&gt;title：&#123;&#123; title &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;arr&#123;&#123; arr &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 接收父组件传的值</span><br><span class="line"></span><br><span class="line">// 没有使用ts的情况</span><br><span class="line">// const props = defineProps(&#123;</span><br><span class="line">//   // 接收一个title数据</span><br><span class="line">//   title: &#123;</span><br><span class="line">//     // 规定该数据的类型为字符串</span><br><span class="line">//     type: String,</span><br><span class="line">//     // 默认值，如果父组件没有传就是这个值</span><br><span class="line">//     default: &quot;默认值&quot;</span><br><span class="line">//   &#125;,</span><br><span class="line">//   arr: &#123;</span><br><span class="line">//     default: []</span><br><span class="line">//   &#125;</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">// 使用了ts的情况</span><br><span class="line">// withDefaults是使用ts特有的函数，用于定义默认值</span><br><span class="line">const props = withDefaults(defineProps&lt;&#123;</span><br><span class="line">  title: string</span><br><span class="line">  arr: number[]</span><br><span class="line">&#125;&gt;(), &#123;</span><br><span class="line">  title: &quot;默认值&quot;,</span><br><span class="line">  // 如果是引用数据类型定义默认值，需要用一个匿名函数作返回</span><br><span class="line">  arr: ()=&gt; [114514]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 但是不能在代码里直接使用</span><br><span class="line">// console.log(title)</span><br><span class="line">// 需要通过defineProps的返回值获取</span><br><span class="line">console.log(props.title, props.arr)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h1><p>子组件的自定义事件，可以用来传值。</p>
<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;我是父级&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;waterFall @on-click=&quot;getArgs&quot;&gt;&lt;/waterFall&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import waterFall from &quot;./components/WaterFall.vue&quot;</span><br><span class="line"></span><br><span class="line">// 触发子组件自定义事件时的回调（能拿到子组件传的值）</span><br><span class="line">const getArgs = (...args: any[])=&gt; &#123;</span><br><span class="line">  console.log(args)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>WaterFall.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是子级</span><br><span class="line">    &lt;button @click=&quot;send&quot;&gt;给父组件传值&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 给父组件传值（定义自定义事件）</span><br><span class="line"></span><br><span class="line">// 没有使用ts的情况</span><br><span class="line">// const emit = defineEmits([&quot;on-click&quot;])</span><br><span class="line"></span><br><span class="line">// 使用了ts的情况</span><br><span class="line">const emit = defineEmits&lt;&#123;</span><br><span class="line">  (e: &quot;on-click&quot;, title: string, ...rest: number[]): void</span><br><span class="line">&#125;&gt;()</span><br><span class="line"></span><br><span class="line">const send = ()=&gt; &#123;</span><br><span class="line">  // 触发自定义事件，可以顺便传值</span><br><span class="line">  emit(&quot;on-click&quot;, &quot;子组件传的值&quot;, 114514, 1919810)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="expose"><a href="#expose" class="headerlink" title="expose"></a>expose</h1><p>给父组件暴露属性和方法。</p>
<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;我是父级&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;waterFall ref=&quot;wf&quot;&gt;&lt;/waterFall&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 用ts读取wf的类型</span><br><span class="line">const wf = ref&lt;InstanceType&lt;typeof waterFall&gt;&gt;()</span><br><span class="line"></span><br><span class="line">onMounted(()=&gt; &#123;</span><br><span class="line">  console.log(&quot;~~~onMounted~~~&quot;)</span><br><span class="line">  console.log(wf.value?.name)</span><br><span class="line">  wf.value?.open()</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>WaterFall.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是子级</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 给父组件暴露属性和方法</span><br><span class="line">defineExpose(&#123;</span><br><span class="line">  name: &quot;yjsp&quot;,</span><br><span class="line">  open: ()=&gt; console.log(&quot;I am open function&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="图片流布局实例"><a href="#图片流布局实例" class="headerlink" title="图片流布局实例"></a>图片流布局实例</h1><p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;我是父级&lt;/div&gt;</span><br><span class="line">  &lt;waterFall ref=&quot;wf&quot; :list=&quot;list&quot;&gt;&lt;/waterFall&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import waterFall from &quot;./components/WaterFall.vue&quot;</span><br><span class="line"></span><br><span class="line">const list = [</span><br><span class="line">  &#123;</span><br><span class="line">    height: 300,</span><br><span class="line">    background: &#x27;red&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 400,</span><br><span class="line">    background: &#x27;pink&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 500,</span><br><span class="line">    background: &#x27;blue&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 200,</span><br><span class="line">    background: &#x27;green&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 300,</span><br><span class="line">    background: &#x27;gray&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 400,</span><br><span class="line">    background: &#x27;#CC00FF&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 200,</span><br><span class="line">    background: &#x27;black&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 100,</span><br><span class="line">    background: &#x27;#996666&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 500,</span><br><span class="line">    background: &#x27;skyblue&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 300,</span><br><span class="line">    background: &#x27;#993366&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 100,</span><br><span class="line">    background: &#x27;#33FF33&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 400,</span><br><span class="line">    background: &#x27;skyblue&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 200,</span><br><span class="line">    background: &#x27;#6633CC&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 300,</span><br><span class="line">    background: &#x27;#666699&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 300,</span><br><span class="line">    background: &#x27;#66CCFF&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 300,</span><br><span class="line">    background: &#x27;skyblue&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 200,</span><br><span class="line">    background: &#x27;#CC3366&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 200,</span><br><span class="line">    background: &#x27;#CC9966&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 200,</span><br><span class="line">    background: &#x27;#FF00FF&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 500,</span><br><span class="line">    background: &#x27;#990000&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 400,</span><br><span class="line">    background: &#x27;red&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 100,</span><br><span class="line">    background: &#x27;#999966&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 200,</span><br><span class="line">    background: &#x27;#CCCC66&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 300,</span><br><span class="line">    background: &#x27;#FF33FF&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 400,</span><br><span class="line">    background: &#x27;#FFFF66&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 200,</span><br><span class="line">    background: &#x27;red&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 100,</span><br><span class="line">    background: &#x27;skyblue&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 200,</span><br><span class="line">    background: &#x27;#33CC00&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 300,</span><br><span class="line">    background: &#x27;#330033&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 100,</span><br><span class="line">    background: &#x27;#0066CC&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 200,</span><br><span class="line">    background: &#x27;skyblue&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 100,</span><br><span class="line">    background: &#x27;#006666&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 200,</span><br><span class="line">    background: &#x27;yellow&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 300,</span><br><span class="line">    background: &#x27;yellow&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 100,</span><br><span class="line">    background: &#x27;#33CCFF&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 400,</span><br><span class="line">    background: &#x27;yellow&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 400,</span><br><span class="line">    background: &#x27;yellow&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 200,</span><br><span class="line">    background: &#x27;#33FF00&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 300,</span><br><span class="line">    background: &#x27;yellow&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    height: 100,</span><br><span class="line">    background: &#x27;green&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>WaterFall.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;wraps&quot;&gt;</span><br><span class="line">    &lt;div </span><br><span class="line">      :style=&quot;&#123;</span><br><span class="line">        height:item.height+&#x27;px&#x27;,</span><br><span class="line">        backgroundColor:item.background,</span><br><span class="line">        left:item.left+&#x27;px&#x27;,</span><br><span class="line">        top:item.top+&#x27;px&#x27;</span><br><span class="line">      &#125;&quot;</span><br><span class="line">      v-for=&quot;(item, index) in waterList&quot; </span><br><span class="line">      :key=&quot;index&quot;</span><br><span class="line">      class=&quot;items&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted, reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">  list: any[]</span><br><span class="line">&#125;&gt;()</span><br><span class="line"></span><br><span class="line">const waterList = reactive&lt;any[]&gt;([])</span><br><span class="line"></span><br><span class="line">const heightList: number[] = []</span><br><span class="line"></span><br><span class="line">const init = ()=&gt; &#123;</span><br><span class="line">  // 横向预留空隙</span><br><span class="line">  const width = 130</span><br><span class="line">  // 视口区宽度</span><br><span class="line">  const x = document.body.clientWidth</span><br><span class="line">  // 列数</span><br><span class="line">  const column = Math.floor(x/width)</span><br><span class="line"></span><br><span class="line">  console.log(width, x, column)</span><br><span class="line">  for(let i = 0; i &lt; props.list.length; i++) &#123;</span><br><span class="line">    // 第一列</span><br><span class="line">    if(i &lt; column) &#123;</span><br><span class="line">      waterList.push(&#123;</span><br><span class="line">        ...props.list[i],</span><br><span class="line">        left: i * width,</span><br><span class="line">        top: 20</span><br><span class="line">      &#125;)</span><br><span class="line">  </span><br><span class="line">      // 更新高度数组</span><br><span class="line">      heightList.push(props.list[i].height + 20)</span><br><span class="line">    &#125; </span><br><span class="line">    // 后面的列</span><br><span class="line">    else &#123;</span><br><span class="line">      // 最小的高度值</span><br><span class="line">      let current = heightList[0]</span><br><span class="line">      // 最小高度列的索引</span><br><span class="line">      let index = 0</span><br><span class="line"></span><br><span class="line">      // 找到最小高度列</span><br><span class="line">      heightList.forEach((h, i)=&gt; &#123;</span><br><span class="line">        if(current &gt; h) &#123;</span><br><span class="line">          current = h</span><br><span class="line">          index = i</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      waterList.push(&#123;</span><br><span class="line">        ...props.list[i],</span><br><span class="line">        top: current + 20,</span><br><span class="line">        left: index * width</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      // 更新高度数组</span><br><span class="line">      heightList[index] = heightList[index] + props.list[i].height + 20</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onMounted(()=&gt; &#123;</span><br><span class="line">  init()</span><br><span class="line">  console.log(waterList)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.wraps &#123;</span><br><span class="line">  position: relative;</span><br><span class="line"></span><br><span class="line">  .items &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    width: 120px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>动态组件</title>
    <url>/web/study/vue/16.%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p>动态组件就是让多个组件使用同一个挂载点，并动态切换。</p>
<p>在挂载点使用component标签，然后使用<code>v-bind:is=&quot;组件&quot;</code>，通过is切换组件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;component :is=&quot;A&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import A from &quot;./A.vue&quot;</span><br><span class="line">import B from &quot;./B.vue&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style=&quot;display: flex;&quot;&gt;</span><br><span class="line">    &lt;div </span><br><span class="line">      @click=&quot;switchCom(item, index)&quot;</span><br><span class="line">      :class=&quot;[active == index? &#x27;active&#x27;: &#x27;&#x27;]&quot; class=&quot;tabs&quot; </span><br><span class="line">      v-for=&quot;(item, index) in data&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; item.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;component :is=&quot;comId&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 传组件对象的用法</span><br><span class="line">import &#123; ref, reactive &#125; from &#x27;vue&#x27;</span><br><span class="line">import A from &quot;@/components/A.vue&quot;</span><br><span class="line">import B from &quot;@/components/B.vue&quot;</span><br><span class="line">import C from &quot;@/components/C.vue&quot;</span><br><span class="line"></span><br><span class="line">const comId = ref(A)</span><br><span class="line">const active = ref(0)</span><br><span class="line"></span><br><span class="line">const data = reactive([</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;A组件&quot;,</span><br><span class="line">    com: A</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;B组件&quot;,</span><br><span class="line">    com: B</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;C组件&quot;,</span><br><span class="line">    com: C</span><br><span class="line">  &#125;,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">const switchCom = (item: any, index: number)=&gt; &#123;</span><br><span class="line">  comId.value = item.com</span><br><span class="line">  active.value = index</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">// 另一种用法（传字符串），注册组件后就可以直接通过组件名切换</span><br><span class="line">import AVue from &quot;@/components/A.vue&quot;</span><br><span class="line">import BVue from &quot;@/components/B.vue&quot;</span><br><span class="line">import CVue from &quot;@/components/C.vue&quot;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    AVue,BVue,CVue</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const comId2 = shallowRef(&quot;AVue&quot;)</span><br><span class="line">const active2 = ref(0)</span><br><span class="line"></span><br><span class="line">const data2 = reactive([</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;A组件&quot;,</span><br><span class="line">    com: &quot;AVue&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;B组件&quot;,</span><br><span class="line">    com: &quot;BVue&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;C组件&quot;,</span><br><span class="line">    com: &quot;CVue&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">const switchCom2 = (item: any, index: number)=&gt; &#123;</span><br><span class="line">  comId2.value = item.com</span><br><span class="line">  active2.value = index</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.active &#123;</span><br><span class="line">  background-color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tabs &#123;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  padding: 5px 10px;</span><br><span class="line">  margin: 5px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>A.vue、B.vue和C.vue省略。</p>
<h1 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h1><p>引入组件时会包含组件自身的一些信息，但这些信息没有必要被劫持，为了性能起见可以跳过它们。</p>
<p>可以使用shallowRef或markRaw。</p>
<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div style=&quot;display: flex;&quot;&gt;</span><br><span class="line">    &lt;div </span><br><span class="line">      @click=&quot;switchCom(item, index)&quot;</span><br><span class="line">      :class=&quot;[active == index? &#x27;active&#x27;: &#x27;&#x27;]&quot; class=&quot;tabs&quot; </span><br><span class="line">      v-for=&quot;(item, index) in data&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; item.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;component :is=&quot;comId&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, reactive, markRaw, shallowRef &#125; from &#x27;vue&#x27;</span><br><span class="line">import A from &quot;@/components/A.vue&quot;</span><br><span class="line">import B from &quot;@/components/B.vue&quot;</span><br><span class="line">import C from &quot;@/components/C.vue&quot;</span><br><span class="line"></span><br><span class="line">// 使comId响应式只达到.value这一层</span><br><span class="line">const comId = shallowRef(A)</span><br><span class="line">const active = ref(0)</span><br><span class="line"></span><br><span class="line">// 使这些组件对象变为不可被代理</span><br><span class="line">const data = reactive([</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;A组件&quot;,</span><br><span class="line">    com: markRaw(A)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;B组件&quot;,</span><br><span class="line">    com: markRaw(B)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;C组件&quot;,</span><br><span class="line">    com: markRaw(C)</span><br><span class="line">  &#125;,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">const switchCom = (item: any, index: number)=&gt; &#123;</span><br><span class="line">  comId.value = item.com</span><br><span class="line">  active.value = index</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.active &#123;</span><br><span class="line">  background-color: #ccc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tabs &#123;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  padding: 5px 10px;</span><br><span class="line">  margin: 5px;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>由图可知，使用component时，虚拟DOM调用了<code>_resolveDynamicComponent</code>函数。（<a href="https://template-explorer.vuejs.org/">工具</a>）</p>
<p><img src="https://image.cheriko.fun/post/202305201530449.png"></p>
<p>在Vue源码（<code>/package/runtime-core/src/helpers/resolveAssets.ts</code>）中可以看到watch的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// is属性就是此处的component参数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">resolveDynamicComponent</span>(<span class="params">component: <span class="built_in">unknown</span></span>): <span class="title class_">VNodeTypes</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isString</span>(component)) &#123;</span><br><span class="line">    <span class="comment">// 如果是字符串，作处理</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">resolveAsset</span>(<span class="variable constant_">COMPONENTS</span>, component, <span class="literal">false</span>) || component</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// invalid types will fallthrough to createVNode and raise warning</span></span><br><span class="line">    <span class="comment">// 如果是对象，直接返回，然后调用render，重新patch，重新创建组件</span></span><br><span class="line">    <span class="keyword">return</span> (component || <span class="variable constant_">NULL_DYNAMIC_COMPONENT</span>) <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolveAsset</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="keyword">type</span>: <span class="keyword">typeof</span> COMPONENTS,</span></span><br><span class="line"><span class="params">  name: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  warnMissing?: <span class="built_in">boolean</span>,</span></span><br><span class="line"><span class="params">  maybeSelfReference?: <span class="built_in">boolean</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">ConcreteComponent</span> | <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// overload 2: directives</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolveAsset</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="keyword">type</span>: <span class="keyword">typeof</span> DIRECTIVES,</span></span><br><span class="line"><span class="params">  name: <span class="built_in">string</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Directive</span> | <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// implementation</span></span><br><span class="line"><span class="comment">// overload 3: filters (compat only)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolveAsset</span>(<span class="params"><span class="keyword">type</span>: <span class="keyword">typeof</span> FILTERS, name: <span class="built_in">string</span></span>): <span class="title class_">Function</span> | <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// implementation</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolveAsset</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="keyword">type</span>: AssetTypes,</span></span><br><span class="line"><span class="params">  name: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  warnMissing = <span class="literal">true</span>,</span></span><br><span class="line"><span class="params">  maybeSelfReference = <span class="literal">false</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> instance = currentRenderingInstance || currentInstance <span class="comment">// 获取组件实例</span></span><br><span class="line">  <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">    <span class="comment">// 读取组件实例上的type（代码书写方式）</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Component</span> = instance.<span class="property">type</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// explicit self name has highest priority</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="variable constant_">COMPONENTS</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> selfName = <span class="title function_">getComponentName</span>(</span><br><span class="line">        <span class="title class_">Component</span>,</span><br><span class="line">        <span class="literal">false</span> <span class="comment">/* do not include inferred name to avoid breaking existing code */</span></span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        selfName &amp;&amp;</span><br><span class="line">        (selfName === name ||</span><br><span class="line">          selfName === <span class="title function_">camelize</span>(name) ||</span><br><span class="line">          selfName === <span class="title function_">capitalize</span>(<span class="title function_">camelize</span>(name)))</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Component</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// res是当前要切换的组件</span></span><br><span class="line">    <span class="keyword">const</span> res =</span><br><span class="line">      <span class="comment">// local registration</span></span><br><span class="line">      <span class="comment">// check instance[type] first which is resolved for options API</span></span><br><span class="line">      <span class="comment">// 局部注册</span></span><br><span class="line">      <span class="title function_">resolve</span>(instance[<span class="keyword">type</span>] || (<span class="title class_">Component</span> <span class="keyword">as</span> <span class="title class_">ComponentOptions</span>)[<span class="keyword">type</span>], name) ||</span><br><span class="line">      <span class="comment">// global registration</span></span><br><span class="line">      <span class="comment">// 全局注册</span></span><br><span class="line">      <span class="title function_">resolve</span>(instance.<span class="property">appContext</span>[<span class="keyword">type</span>], name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!res &amp;&amp; maybeSelfReference) &#123;</span><br><span class="line">      <span class="comment">// fallback to implicit self-reference</span></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Component</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__DEV__ &amp;&amp; warnMissing &amp;&amp; !res) &#123;</span><br><span class="line">      <span class="keyword">const</span> extra =</span><br><span class="line">        <span class="keyword">type</span> === <span class="variable constant_">COMPONENTS</span></span><br><span class="line">          ? <span class="string">`\nIf this is a native custom element, make sure to exclude it from `</span> +</span><br><span class="line">            <span class="string">`component resolution via compilerOptions.isCustomElement.`</span></span><br><span class="line">          : <span class="string">``</span></span><br><span class="line">      <span class="title function_">warn</span>(<span class="string">`Failed to resolve <span class="subst">$&#123;<span class="keyword">type</span>.slice(<span class="number">0</span>, -<span class="number">1</span>)&#125;</span>: <span class="subst">$&#123;name&#125;</span><span class="subst">$&#123;extra&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回组件</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(</span><br><span class="line">      <span class="string">`resolve<span class="subst">$&#123;capitalize(<span class="keyword">type</span>.slice(<span class="number">0</span>, -<span class="number">1</span>))&#125;</span> `</span> +</span><br><span class="line">        <span class="string">`can only be used in render() or setup().`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>插槽slot</title>
    <url>/web/study/vue/17.%E6%8F%92%E6%A7%BDslot.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h1><p>一个不命名的插槽。</p>
<p>Dialog&#x2F;index.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;main class=&quot;main&quot;&gt;</span><br><span class="line">      &lt;div v-for=&quot;(item, index) in data&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">        &lt;!-- 直接这样定义就是匿名插槽 --&gt;</span><br><span class="line">        &lt;!-- 加上v-bind的属性就是插槽作用域，父组件进行插槽使用时可以获取这里的值 --&gt;</span><br><span class="line">        &lt;slot :data=&quot;item&quot; :index=&quot;index&quot;&gt;&lt;/slot&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">type names = &#123;</span><br><span class="line">  name: string,</span><br><span class="line">  age: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const data = reactive&lt;names[]&gt;([</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;yajue&quot;,</span><br><span class="line">    age: 24</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;knn&quot;,</span><br><span class="line">    age: 300</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;snnn&quot;,</span><br><span class="line">    age: 30</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: &quot;bnkrg&quot;,</span><br><span class="line">    age: 17</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.main &#123;</span><br><span class="line">  height: 300px;</span><br><span class="line">  background-color: green;</span><br><span class="line">  color: white;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Dialog&gt;</span><br><span class="line">      &lt;!-- 使用匿名插槽 --&gt;</span><br><span class="line">      &lt;!-- v-slot可以取插槽作用域的值 --&gt;</span><br><span class="line">      &lt;!-- &lt;template v-slot=&quot;&#123; data, index &#125;&quot;&gt; --&gt;</span><br><span class="line">      &lt;!-- 匿名插槽的简写需要写成#default --&gt;</span><br><span class="line">      &lt;template #default=&quot;&#123; data, index &#125;&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &#123;&#123; index &#125;&#125;. &#123;&#123; data.name &#125;&#125; ---- &#123;&#123; data.age &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/Dialog&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import Dialog from &quot;@/components/Dialog/index.vue&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h1><p>被起了名字的插槽。</p>
<p>Dialog&#x2F;index.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;header class=&quot;header&quot;&gt;</span><br><span class="line">      &lt;!-- 加上name属性就是具名插槽，名字是name的值 --&gt;</span><br><span class="line">      &lt;slot name=&quot;header&quot; :data=&quot;111&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.header &#123;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background-color: red;</span><br><span class="line">  color: white;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Dialog&gt;</span><br><span class="line">      &lt;!-- 使用具名插槽 --&gt;</span><br><span class="line">      &lt;!-- &lt;template v-slot:header&gt; --&gt;</span><br><span class="line">      &lt;!-- v-slot可以被简写成井号# --&gt;</span><br><span class="line">      &lt;template #header=&quot;&#123; data &#125;&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          header&#123;&#123; data &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/Dialog&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import Dialog from &quot;@/components/Dialog/index.vue&quot;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="动态插槽"><a href="#动态插槽" class="headerlink" title="动态插槽"></a>动态插槽</h1><p>使用变量作为名的插槽。</p>
<p>Dialog&#x2F;index.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;footer class=&quot;footer&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;footer&quot;&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.footer &#123;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background-color: blue;</span><br><span class="line">  color: white;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Dialog&gt;</span><br><span class="line">      &lt;!-- 使用动态插槽 --&gt;</span><br><span class="line">      &lt;template #[name]&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          草</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/Dialog&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import Dialog from &quot;@/components/Dialog/index.vue&quot;</span><br><span class="line"></span><br><span class="line">let name = ref(&quot;footer&quot;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>异步组件＆代码分包＆suspense</title>
    <url>/web/study/vue/18.%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6%EF%BC%86%E4%BB%A3%E7%A0%81%E5%88%86%E5%8C%85%EF%BC%86suspense.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h1><p>使用骨架屏理解异步组件。</p>
<p>sync.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;sync&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;sync-content&quot;&gt;</span><br><span class="line">      &lt;div&gt;&lt;img :src=&quot;data.url&quot; alt=&quot;&quot;&gt;&#123;&#123; data.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;hr&gt;</span><br><span class="line">      &lt;div class=&quot;sync-pop&quot;&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123; data.desc &#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&amp;nbsp;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; axios &#125; from &quot;@/server/axios&quot;</span><br><span class="line"></span><br><span class="line">interface Data &#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: string,</span><br><span class="line">    age: number,</span><br><span class="line">    url: string,</span><br><span class="line">    desc: string</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ES7中引入的顶层await技术</span><br><span class="line">// 可以直接在一个模块的最外层使用await</span><br><span class="line">// 这让整个模块看起来像一个巨大的async函数</span><br><span class="line">// mock数据将在发送请求的2秒后收到</span><br><span class="line">const &#123; data &#125; = await axios.get&lt;Data&gt;(&quot;./data.json&quot;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.sync &#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  background-color: #eee;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  .sync-content &#123;</span><br><span class="line">    div &#123;</span><br><span class="line">      font-size: 12px;</span><br><span class="line">      img &#123;</span><br><span class="line">        width: 50px;</span><br><span class="line">        height: 50px;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>skeleton.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;sk&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;sk-2&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;avatar&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;name&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;div class=&quot;sk-3&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;sk-3&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.sk &#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  background-color: #eee;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  .sk-2 &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: baseline;</span><br><span class="line">    .avatar &#123;</span><br><span class="line">        width: 50px;</span><br><span class="line">        height: 50px;</span><br><span class="line">        background-color: #ccc;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">      &#125;</span><br><span class="line">    .name &#123;</span><br><span class="line">      width: 50px;</span><br><span class="line">      height: 12px;</span><br><span class="line">      background-color: #ccc;  </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  .sk-3 &#123;</span><br><span class="line">    height: 12px;</span><br><span class="line">    background-color: #ccc;</span><br><span class="line">    &amp;:last-child &#123;</span><br><span class="line">      margin-top: 6px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 展示异步组件必须使用suspense --&gt;</span><br><span class="line">    &lt;Suspense&gt;</span><br><span class="line">      &lt;!-- 主要展示的组件 --&gt;</span><br><span class="line">      &lt;template #default&gt;</span><br><span class="line">        &lt;sync&gt;&lt;/sync&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;!-- 加载时呈现的组件 --&gt;</span><br><span class="line">      &lt;template #fallback&gt;</span><br><span class="line">        &lt;skeleton&gt;&lt;/skeleton&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/Suspense&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineAsyncComponent, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import skeleton from &#x27;./components/expame/skeleton.vue&#x27;</span><br><span class="line"></span><br><span class="line">// 使用defineAsyncComponent引入异步组件，支持两种书写风格</span><br><span class="line">// 动态组件形式</span><br><span class="line">const sync = defineAsyncComponent(()=&gt; import(&quot;@/components/expame/sync.vue&quot;))</span><br><span class="line">// 配置对象形式，几乎用不到</span><br><span class="line">// const sync = defineAsyncComponent(&#123;</span><br><span class="line">//   loadingComponent: ()=&gt; import(&quot;@/components/expame/sync.vue&quot;),</span><br><span class="line">//   errorComponent: ...,</span><br><span class="line">//   timeout: ...,</span><br><span class="line">// &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="代码分包"><a href="#代码分包" class="headerlink" title="代码分包"></a>代码分包</h1><p>vue代码默认只会被打包成一个js文件（主包），使用同步方式引入的组件就在其中。</p>
<p>将组件异步引入，打包后组件就会被实现分包，不会放在主包内，可以缩短首次加载的时间。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Teleport传送组件</title>
    <url>/web/study/vue/19.Teleport%E4%BC%A0%E9%80%81%E7%BB%84%E4%BB%B6.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="teleport"><a href="#teleport" class="headerlink" title="teleport"></a>teleport</h1><p>Vue3.0新增的内置组件，可以将模板渲染至任何指定的DOM节点，不受父级style、v-show的影响，但data、prop数据仍能共用，类似React的Portal。</p>
<p>A.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">    &lt;header class=&quot;header&quot;&gt;</span><br><span class="line">      &lt;div&gt;我是弹框&lt;/div&gt;</span><br><span class="line">      &lt;el-icon&gt;</span><br><span class="line">        &lt;CloseBold /&gt;</span><br><span class="line">      &lt;/el-icon&gt;</span><br><span class="line">    &lt;/header&gt;</span><br><span class="line">    &lt;main class=&quot;main&quot;&gt;</span><br><span class="line">      我是内容12321321321</span><br><span class="line">    &lt;/main&gt;</span><br><span class="line">    &lt;footer class=&quot;footer&quot;&gt;</span><br><span class="line">      &lt;el-button size=&quot;small&quot;&gt;取消&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button size=&quot;small&quot; type=&quot;primary&quot;&gt;确定&lt;/el-button&gt;</span><br><span class="line">    &lt;/footer&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; ref, reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.dialog &#123;</span><br><span class="line">  width: 400px;</span><br><span class="line">  height: 400px;</span><br><span class="line">  background: #141414;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 50%;</span><br><span class="line">  top: 50%;</span><br><span class="line">  margin-left: -200px;</span><br><span class="line">  margin-top: -200px;</span><br><span class="line"></span><br><span class="line">  .header &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    color: #CFD3DC;</span><br><span class="line">    border-bottom: 1px solid #636466;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .main &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    color: #CFD3DC;</span><br><span class="line">    padding: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .footer &#123;</span><br><span class="line">    border-top: 1px solid #636466;</span><br><span class="line">    padding: 10px;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: flex-end;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;h1&gt;我是父级&lt;/h1&gt;</span><br><span class="line">    &lt;!-- to可以接收各种DOM选择器 --&gt;</span><br><span class="line">    &lt;!-- disabled如果设为true，to属性就不会起作用，可以动态控制 --&gt;</span><br><span class="line">    &lt;Teleport to=&quot;body&quot; :disabled=&quot;true&quot;&gt;</span><br><span class="line">      &lt;A&gt;&lt;/A&gt;</span><br><span class="line">    &lt;/Teleport&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import A from &quot;@/components/A.vue&quot;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">* &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">.parent &#123;</span><br><span class="line">  background-color: cyan;</span><br><span class="line">  height: 50vh;</span><br><span class="line">  // 对话框的父级parent被设为相对定位，所以通常情况下，对话框的绝对定位会受parent影响</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.cheriko.fun/post/202305221820136.png" alt="没有对A组件使用Teleport"></p>
<p><img src="https://image.cheriko.fun/post/202305221820138.png" alt="对A组件使用Teleport，并将其挂载至body下"></p>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>组件会经过patch函数（<code>/package/runtime-core/src/renderer.ts</code>）去创建，如果是Teleport组件，patch函数会执行Teleport对象的process方法。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前后省略</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">TELEPORT</span>) &#123;</span><br><span class="line">          ;(<span class="keyword">type</span> <span class="keyword">as</span> <span class="keyword">typeof</span> <span class="title class_">TeleportImpl</span>).<span class="title function_">process</span>(</span><br><span class="line">            n1 <span class="keyword">as</span> <span class="title class_">TeleportVNode</span>,</span><br><span class="line">            n2 <span class="keyword">as</span> <span class="title class_">TeleportVNode</span>,</span><br><span class="line">            container,</span><br><span class="line">            anchor,</span><br><span class="line">            parentComponent,</span><br><span class="line">            parentSuspense,</span><br><span class="line">            isSVG,</span><br><span class="line">            slotScopeIds,</span><br><span class="line">            optimized,</span><br><span class="line">            internals</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>在Vue源码（<code>/package/runtime-core/src/components/Teleport.ts</code>）中可以看到Teleport的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> resolveTarget = &lt;T = <span class="title class_">RendererElement</span>&gt;(</span><br><span class="line">  <span class="attr">props</span>: <span class="title class_">TeleportProps</span> | <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">select</span>: <span class="title class_">RendererOptions</span>[<span class="string">&#x27;querySelector&#x27;</span>]</span><br><span class="line">): T | <span class="function"><span class="params">null</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 读取了Teleport props的to属性</span></span><br><span class="line">  <span class="keyword">const</span> targetSelector = props &amp;&amp; props.<span class="property">to</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isString</span>(targetSelector)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!select) &#123;</span><br><span class="line">      __DEV__ &amp;&amp;</span><br><span class="line">        <span class="title function_">warn</span>(</span><br><span class="line">          <span class="string">`Current renderer does not support string target for Teleports. `</span> +</span><br><span class="line">            <span class="string">`(missing querySelector renderer option)`</span></span><br><span class="line">        )</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 其实就是querySelector，读到了Teleport需要挂至的目标元素</span></span><br><span class="line">      <span class="keyword">const</span> target = <span class="title function_">select</span>(targetSelector)</span><br><span class="line">      <span class="keyword">if</span> (!target) &#123;</span><br><span class="line">        __DEV__ &amp;&amp;</span><br><span class="line">          <span class="title function_">warn</span>(</span><br><span class="line">            <span class="string">`Failed to locate Teleport target with selector &quot;<span class="subst">$&#123;targetSelector&#125;</span>&quot;. `</span> +</span><br><span class="line">              <span class="string">`Note the target element must exist before the component is mounted - `</span> +</span><br><span class="line">              <span class="string">`i.e. the target cannot be rendered by the component itself, and `</span> +</span><br><span class="line">              <span class="string">`ideally should be outside of the entire Vue component tree.`</span></span><br><span class="line">          )</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> target <span class="keyword">as</span> T</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__ &amp;&amp; !targetSelector &amp;&amp; !<span class="title function_">isTeleportDisabled</span>(props)) &#123;</span><br><span class="line">      <span class="title function_">warn</span>(<span class="string">`Invalid Teleport target: <span class="subst">$&#123;targetSelector&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 成功读到就返回目标元素</span></span><br><span class="line">    <span class="keyword">return</span> targetSelector <span class="keyword">as</span> T</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">TeleportImpl</span> = &#123;</span><br><span class="line">  <span class="attr">__isTeleport</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 创建、更新</span></span><br><span class="line">  <span class="title function_">process</span>(<span class="params"></span></span><br><span class="line"><span class="params">    n1: TeleportVNode | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    n2: TeleportVNode,</span></span><br><span class="line"><span class="params">    container: RendererElement,</span></span><br><span class="line"><span class="params">    anchor: RendererNode | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    parentComponent: ComponentInternalInstance | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    parentSuspense: SuspenseBoundary | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    isSVG: <span class="built_in">boolean</span>,</span></span><br><span class="line"><span class="params">    slotScopeIds: <span class="built_in">string</span>[] | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    optimized: <span class="built_in">boolean</span>,</span></span><br><span class="line"><span class="params">    internals: RendererInternals</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      <span class="attr">mc</span>: mountChildren,</span><br><span class="line">      <span class="attr">pc</span>: patchChildren,</span><br><span class="line">      <span class="attr">pbc</span>: patchBlockChildren,</span><br><span class="line">      <span class="attr">o</span>: &#123; insert, querySelector, createText, createComment &#125;</span><br><span class="line">    &#125; = internals</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> disabled = <span class="title function_">isTeleportDisabled</span>(n2.<span class="property">props</span>)</span><br><span class="line">    <span class="keyword">let</span> &#123; shapeFlag, children, dynamicChildren &#125; = n2</span><br><span class="line"></span><br><span class="line">    <span class="comment">// #3302</span></span><br><span class="line">    <span class="comment">// HMR updated, force full diff</span></span><br><span class="line">    <span class="keyword">if</span> (__DEV__ &amp;&amp; isHmrUpdating) &#123;</span><br><span class="line">      optimized = <span class="literal">false</span></span><br><span class="line">      dynamicChildren = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n1 == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// insert anchors in the main view</span></span><br><span class="line">      <span class="comment">// 创建逻辑</span></span><br><span class="line">      <span class="keyword">const</span> placeholder = (n2.<span class="property">el</span> = __DEV__</span><br><span class="line">        ? <span class="title function_">createComment</span>(<span class="string">&#x27;teleport start&#x27;</span>)</span><br><span class="line">        : <span class="title function_">createText</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">      <span class="keyword">const</span> mainAnchor = (n2.<span class="property">anchor</span> = __DEV__</span><br><span class="line">        ? <span class="title function_">createComment</span>(<span class="string">&#x27;teleport end&#x27;</span>)</span><br><span class="line">        : <span class="title function_">createText</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">      <span class="title function_">insert</span>(placeholder, container, anchor)</span><br><span class="line">      <span class="title function_">insert</span>(mainAnchor, container, anchor)</span><br><span class="line">      <span class="comment">// 获取目标移动到的DOM节点</span></span><br><span class="line">      <span class="keyword">const</span> target = (n2.<span class="property">target</span> = <span class="title function_">resolveTarget</span>(n2.<span class="property">props</span>, querySelector))</span><br><span class="line">      <span class="keyword">const</span> targetAnchor = (n2.<span class="property">targetAnchor</span> = <span class="title function_">createText</span>(<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">      <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        <span class="title function_">insert</span>(targetAnchor, target)</span><br><span class="line">        <span class="comment">// #2652 we could be teleporting from a non-SVG tree into an SVG tree</span></span><br><span class="line">        isSVG = isSVG || <span class="title function_">isTargetSVG</span>(target)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__ &amp;&amp; !disabled) &#123;</span><br><span class="line">        <span class="title function_">warn</span>(<span class="string">&#x27;Invalid Teleport target on mount:&#x27;</span>, target, <span class="string">`(<span class="subst">$&#123;<span class="keyword">typeof</span> target&#125;</span>)`</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将组件挂载到目标节点上</span></span><br><span class="line">      <span class="keyword">const</span> <span class="title function_">mount</span> = (<span class="params">container: RendererElement, anchor: RendererNode</span>) =&gt; &#123;</span><br><span class="line">        <span class="comment">// Teleport *always* has Array children. This is enforced in both the</span></span><br><span class="line">        <span class="comment">// compiler and vnode children normalization.</span></span><br><span class="line">        <span class="comment">// 挂载子节点</span></span><br><span class="line">        <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span>) &#123;</span><br><span class="line">          <span class="title function_">mountChildren</span>(</span><br><span class="line">            children <span class="keyword">as</span> <span class="title class_">VNodeArrayChildren</span>,</span><br><span class="line">            container,</span><br><span class="line">            anchor,</span><br><span class="line">            parentComponent,</span><br><span class="line">            parentSuspense,</span><br><span class="line">            isSVG,</span><br><span class="line">            slotScopeIds,</span><br><span class="line">            optimized</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果disabled为true，挂载到原先的位置，否则挂载到to的目标</span></span><br><span class="line">      <span class="keyword">if</span> (disabled) &#123;</span><br><span class="line">        <span class="title function_">mount</span>(container, mainAnchor)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target) &#123;</span><br><span class="line">        <span class="title function_">mount</span>(target, targetAnchor)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// update content</span></span><br><span class="line">      <span class="comment">// 更新逻辑</span></span><br><span class="line">      n2.<span class="property">el</span> = n1.<span class="property">el</span></span><br><span class="line">      <span class="keyword">const</span> mainAnchor = (n2.<span class="property">anchor</span> = n1.<span class="property">anchor</span>)!</span><br><span class="line">      <span class="keyword">const</span> target = (n2.<span class="property">target</span> = n1.<span class="property">target</span>)!</span><br><span class="line">      <span class="keyword">const</span> targetAnchor = (n2.<span class="property">targetAnchor</span> = n1.<span class="property">targetAnchor</span>)!</span><br><span class="line">      <span class="keyword">const</span> wasDisabled = <span class="title function_">isTeleportDisabled</span>(n1.<span class="property">props</span>)</span><br><span class="line">      <span class="keyword">const</span> currentContainer = wasDisabled ? container : target</span><br><span class="line">      <span class="keyword">const</span> currentAnchor = wasDisabled ? mainAnchor : targetAnchor</span><br><span class="line">      isSVG = isSVG || <span class="title function_">isTargetSVG</span>(target)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (dynamicChildren) &#123;</span><br><span class="line">        <span class="comment">// fast path when the teleport happens to be a block root</span></span><br><span class="line">        <span class="title function_">patchBlockChildren</span>(</span><br><span class="line">          n1.<span class="property">dynamicChildren</span>!,</span><br><span class="line">          dynamicChildren,</span><br><span class="line">          currentContainer,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG,</span><br><span class="line">          slotScopeIds</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// even in block tree mode we need to make sure all root-level nodes</span></span><br><span class="line">        <span class="comment">// in the teleport inherit previous DOM references so that they can</span></span><br><span class="line">        <span class="comment">// be moved in future patches.</span></span><br><span class="line">        <span class="title function_">traverseStaticChildren</span>(n1, n2, <span class="literal">true</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!optimized) &#123;</span><br><span class="line">        <span class="title function_">patchChildren</span>(</span><br><span class="line">          n1,</span><br><span class="line">          n2,</span><br><span class="line">          currentContainer,</span><br><span class="line">          currentAnchor,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG,</span><br><span class="line">          slotScopeIds,</span><br><span class="line">          <span class="literal">false</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (disabled) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!wasDisabled) &#123;</span><br><span class="line">          <span class="comment">// enabled -&gt; disabled</span></span><br><span class="line">          <span class="comment">// move into main container</span></span><br><span class="line">          <span class="comment">// 如果新节点disabled为true，旧节点disabled为false，就把子节点移回原位</span></span><br><span class="line">          <span class="title function_">moveTeleport</span>(</span><br><span class="line">            n2,</span><br><span class="line">            container,</span><br><span class="line">            mainAnchor,</span><br><span class="line">            internals,</span><br><span class="line">            <span class="title class_">TeleportMoveTypes</span>.<span class="property">TOGGLE</span></span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// target changed</span></span><br><span class="line">        <span class="keyword">if</span> ((n2.<span class="property">props</span> &amp;&amp; n2.<span class="property">props</span>.<span class="property">to</span>) !== (n1.<span class="property">props</span> &amp;&amp; n1.<span class="property">props</span>.<span class="property">to</span>)) &#123;</span><br><span class="line">          <span class="keyword">const</span> nextTarget = (n2.<span class="property">target</span> = <span class="title function_">resolveTarget</span>(</span><br><span class="line">            n2.<span class="property">props</span>,</span><br><span class="line">            querySelector</span><br><span class="line">          ))</span><br><span class="line">          <span class="keyword">if</span> (nextTarget) &#123;</span><br><span class="line">            <span class="title function_">moveTeleport</span>(</span><br><span class="line">              n2,</span><br><span class="line">              nextTarget,</span><br><span class="line">              <span class="literal">null</span>,</span><br><span class="line">              internals,</span><br><span class="line">              <span class="title class_">TeleportMoveTypes</span>.<span class="property">TARGET_CHANGE</span></span><br><span class="line">            )</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">            <span class="title function_">warn</span>(</span><br><span class="line">              <span class="string">&#x27;Invalid Teleport target on update:&#x27;</span>,</span><br><span class="line">              target,</span><br><span class="line">              <span class="string">`(<span class="subst">$&#123;<span class="keyword">typeof</span> target&#125;</span>)`</span></span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (wasDisabled) &#123;</span><br><span class="line">          <span class="comment">// disabled -&gt; enabled</span></span><br><span class="line">          <span class="comment">// move into teleport target</span></span><br><span class="line">          <span class="comment">// 如果新节点disabled为false，旧节点disabled为true，就把子节点移到目标元素</span></span><br><span class="line">          <span class="title function_">moveTeleport</span>(</span><br><span class="line">            n2,</span><br><span class="line">            target,</span><br><span class="line">            targetAnchor,</span><br><span class="line">            internals,</span><br><span class="line">            <span class="title class_">TeleportMoveTypes</span>.<span class="property">TOGGLE</span></span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">updateCssVars</span>(n2)</span><br><span class="line">  &#125;,</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 删除</span></span><br><span class="line">  <span class="title function_">remove</span>(<span class="params"></span></span><br><span class="line"><span class="params">    vnode: VNode,</span></span><br><span class="line"><span class="params">    parentComponent: ComponentInternalInstance | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    parentSuspense: SuspenseBoundary | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    optimized: <span class="built_in">boolean</span>,</span></span><br><span class="line"><span class="params">    &#123; um: unmount, o: &#123; remove: hostRemove &#125; &#125;: RendererInternals,</span></span><br><span class="line"><span class="params">    doRemove: <span class="built_in">Boolean</span></span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; shapeFlag, children, anchor, targetAnchor, target, props &#125; = vnode</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (target) &#123;</span><br><span class="line">      <span class="title function_">hostRemove</span>(targetAnchor!)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// an unmounted teleport should always remove its children if not disabled</span></span><br><span class="line">    <span class="keyword">if</span> (doRemove || !<span class="title function_">isTeleportDisabled</span>(props)) &#123;</span><br><span class="line">      <span class="title function_">hostRemove</span>(anchor!)</span><br><span class="line">      <span class="keyword">if</span> (shapeFlag &amp; <span class="title class_">ShapeFlags</span>.<span class="property">ARRAY_CHILDREN</span>) &#123;</span><br><span class="line">        <span class="comment">// 遍历teleport子节点，用unmount方法移除</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; (children <span class="keyword">as</span> <span class="title class_">VNode</span>[]).<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">const</span> child = (children <span class="keyword">as</span> <span class="title class_">VNode</span>[])[i]</span><br><span class="line">          <span class="title function_">unmount</span>(</span><br><span class="line">            child,</span><br><span class="line">            parentComponent,</span><br><span class="line">            parentSuspense,</span><br><span class="line">            <span class="literal">true</span>,</span><br><span class="line">            !!child.<span class="property">dynamicChildren</span></span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">move</span>: moveTeleport,</span><br><span class="line">  <span class="attr">hydrate</span>: hydrateTeleport</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js底层原理</title>
    <url>/web/study/vue/2.nodejs%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<p>图片全部搬运自<a href="https://xiaoman.blog.csdn.net/article/details/122769982">学习Vue3 第二章（配置环境）</a><del>自己懒得做图了</del>。</p>
<h1 id="Node-js的构成"><a href="#Node-js的构成" class="headerlink" title="Node.js的构成"></a>Node.js的构成</h1><p>Node.js主要由V8、Libuv和第三方库组成。</p>
<ul>
<li>Libuv：跨平台异步IO库（处理事件循环），除了IO功能还提供线程、进程、信号、定时器、进程间通信、线程池等功能。</li>
<li>第三方库<ul>
<li>异步DNS解析（cares）</li>
<li>HTTP解析器（旧版：http_parser；新版：llhttp）</li>
<li>HTTP2解析器（nghttp2）</li>
<li>解压压缩库（zlib）</li>
<li>加密解密库（openssl）</li>
<li>等等等等</li>
</ul>
</li>
<li>V8：实现JS解析（把js编译成机器码）、执行和自定义拓展</li>
</ul>
<p><img src="https://image.cheriko.fun/post/202305012242595.png"></p>
<p>从上到下分为三层：</p>
<ul>
<li>应用层：Node.js API各种模块，基于Libuv，因为可能涉及IO流操作</li>
<li>桥梁层：与底层C或C++通信</li>
<li>底层（C++或C）：处理底层机制</li>
</ul>
<h1 id="Libuv"><a href="#Libuv" class="headerlink" title="Libuv"></a>Libuv</h1><p><img src="https://image.cheriko.fun/post/202305012253451.png"></p>
<ul>
<li><p>loop参数：事件循环结构的结构体</p>
</li>
<li><p>uv_loop_alive：用于注册loop，判断loop里有无任务（是否还有活动），有就开始循环，没有就退出</p>
<blockquote>
<p>loop还在活动的情况：</p>
<ol>
<li>有被引用的活动句柄或活动请求</li>
<li>有正在关闭的句柄</li>
</ol>
</blockquote>
</li>
<li><p>uv_update_time：执行setTimeOut（过段时间后执行回调）</p>
</li>
<li><p>uv_run_timers：执行setInterval（每隔一段时间都执行回调）</p>
<p><img src="https://image.cheriko.fun/post/202305012303489.png"></p>
<ul>
<li>数据结构：链表+二叉堆</li>
<li>把最快过期的节点放到上面，判断是否过期<ul>
<li>如果过期就执行回调</li>
<li>如果没有过期，查看repeat，区分setTimeOut和setInterval<ul>
<li>如果是setTimeOut，任务过期后就结束了</li>
<li>如果是setInterval，进行重复执行</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>uv_run_pending：处理IO流的回调</p>
</li>
<li><p>uv_run_idle&amp;uv_run_prepare：处理其他各种队列</p>
</li>
<li><p>uv_io_poll：处理网络相关</p>
</li>
<li><p>uv_run_closing_handles：结束，关闭服务器</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>keep-alive缓存组件</title>
    <url>/web/study/vue/20.keep-alive%E7%BC%93%E5%AD%98%E7%BB%84%E4%BB%B6.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h1><p>有时程序员不希望组件被重新渲染影响使用体验，或出于性能考虑，避免多次重复渲染降低性能，而是希望组件被缓存下来，维持状态。</p>
<p>此时可以使用keep-alive，开启keep-alive后组件的生命周期变为：</p>
<ol>
<li>初次进入时：onMounted→onActivated</li>
<li>退出是：deactivated</li>
<li>再次进入：只触发onActivated</li>
</ol>
<p>所以在keep-alive组件中使用钩子函数时，只执行一次的逻辑放在onMounted中，每次进入组件都要执行的方法放在onActivated中。</p>
<p>A.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-card&gt;</span><br><span class="line">    &lt;h1&gt;我是A组件&lt;/h1&gt;</span><br><span class="line">    &lt;el-form :model=&quot;form&quot; label-width=&quot;120px&quot;&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;Activity name&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.name&quot; /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;Activity zone&quot;&gt;</span><br><span class="line">        &lt;el-select v-model=&quot;form.region&quot; placeholder=&quot;please select your zone&quot;&gt;</span><br><span class="line">          &lt;el-option label=&quot;Zone one&quot; value=&quot;shanghai&quot; /&gt;</span><br><span class="line">          &lt;el-option label=&quot;Zone two&quot; value=&quot;beijing&quot; /&gt;</span><br><span class="line">        &lt;/el-select&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;Activity time&quot;&gt;</span><br><span class="line">        &lt;el-col :span=&quot;11&quot;&gt;</span><br><span class="line">          &lt;el-date-picker v-model=&quot;form.date1&quot; type=&quot;date&quot; placeholder=&quot;Pick a date&quot; style=&quot;width: 100%&quot; /&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">        &lt;el-col :span=&quot;2&quot; class=&quot;text-center&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;text-gray-500&quot;&gt;-&lt;/span&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">        &lt;el-col :span=&quot;11&quot;&gt;</span><br><span class="line">          &lt;el-time-picker v-model=&quot;form.date2&quot; placeholder=&quot;Pick a time&quot; style=&quot;width: 100%&quot; /&gt;</span><br><span class="line">        &lt;/el-col&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;Instant delivery&quot;&gt;</span><br><span class="line">        &lt;el-switch v-model=&quot;form.delivery&quot; /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;Activity type&quot;&gt;</span><br><span class="line">        &lt;el-checkbox-group v-model=&quot;form.type&quot;&gt;</span><br><span class="line">          &lt;el-checkbox label=&quot;Online activities&quot; name=&quot;type&quot; /&gt;</span><br><span class="line">          &lt;el-checkbox label=&quot;Promotion activities&quot; name=&quot;type&quot; /&gt;</span><br><span class="line">          &lt;el-checkbox label=&quot;Offline activities&quot; name=&quot;type&quot; /&gt;</span><br><span class="line">          &lt;el-checkbox label=&quot;Simple brand exposure&quot; name=&quot;type&quot; /&gt;</span><br><span class="line">        &lt;/el-checkbox-group&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;Resources&quot;&gt;</span><br><span class="line">        &lt;el-radio-group v-model=&quot;form.resource&quot;&gt;</span><br><span class="line">          &lt;el-radio label=&quot;Sponsor&quot; /&gt;</span><br><span class="line">          &lt;el-radio label=&quot;Venue&quot; /&gt;</span><br><span class="line">        &lt;/el-radio-group&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item label=&quot;Activity form&quot;&gt;</span><br><span class="line">        &lt;el-input v-model=&quot;form.desc&quot; type=&quot;textarea&quot; /&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">      &lt;el-form-item&gt;</span><br><span class="line">        &lt;el-button type=&quot;primary&quot; @click=&quot;onSubmit&quot;&gt;Create&lt;/el-button&gt;</span><br><span class="line">        &lt;el-button&gt;Cancel&lt;/el-button&gt;</span><br><span class="line">      &lt;/el-form-item&gt;</span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">  &lt;/el-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; onMounted, onUnmounted, onActivated, onDeactivated, reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const form = reactive(&#123;</span><br><span class="line">  name: &#x27;&#x27;,</span><br><span class="line">  region: &#x27;&#x27;,</span><br><span class="line">  date1: &#x27;&#x27;,</span><br><span class="line">  date2: &#x27;&#x27;,</span><br><span class="line">  delivery: false,</span><br><span class="line">  type: [],</span><br><span class="line">  resource: &#x27;&#x27;,</span><br><span class="line">  desc: &#x27;&#x27;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const onSubmit = () =&gt; &#123;</span><br><span class="line">  console.log(&#x27;submit!&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  console.log(&quot;mounted&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">onActivated(()=&gt; &#123;</span><br><span class="line">  console.log(&quot;activated, keep-alive初始化&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">onDeactivated(()=&gt; &#123;</span><br><span class="line">  console.log(&quot;deactivated, keep-alive卸载&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">onUnmounted(()=&gt; &#123;</span><br><span class="line">  console.log(&quot;unmounted&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>B.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-card&gt;</span><br><span class="line">      &lt;h1&gt;我是B组件&lt;/h1&gt;</span><br><span class="line">      &lt;el-transfer v-model=&quot;value&quot; :data=&quot;data&quot; /&gt;</span><br><span class="line">    &lt;/el-card&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">interface Option &#123;</span><br><span class="line">  key: number</span><br><span class="line">  label: string</span><br><span class="line">  disabled: boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const generateData = () =&gt; &#123;</span><br><span class="line">  const data: Option[] = []</span><br><span class="line">  for (let i = 1; i &lt;= 15; i++) &#123;</span><br><span class="line">    data.push(&#123;</span><br><span class="line">      key: i,</span><br><span class="line">      label: `Option $&#123;i&#125;`,</span><br><span class="line">      disabled: i % 4 === 0,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  return data</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const data = ref&lt;Option[]&gt;(generateData())</span><br><span class="line">const value = ref([])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-button type=&quot;primary&quot; @click=&quot;flag = !flag&quot;&gt;切换组件&lt;/el-button&gt;</span><br><span class="line">  &lt;!-- keep-alive可以为组件做缓存，并保存状态 --&gt;</span><br><span class="line">  &lt;!-- 如果只想缓存部分组件，使用include，传入一个需缓存组件名的数组 --&gt;</span><br><span class="line">  &lt;!-- 如果不想缓存某些组件，使用exclude，传入一个不缓存组件名的数组 --&gt;</span><br><span class="line">  &lt;!-- 如果需要指定最大缓存量，使用max --&gt;</span><br><span class="line">  &lt;keep-alive :include=&quot;[&#x27;A&#x27;]&quot; :exclude=&quot;[&#x27;B&#x27;]&quot; :max=&quot;10&quot;&gt;</span><br><span class="line">    &lt;A v-if=&quot;flag&quot;&gt;&lt;/A&gt;</span><br><span class="line">    &lt;B v-else&gt;&lt;/B&gt;</span><br><span class="line">  &lt;/keep-alive&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">import A from &quot;@/components/A.vue&quot;</span><br><span class="line">import B from &quot;@/components/B.vue&quot;</span><br><span class="line"></span><br><span class="line">const flag = ref&lt;boolean&gt;(true)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>在Vue源码（<code>/package/runtime-core/src/components/KeepAlive.ts</code>）中可以看到keep-alive的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// keep-alive的缓存机制</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">cache</span>: <span class="title class_">Cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="attr">keys</span>: <span class="title class_">Keys</span> = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">KeepAliveImpl</span>: <span class="title class_">ComponentOptions</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">`KeepAlive`</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Marker for special handling inside the renderer. We are not using a ===</span></span><br><span class="line">  <span class="comment">// check directly on KeepAlive in the renderer, because importing it directly</span></span><br><span class="line">  <span class="comment">// would prevent it from being tree-shaken.</span></span><br><span class="line">  <span class="attr">__isKeepAlive</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">include</span>: [<span class="title class_">String</span>, <span class="title class_">RegExp</span>, <span class="title class_">Array</span>],	<span class="comment">// 只有名称匹配的组件会被缓存</span></span><br><span class="line">    <span class="attr">exclude</span>: [<span class="title class_">String</span>, <span class="title class_">RegExp</span>, <span class="title class_">Array</span>],	<span class="comment">// 任何名称匹配的组件都不被缓存</span></span><br><span class="line">    <span class="attr">max</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>]		<span class="comment">// 最多可以缓存多少组件实例</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props: KeepAliveProps, &#123; slots &#125;: SetupContext</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> instance = <span class="title function_">getCurrentInstance</span>()!</span><br><span class="line">    <span class="comment">// KeepAlive communicates with the instantiated renderer via the</span></span><br><span class="line">    <span class="comment">// ctx where the renderer passes in its internals,</span></span><br><span class="line">    <span class="comment">// and the KeepAlive instance exposes activate/deactivate implementations.</span></span><br><span class="line">    <span class="comment">// The whole point of this is to avoid importing KeepAlive directly in the</span></span><br><span class="line">    <span class="comment">// renderer to facilitate tree-shaking.</span></span><br><span class="line">    <span class="keyword">const</span> sharedContext = instance.<span class="property">ctx</span> <span class="keyword">as</span> <span class="title class_">KeepAliveContext</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// if the internal renderer is not registered, it indicates that this is server-side rendering,</span></span><br><span class="line">    <span class="comment">// for KeepAlive, we just need to render its children</span></span><br><span class="line">    <span class="keyword">if</span> (__SSR__ &amp;&amp; !sharedContext.<span class="property">renderer</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> children = slots.<span class="property">default</span> &amp;&amp; slots.<span class="title function_">default</span>()</span><br><span class="line">        <span class="keyword">return</span> children &amp;&amp; children.<span class="property">length</span> === <span class="number">1</span> ? children[<span class="number">0</span>] : children</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">cache</span>: <span class="title class_">Cache</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">keys</span>: <span class="title class_">Keys</span> = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">current</span>: <span class="title class_">VNode</span> | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__DEV__ || __FEATURE_PROD_DEVTOOLS__) &#123;</span><br><span class="line">      ;(instance <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">__v_cache</span> = cache</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> parentSuspense = instance.<span class="property">suspense</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      <span class="attr">renderer</span>: &#123;</span><br><span class="line">        <span class="attr">p</span>: patch,</span><br><span class="line">        <span class="attr">m</span>: move,</span><br><span class="line">        <span class="attr">um</span>: _unmount,</span><br><span class="line">        <span class="attr">o</span>: &#123; createElement &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; = sharedContext</span><br><span class="line">    <span class="comment">// 隐藏容器</span></span><br><span class="line">    <span class="keyword">const</span> storageContainer = <span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在实例上注册activate和deactivated两个钩子</span></span><br><span class="line">    sharedContext.<span class="property">activate</span> = <span class="function">(<span class="params">vnode, container, anchor, isSVG, optimized</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> instance = vnode.<span class="property">component</span>!</span><br><span class="line">      <span class="title function_">move</span>(vnode, container, anchor, <span class="title class_">MoveType</span>.<span class="property">ENTER</span>, parentSuspense)</span><br><span class="line">      <span class="comment">// in case props have changed</span></span><br><span class="line">      <span class="comment">// props可能发生变化，所以patch</span></span><br><span class="line">      <span class="title function_">patch</span>(</span><br><span class="line">        instance.<span class="property">vnode</span>,</span><br><span class="line">        vnode,</span><br><span class="line">        container,</span><br><span class="line">        anchor,</span><br><span class="line">        instance,</span><br><span class="line">        parentSuspense,</span><br><span class="line">        isSVG,</span><br><span class="line">        vnode.<span class="property">slotScopeIds</span>,</span><br><span class="line">        optimized</span><br><span class="line">      )</span><br><span class="line">      <span class="comment">// 异步队列，patch完成后，执行子节点的activate和deactivated</span></span><br><span class="line">      <span class="title function_">queuePostRenderEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        instance.<span class="property">isDeactivated</span> = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">if</span> (instance.<span class="property">a</span>) &#123;</span><br><span class="line">          <span class="title function_">invokeArrayFns</span>(instance.<span class="property">a</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> vnodeHook = vnode.<span class="property">props</span> &amp;&amp; vnode.<span class="property">props</span>.<span class="property">onVnodeMounted</span></span><br><span class="line">        <span class="keyword">if</span> (vnodeHook) &#123;</span><br><span class="line">          <span class="title function_">invokeVNodeHook</span>(vnodeHook, instance.<span class="property">parent</span>, vnode)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, parentSuspense)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (__DEV__ || __FEATURE_PROD_DEVTOOLS__) &#123;</span><br><span class="line">        <span class="comment">// Update components tree</span></span><br><span class="line">        <span class="title function_">devtoolsComponentAdded</span>(instance)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sharedContext.<span class="property">deactivate</span> = <span class="function">(<span class="params">vnode: VNode</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> instance = vnode.<span class="property">component</span>!</span><br><span class="line">      <span class="comment">// 将组件移动到隐藏容器中</span></span><br><span class="line">      <span class="comment">// 并非真正卸载组件，而是调用move方法，将组件搬运到一个隐藏容器中</span></span><br><span class="line">      <span class="title function_">move</span>(vnode, storageContainer, <span class="literal">null</span>, <span class="title class_">MoveType</span>.<span class="property">LEAVE</span>, parentSuspense)</span><br><span class="line">      <span class="title function_">queuePostRenderEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance.<span class="property">da</span>) &#123;</span><br><span class="line">          <span class="title function_">invokeArrayFns</span>(instance.<span class="property">da</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> vnodeHook = vnode.<span class="property">props</span> &amp;&amp; vnode.<span class="property">props</span>.<span class="property">onVnodeUnmounted</span></span><br><span class="line">        <span class="keyword">if</span> (vnodeHook) &#123;</span><br><span class="line">          <span class="title function_">invokeVNodeHook</span>(vnodeHook, instance.<span class="property">parent</span>, vnode)</span><br><span class="line">        &#125;</span><br><span class="line">        instance.<span class="property">isDeactivated</span> = <span class="literal">true</span></span><br><span class="line">      &#125;, parentSuspense)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (__DEV__ || __FEATURE_PROD_DEVTOOLS__) &#123;</span><br><span class="line">        <span class="comment">// Update components tree</span></span><br><span class="line">        <span class="title function_">devtoolsComponentAdded</span>(instance)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">unmount</span>(<span class="params">vnode: VNode</span>) &#123;</span><br><span class="line">      <span class="comment">// reset the shapeFlag so it can be properly unmounted</span></span><br><span class="line">      <span class="title function_">resetShapeFlag</span>(vnode)</span><br><span class="line">      <span class="title function_">_unmount</span>(vnode, instance, parentSuspense, <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">pruneCache</span>(<span class="params">filter?: (name: <span class="built_in">string</span>) =&gt; <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">      cache.<span class="title function_">forEach</span>(<span class="function">(<span class="params">vnode, key</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> name = <span class="title function_">getComponentName</span>(vnode.<span class="property">type</span> <span class="keyword">as</span> <span class="title class_">ConcreteComponent</span>)</span><br><span class="line">        <span class="keyword">if</span> (name &amp;&amp; (!filter || !<span class="title function_">filter</span>(name))) &#123;</span><br><span class="line">          <span class="title function_">pruneCacheEntry</span>(key)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">pruneCacheEntry</span>(<span class="params">key: CacheKey</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> cached = cache.<span class="title function_">get</span>(key) <span class="keyword">as</span> <span class="title class_">VNode</span></span><br><span class="line">      <span class="keyword">if</span> (!current || !<span class="title function_">isSameVNodeType</span>(cached, current)) &#123;</span><br><span class="line">        <span class="title function_">unmount</span>(cached)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current) &#123;</span><br><span class="line">        <span class="comment">// current active instance should no longer be kept-alive.</span></span><br><span class="line">        <span class="comment">// we can&#x27;t unmount it now but it might be later, so reset its flag now.</span></span><br><span class="line">        <span class="title function_">resetShapeFlag</span>(current)</span><br><span class="line">      &#125;</span><br><span class="line">      cache.<span class="title function_">delete</span>(key)</span><br><span class="line">      keys.<span class="title function_">delete</span>(key)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// prune cache on include/exclude prop change</span></span><br><span class="line">    <span class="title function_">watch</span>(</span><br><span class="line">      <span class="function">() =&gt;</span> [props.<span class="property">include</span>, props.<span class="property">exclude</span>],</span><br><span class="line">      <span class="function">(<span class="params">[include, exclude]</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// props是响应式的，所以需要监听它的值，监听到变化时，这个操作再做一遍</span></span><br><span class="line">        include &amp;&amp; <span class="title function_">pruneCache</span>(<span class="function"><span class="params">name</span> =&gt;</span> <span class="title function_">matches</span>(include, name))</span><br><span class="line">        exclude &amp;&amp; <span class="title function_">pruneCache</span>(<span class="function"><span class="params">name</span> =&gt;</span> !<span class="title function_">matches</span>(exclude, name))</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// prune post-render after `current` has been updated</span></span><br><span class="line">      &#123; <span class="attr">flush</span>: <span class="string">&#x27;post&#x27;</span>, <span class="attr">deep</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// cache sub tree after render</span></span><br><span class="line">    <span class="comment">// 挂载完后才会对pendingCacheKey进行赋值</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">pendingCacheKey</span>: <span class="title class_">CacheKey</span> | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 缓存函数</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">cacheSubtree</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// fix #1621, the pendingCacheKey could be 0</span></span><br><span class="line">      <span class="keyword">if</span> (pendingCacheKey != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// pendingCacheKey不为null时，把要缓存的组件存到缓存map里（第一次不执行）</span></span><br><span class="line">        cache.<span class="title function_">set</span>(pendingCacheKey, <span class="title function_">getInnerChild</span>(instance.<span class="property">subTree</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 首先在组件的onMounted或onUpdated钩子中设置缓存</span></span><br><span class="line">    <span class="comment">// 因为pendingCacheKey是在keep-alive的render函数中赋值，所以首次不缓存</span></span><br><span class="line">    <span class="comment">// 当render完成后，pendingCacheKey就会赋值</span></span><br><span class="line">    <span class="title function_">onMounted</span>(cacheSubtree)</span><br><span class="line">    <span class="title function_">onUpdated</span>(cacheSubtree)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      cache.<span class="title function_">forEach</span>(<span class="function"><span class="params">cached</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; subTree, suspense &#125; = instance</span><br><span class="line">        <span class="keyword">const</span> vnode = <span class="title function_">getInnerChild</span>(subTree)</span><br><span class="line">        <span class="keyword">if</span> (cached.<span class="property">type</span> === vnode.<span class="property">type</span> &amp;&amp; cached.<span class="property">key</span> === vnode.<span class="property">key</span>) &#123;</span><br><span class="line">          <span class="comment">// current instance will be unmounted as part of keep-alive&#x27;s unmount</span></span><br><span class="line">          <span class="title function_">resetShapeFlag</span>(vnode)</span><br><span class="line">          <span class="comment">// but invoke its deactivated hook here</span></span><br><span class="line">          <span class="keyword">const</span> da = vnode.<span class="property">component</span>!.<span class="property">da</span></span><br><span class="line">          da &amp;&amp; <span class="title function_">queuePostRenderEffect</span>(da, suspense)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">unmount</span>(cached)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回一个渲染函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      pendingCacheKey = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!slots.<span class="property">default</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 读取插槽的子节点，只渲染单个组件，如果多了会报错（所以不能用v-show）</span></span><br><span class="line">      <span class="keyword">const</span> children = slots.<span class="title function_">default</span>()</span><br><span class="line">      <span class="keyword">const</span> rawVNode = children[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">if</span> (children.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">          <span class="title function_">warn</span>(<span class="string">`KeepAlive should contain exactly one component child.`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        current = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">return</span> children</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">        !<span class="title function_">isVNode</span>(rawVNode) ||</span><br><span class="line">        (!(rawVNode.<span class="property">shapeFlag</span> &amp; <span class="title class_">ShapeFlags</span>.<span class="property">STATEFUL_COMPONENT</span>) &amp;&amp;</span><br><span class="line">          !(rawVNode.<span class="property">shapeFlag</span> &amp; <span class="title class_">ShapeFlags</span>.<span class="property">SUSPENSE</span>))</span><br><span class="line">      ) &#123;</span><br><span class="line">        current = <span class="literal">null</span></span><br><span class="line">        <span class="comment">// 最后返回的还是组件本身，keep-alive只是一个抽象组件，本身不会被渲染</span></span><br><span class="line">        <span class="keyword">return</span> rawVNode</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> vnode = <span class="title function_">getInnerChild</span>(rawVNode)</span><br><span class="line">      <span class="keyword">const</span> comp = vnode.<span class="property">type</span> <span class="keyword">as</span> <span class="title class_">ConcreteComponent</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// for async components, name check should be based in its loaded</span></span><br><span class="line">      <span class="comment">// inner component if available</span></span><br><span class="line">      <span class="keyword">const</span> name = <span class="title function_">getComponentName</span>(</span><br><span class="line">        <span class="title function_">isAsyncWrapper</span>(vnode)</span><br><span class="line">          ? (vnode.<span class="property">type</span> <span class="keyword">as</span> <span class="title class_">ComponentOptions</span>).<span class="property">__asyncResolved</span> || &#123;&#125;</span><br><span class="line">          : comp</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> &#123; include, exclude, max &#125; = props</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果include不包含子组件名称，或exclude包含组件名称，就不缓存，直接返回</span></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        (include &amp;&amp; (!name || !<span class="title function_">matches</span>(include, name))) ||</span><br><span class="line">        (exclude &amp;&amp; name &amp;&amp; <span class="title function_">matches</span>(exclude, name))</span><br><span class="line">      ) &#123;</span><br><span class="line">        current = vnode</span><br><span class="line">        <span class="keyword">return</span> rawVNode</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> key = vnode.<span class="property">key</span> == <span class="literal">null</span> ? comp : vnode.<span class="property">key</span></span><br><span class="line">      <span class="keyword">const</span> cachedVNode = cache.<span class="title function_">get</span>(key)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// clone vnode if it&#x27;s reused because we are going to mutate it</span></span><br><span class="line">      <span class="keyword">if</span> (vnode.<span class="property">el</span>) &#123;</span><br><span class="line">        vnode = <span class="title function_">cloneVNode</span>(vnode)</span><br><span class="line">        <span class="keyword">if</span> (rawVNode.<span class="property">shapeFlag</span> &amp; <span class="title class_">ShapeFlags</span>.<span class="property">SUSPENSE</span>) &#123;</span><br><span class="line">          rawVNode.<span class="property">ssContent</span> = vnode</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// #1513 it&#x27;s possible for the returned vnode to be cloned due to attr</span></span><br><span class="line">      <span class="comment">// fallthrough or scopeId, so the vnode here may not be the final vnode</span></span><br><span class="line">      <span class="comment">// that is mounted. Instead of caching it directly, we store the pending</span></span><br><span class="line">      <span class="comment">// key and cache `instance.subTree` (the normalized vnode) in</span></span><br><span class="line">      <span class="comment">// beforeMount/beforeUpdate hooks.</span></span><br><span class="line">      <span class="comment">// Vnode的key作为缓存的key</span></span><br><span class="line">      pendingCacheKey = key</span><br><span class="line"></span><br><span class="line">      <span class="comment">// KeepAlive组件返回的函数中根据vnode对象的key去缓存中查找是否有已缓存的组件</span></span><br><span class="line">      <span class="comment">// 如果有缓存，继承组件实例，将用于描述组件的vnode对象标记为COMPONENT_KEPT_ALIVE</span></span><br><span class="line">      <span class="comment">// 这样渲染器就不会重新创建新的组件实例</span></span><br><span class="line">      <span class="comment">// 如果缓存不存在，则将vnode对象的key添加到keys集合中</span></span><br><span class="line">      <span class="keyword">if</span> (cachedVNode) &#123;</span><br><span class="line">        <span class="comment">// copy over mounted state</span></span><br><span class="line">        <span class="comment">// 已被缓存</span></span><br><span class="line">        vnode.<span class="property">el</span> = cachedVNode.<span class="property">el</span></span><br><span class="line">        vnode.<span class="property">component</span> = cachedVNode.<span class="property">component</span></span><br><span class="line">        <span class="comment">// 不用创建组件实例，继承缓存的组件即可</span></span><br><span class="line">        <span class="keyword">if</span> (vnode.<span class="property">transition</span>) &#123;</span><br><span class="line">          <span class="comment">// recursively update transition hooks on subTree</span></span><br><span class="line">          <span class="comment">// 如果组件上有动画，处理动画</span></span><br><span class="line">          <span class="title function_">setTransitionHooks</span>(vnode, vnode.<span class="property">transition</span>!)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// avoid vnode being mounted as fresh</span></span><br><span class="line">        <span class="comment">// 标记vnode不会重新渲染</span></span><br><span class="line">        vnode.<span class="property">shapeFlag</span> |= <span class="title class_">ShapeFlags</span>.<span class="property">COMPONENT_KEPT_ALIVE</span></span><br><span class="line">        <span class="comment">// make this key the freshest</span></span><br><span class="line">        <span class="comment">// key保持最新的</span></span><br><span class="line">        keys.<span class="title function_">delete</span>(key)</span><br><span class="line">        keys.<span class="title function_">add</span>(key)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 将vnode的key添加到keys中，keys集合用户维护缓存组件的key</span></span><br><span class="line">        keys.<span class="title function_">add</span>(key)</span><br><span class="line">        <span class="comment">// prune oldest entry</span></span><br><span class="line">        <span class="comment">// LRU算法（最近最少使用页面置换算法），把不活跃的key剔除</span></span><br><span class="line">        <span class="keyword">if</span> (max &amp;&amp; keys.<span class="property">size</span> &gt; <span class="built_in">parseInt</span>(max <span class="keyword">as</span> <span class="built_in">string</span>, <span class="number">10</span>)) &#123;</span><br><span class="line">          <span class="title function_">pruneCacheEntry</span>(keys.<span class="title function_">values</span>().<span class="title function_">next</span>().<span class="property">value</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// avoid vnode being unmounted</span></span><br><span class="line">      vnode.<span class="property">shapeFlag</span> |= <span class="title class_">ShapeFlags</span>.<span class="property">COMPONENT_SHOULD_KEEP_ALIVE</span></span><br><span class="line"></span><br><span class="line">      current = vnode</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">isSuspense</span>(rawVNode.<span class="property">type</span>) ? rawVNode : vnode</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>transition-group过渡列表</title>
    <url>/web/study/vue/22.transition-group%E8%BF%87%E6%B8%A1%E5%88%97%E8%A1%A8.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="transition-group"><a href="#transition-group" class="headerlink" title="transition-group"></a>transition-group</h1><p>transition只能过渡单个节点，或多个但每次只渲染一个。不能同时渲染多个节点。</p>
<p>假设需要用v-for渲染一整个列表，这种场景就不能使用transition，需要使用transition-group。</p>
<p>transition-group组件的特点：</p>
<ul>
<li>默认不渲染一个包裹元素，但可以通过tag指定渲染一个包裹元素</li>
<li>过渡模式不可用，因为不再相互切换特有的元素</li>
<li>内部元素总是需要提供唯一的key值</li>
<li>CSS过渡的类将会应用到内部的元素重，而非这个组&#x2F;容器本身</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;list.push(list.length+1)&quot;&gt;ADD&lt;/button&gt; &lt;button @click=&quot;list.pop&quot;&gt;POP&lt;/button&gt;</span><br><span class="line">    &lt;div class=&quot;wraps&quot;&gt;</span><br><span class="line">      &lt;!-- 为tag属性赋值，渲染时会为内容加上对应的标签包裹，不写就没有 --&gt;</span><br><span class="line">      &lt;!-- 自定义类名属性、生命周期都和transition一样 --&gt;</span><br><span class="line">      &lt;transition-group </span><br><span class="line">        enter-active-class=&quot;animate__animated animate__bounceIn&quot;</span><br><span class="line">        leave-active-class=&quot;animate__animated animate__hinge&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;item&quot; v-for=&quot;(item, index) in list&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/transition-group&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive &#125; from &quot;vue&quot;</span><br><span class="line">import &quot;animate.css&quot;</span><br><span class="line"></span><br><span class="line">const list = reactive&lt;number[]&gt;([</span><br><span class="line">  1, 2, 3, 4, 5, 6</span><br><span class="line">])</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.wraps &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  .item &#123;</span><br><span class="line">    margin: 10px;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>如果给transition-grop加上tag值（例如<code>&lt;transition-group tag=&quot;section&quot;&gt;省略&lt;/transition-group&gt;</code>）：</p>
<p><img src="https://image.cheriko.fun/post/202305241147124.png" alt="加上了包裹元素section"></p>
<h1 id="列表的移动过渡"><a href="#列表的移动过渡" class="headerlink" title="列表的移动过渡"></a>列表的移动过渡</h1><p>除了进入和离开外，transition-group还可以使用v-move为定位的改变添加动画。</p>
<p>和transition的类名一样，可以使用name定义前缀，或使用move-class自定义使用的类名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;random&quot;&gt;random&lt;/button&gt;</span><br><span class="line">    &lt;transition-group move-class=&quot;move&quot; class=&quot;warps&quot; tag=&quot;div&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;item&quot; v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;&#123;&#123; item.number &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/transition-group&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">import _ from &quot;lodash&quot;</span><br><span class="line"></span><br><span class="line">// 使用new Array(81)会生成81项都为empty的数组</span><br><span class="line">// 这种方式就会生成81项都是undefined的数组</span><br><span class="line">const list = ref(Array.apply(null,&#123;length:81&#125; as number[]).map((_,index)=&gt;&#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    id:index,</span><br><span class="line">    number:(index%9)+1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">const random = ()=&gt; &#123;</span><br><span class="line">  list.value = _.shuffle(list.value)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.warps &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  width: calc(27px * 9);</span><br><span class="line">  .item &#123;</span><br><span class="line">    width: 25px;</span><br><span class="line">    height: 25px;</span><br><span class="line">    border: 1px solid #ccc;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.move &#123;</span><br><span class="line">  transition: all 0.5s ease;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="状态过渡"><a href="#状态过渡" class="headerlink" title="状态过渡"></a>状态过渡</h1><p>也可以给数字、SVG、背景颜色等添加过渡动画。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input v-model=&quot;num.current&quot; type=&quot;number&quot; step=&quot;20&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;&#123; num.tweenedNumber.toFixed(0) &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, watch &#125; from &quot;vue&quot;</span><br><span class="line">import gsap from &quot;gsap&quot;</span><br><span class="line"></span><br><span class="line">const num = reactive(&#123;</span><br><span class="line">  current:0,</span><br><span class="line">  tweenedNumber:0</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">watch(()=&gt; num.current, (newVal)=&gt; &#123;</span><br><span class="line">  gsap.to(num,&#123;</span><br><span class="line">    duration:1,</span><br><span class="line">    tweenedNumber:newVal</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>transition动画组件</title>
    <url>/web/study/vue/21.transition%E5%8A%A8%E7%94%BB%E7%BB%84%E4%BB%B6.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h1><p>transition组件可以给任何元素或组件添加进入&#x2F;离开的过渡，使用情形：</p>
<ul>
<li>条件渲染（v-if）</li>
<li>条件展示（v-show）</li>
<li>动态组件</li>
<li>组件根节点</li>
</ul>
<h1 id="类名"><a href="#类名" class="headerlink" title="类名"></a>类名</h1><h2 id="默认类名"><a href="#默认类名" class="headerlink" title="默认类名"></a>默认类名</h2><p>在进入&#x2F;离开的过渡中，会有6个class切换：</p>
<ol>
<li>v-enter-from：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除。</li>
<li>v-enter-active：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡&#x2F;动画完成之后移除。常用来定义进入过渡的过程时间，延迟和曲线函数。</li>
<li>v-enter-to：定义进入过渡的结束状态。在元素被插入之后下一帧生效 （与此同时v-enter-from被移除），在过渡&#x2F;动画完成之后移除。</li>
<li>v-leave-from：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除。</li>
<li>v-leave-active：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡&#x2F;动画完成之后移除。常用来定义离开过渡的过程时间，延迟和曲线函数。</li>
<li>v-leave-to：离开过渡的结束状态。在离开过渡被触发之后下一帧生效 （与此同时v-leave-from被移除），在过渡&#x2F;动画完成之后移除。</li>
</ol>
<p>为transition组件添加name属性，并在css中把上述类名的v替换成name属性值，再写入对应样式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;flag = !flag&quot;&gt;switch&lt;/button&gt;</span><br><span class="line">    &lt;transition name=&quot;fade&quot;&gt;</span><br><span class="line">      &lt;div v-if=&quot;flag&quot; class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">const flag = ref&lt;boolean&gt;(true)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line">// 进入前的状态</span><br><span class="line">.fade-enter-from &#123;</span><br><span class="line">  width: 0;</span><br><span class="line">  height: 0;</span><br><span class="line">  transform: rotate(360deg);</span><br><span class="line">&#125;</span><br><span class="line">// 进入时的过渡</span><br><span class="line">.fade-enter-active &#123;</span><br><span class="line">  transition: all 1s ease;</span><br><span class="line">&#125;</span><br><span class="line">// 进入结束的状态</span><br><span class="line">.fade-enter-to &#123;</span><br><span class="line">  // 最好和本身的样式保持一致</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">&#125;</span><br><span class="line">// 退出前的状态</span><br><span class="line">.fade-leave-from &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  transform: rotate(360deg);</span><br><span class="line">&#125;</span><br><span class="line">// 退出时的过渡</span><br><span class="line">.fade-leave-active &#123;</span><br><span class="line">  transition: all 1s ease;</span><br><span class="line">&#125;</span><br><span class="line">// 退出结束的状态</span><br><span class="line">.fade-leave-to &#123;</span><br><span class="line">  width: 0;</span><br><span class="line">  height: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="自定义类名"><a href="#自定义类名" class="headerlink" title="自定义类名"></a>自定义类名</h2><p>为transition传prop：</p>
<ul>
<li>enter-from-class</li>
<li>enter-active-class</li>
<li>enter-to-class</li>
<li>leave-from-class</li>
<li>leave-active-class</li>
<li>leave-to-class</li>
</ul>
<p>例如设enter-from-class为”abc”，就能通过类名abc规定对应的动画过程了。</p>
<p>这样做更方便样式的复用，或结合第三方类库使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;transition enter-from-class=&quot;abc&quot; name=&quot;fade&quot;&gt;</span><br><span class="line">  &lt;div v-if=&quot;flag&quot; class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/transition&gt;</span><br><span class="line"></span><br><span class="line">// 省略......</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">// 进入前的状态</span><br><span class="line">.abc &#123;</span><br><span class="line">  // 省略......</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="结合Animate-css"><a href="#结合Animate-css" class="headerlink" title="结合Animate.css"></a>结合Animate.css</h1><p>自定义类名结合Animate.css动画库使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;flag = !flag&quot;&gt;switch&lt;/button&gt;</span><br><span class="line">    &lt;!-- duration：动画执行时间 --&gt;</span><br><span class="line">    &lt;!-- 传入一个数字，则进入和离开都遵循此时间（例 :duration=&quot;500&quot;） --&gt;</span><br><span class="line">    &lt;!-- 传入一个对象，则可对进入和离开单独定义（例 :duration=&quot;&#123;enter:250,leave:500&#125;&quot;） --&gt;</span><br><span class="line">    &lt;transition </span><br><span class="line">      leave-active-class=&quot;animate__animated animate__fadeOut&quot; </span><br><span class="line">      enter-active-class=&quot;animate__animated animate__fadeIn&quot;</span><br><span class="line">      :duration=&quot;&#123;enter:250,leave:500&#125;&quot;&gt;</span><br><span class="line">      &lt;div v-if=&quot;flag&quot; class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">import &quot;animate.css&quot;</span><br><span class="line"></span><br><span class="line">const flag = ref&lt;boolean&gt;(true)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>transition有八个生命周期：</p>
<ul>
<li><code>@before-enter=&quot;beforeEnter&quot;</code>：对应enter-from</li>
<li><code>@enter=&quot;enter&quot;</code>：对应enter-active</li>
<li><code>@after-enter=&quot;afterEnter&quot;</code>：对应enter-to</li>
<li><code>@enter-cancelled=&quot;enterCancelled&quot;</code>：显示过度打断</li>
<li><code>@before-leave=&quot;beforeLeave&quot;</code>：对应leave-from</li>
<li><code>@leave=&quot;leave&quot;</code>：对应enter-active</li>
<li><code>@after-leave=&quot;afterLeave&quot;</code>：对应leave-to</li>
<li><code>@leave-cancelled=&quot;leaveCancelled&quot;</code>：离开过度打断</li>
</ul>
<p>因为有一些复杂的过渡效果无法被CSS实现，必须动用JS，所以Vue提供了transition的生命周期。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;flag = !flag&quot;&gt;switch&lt;/button&gt;</span><br><span class="line">    &lt;!-- duration：动画执行时间 --&gt;</span><br><span class="line">    &lt;!-- 传入一个数字，则进入和离开都遵循此时间（例 :duration=&quot;500&quot;） --&gt;</span><br><span class="line">    &lt;!-- 传入一个对象，则可对进入和离开单独定义（例 :duration=&quot;&#123;enter:250,leave:500&#125;&quot;） --&gt;</span><br><span class="line">    &lt;transition </span><br><span class="line">      @before-enter=&quot;EnterFrom&quot;</span><br><span class="line">      @enter=&quot;EnterActive&quot;</span><br><span class="line">      @after-enter=&quot;EnterTo&quot;</span><br><span class="line">      @enter-cancelled=&quot;EnterCancel&quot;</span><br><span class="line">      @before-leave=&quot;LeaveFrom&quot;</span><br><span class="line">      @leave=&quot;LeaveActive&quot;</span><br><span class="line">      @after-leave=&quot;LeaveTo&quot;</span><br><span class="line">      @@leave-cancelled=&quot;LeaveCancel&quot;&gt;</span><br><span class="line">      &lt;div v-if=&quot;flag&quot; class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">import &quot;animate.css&quot;</span><br><span class="line"></span><br><span class="line">const flag = ref&lt;boolean&gt;(true)</span><br><span class="line"></span><br><span class="line">// @param el 被过渡的元素</span><br><span class="line">const EnterFrom = (el: Element)=&gt; &#123;</span><br><span class="line">  console.log(&quot;进入前&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// @param done 完成时执行的回调</span><br><span class="line">const EnterActive = (el: Element, done: Function)=&gt; &#123;</span><br><span class="line">  console.log(&quot;进入时&quot;)</span><br><span class="line">  // 进入动画三秒后完成</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    done()</span><br><span class="line">  &#125;, 3000)</span><br><span class="line">&#125;</span><br><span class="line">const EnterTo = (el: Element)=&gt; &#123;</span><br><span class="line">  console.log(&quot;进入完&quot;)</span><br><span class="line">&#125;</span><br><span class="line">const EnterCancel = (el: Element)=&gt; &#123;</span><br><span class="line">  console.log(&quot;打断进入&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const LeaveFrom = (el: Element)=&gt; &#123;</span><br><span class="line">  console.log(&quot;离开前&quot;)</span><br><span class="line">&#125;</span><br><span class="line">const LeaveActive = (el: Element, done: Function)=&gt; &#123;</span><br><span class="line">  console.log(&quot;离开时&quot;)</span><br><span class="line">  // 离开动画三秒后完成</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    done()</span><br><span class="line">  &#125;, 3000)</span><br><span class="line">&#125;</span><br><span class="line">const LeaveTo = (el: Element)=&gt; &#123;</span><br><span class="line">  console.log(&quot;离开完&quot;)</span><br><span class="line">&#125;</span><br><span class="line">const LeaveCancel = (el: Element)=&gt; &#123;</span><br><span class="line">  console.log(&quot;打断离开&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="结合GSAP"><a href="#结合GSAP" class="headerlink" title="结合GSAP"></a>结合GSAP</h1><p>GSAP是一个JS动画库，可以结合transition组件的生命周期使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;flag = !flag&quot;&gt;switch&lt;/button&gt;</span><br><span class="line">    &lt;transition </span><br><span class="line">      @before-enter=&quot;EnterFrom&quot;</span><br><span class="line">      @enter=&quot;EnterActive&quot;</span><br><span class="line">      @leave=&quot;LeaveActive&quot;&gt;</span><br><span class="line">      &lt;div v-if=&quot;flag&quot; class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">import gsap from &quot;gsap&quot;</span><br><span class="line"></span><br><span class="line">const flag = ref&lt;boolean&gt;(true)</span><br><span class="line"></span><br><span class="line">const EnterFrom = (el: Element)=&gt; &#123;</span><br><span class="line">  gsap.set(el, &#123;</span><br><span class="line">    width:0,</span><br><span class="line">    height:0</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">const EnterActive = (el: Element, done: gsap.Callback)=&gt; &#123;</span><br><span class="line">  gsap.to(el, &#123;</span><br><span class="line">    width:200,</span><br><span class="line">    height:200,</span><br><span class="line">    onComplete:done</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">const LeaveActive = (el: Element, done: gsap.Callback)=&gt; &#123;</span><br><span class="line">  gsap.to(el, &#123;</span><br><span class="line">    width:0,</span><br><span class="line">    height:0,</span><br><span class="line">    onComplete:done</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="appear"><a href="#appear" class="headerlink" title="appear"></a>appear</h1><p>appear有三个属性：</p>
<ul>
<li>appear-from-class</li>
<li>appear-active-class</li>
<li>appear-to-class</li>
</ul>
<p>通过这些属性可以设置初始节点过渡，即页面加载完成就开始的动画。</p>
<p>但进入或离开的时候不会执行这些动画。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;flag = !flag&quot;&gt;switch&lt;/button&gt;</span><br><span class="line">    &lt;transition </span><br><span class="line">      appear</span><br><span class="line">      appear-from-class=&quot;from&quot;</span><br><span class="line">      appear-active-class=&quot;active&quot;</span><br><span class="line">      appear-to-class=&quot;to&quot;&gt;</span><br><span class="line">      &lt;div v-if=&quot;flag&quot; class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">const flag = ref&lt;boolean&gt;(true)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line">.from &#123;</span><br><span class="line">  width: 0px;</span><br><span class="line">  height: 0px;</span><br><span class="line">&#125;</span><br><span class="line">.active &#123;</span><br><span class="line">  transition: all 1s ease;</span><br><span class="line">&#125;</span><br><span class="line">.to &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>依赖注入Provide&amp;Inject</title>
    <url>/web/study/vue/23.%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5Provide&amp;Inject.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="Provide-x2F-Inject"><a href="#Provide-x2F-Inject" class="headerlink" title="Provide &#x2F; Inject"></a>Provide &#x2F; Inject</h1><p>需要从父组件向子组件传递数据时会使用props。但有一些深度嵌套的组件，而深层的子组件只需要父组件的部分内容，这种情况下如果仍将prop沿着组件逐层传递，可能会很麻烦。</p>
<p>在Vue中通过原型链实现的这一功能。</p>
<p>只要在根组件注册了Provide，下面的所有子组件都能读到Provide传来的值。</p>
<p><img src="https://image.cheriko.fun/post/202305241453754.png" alt="使用Provide和Inject让根组件传值给后代组件"></p>
<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;App.vue（爷爷）&lt;/h1&gt;</span><br><span class="line">  &lt;label&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; value=&quot;red&quot; name=&quot;color&quot; v-model=&quot;colorVal&quot;&gt;</span><br><span class="line">    红色</span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">  &lt;label&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; value=&quot;green&quot; name=&quot;color&quot; v-model=&quot;colorVal&quot;&gt;</span><br><span class="line">    绿色</span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">  &lt;label&gt;</span><br><span class="line">    &lt;input type=&quot;radio&quot; value=&quot;blue&quot; name=&quot;color&quot; v-model=&quot;colorVal&quot;&gt;</span><br><span class="line">    蓝色</span><br><span class="line">  &lt;/label&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;ProvideA&gt;&lt;/ProvideA&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, provide, readonly &#125; from &quot;vue&quot;</span><br><span class="line">import ProvideA from &#x27;@/components/ProvideA.vue&#x27;</span><br><span class="line">const colorVal = ref&lt;string&gt;(&quot;red&quot;)</span><br><span class="line">// 把颜色值注入爷爷组件</span><br><span class="line">// 参数1：注入名 参数2：变量</span><br><span class="line">// 如果不想让子组件修改注入值，使用readonly包裹变量</span><br><span class="line">// provide(&quot;color&quot;, colorVal)</span><br><span class="line">provide(&quot;color&quot;, readonly(colorVal))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  height: 50px;</span><br><span class="line">  width: 50px;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  background-color: v-bind(colorVal);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>ProvideA.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;ProvideA.vue（父亲）&lt;/h1&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;ProvideB&gt;&lt;/ProvideB&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, inject &#125; from &#x27;vue&#x27;</span><br><span class="line">import type &#123; Ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import ProvideB from &#x27;./ProvideB.vue&#x27;</span><br><span class="line">// 父亲组件获取爷爷组件注入的值</span><br><span class="line">// 参数1：注入名 参数2：默认值</span><br><span class="line">const color = inject&lt;Ref&lt;string&gt;&gt;(&quot;color&quot;, ref(&quot;red&quot;))</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  height: 50px;</span><br><span class="line">  width: 50px;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  // 在Vue3中，样式里可以使用v-bind绑定setup中的变量</span><br><span class="line">  background-color: v-bind(color);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>ProvideB.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;ProvideB.vue（孙子）&lt;/h1&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;!-- provide传的值可以被子组件修改 --&gt;</span><br><span class="line">      &lt;button @click=&quot;change&quot;&gt;修改provide的值&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, inject &#125; from &#x27;vue&#x27;</span><br><span class="line">import type &#123; Ref &#125; from &#x27;vue&#x27;</span><br><span class="line">// 孙子组件获取爷爷组件注入的值</span><br><span class="line">const color = inject&lt;Ref&lt;string&gt;&gt;(&quot;color&quot;)</span><br><span class="line"></span><br><span class="line">const change = ()=&gt; &#123;</span><br><span class="line">  // 不指定默认值时，color的类型：Ref&lt;string&gt; | undefined</span><br><span class="line">  // 非空断言</span><br><span class="line">  color!.value = &quot;yellow&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  height: 50px;</span><br><span class="line">  width: 50px;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  background-color: v-bind(color);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>在Vue源码（<code>/package/runtime-core/src/apiInject.ts</code>）中可以看到provide和inject的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// provide</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> provide&lt;T, K = <span class="title class_">InjectionKey</span>&lt;T&gt; | <span class="built_in">string</span> | <span class="built_in">number</span>&gt;(</span><br><span class="line">  <span class="attr">key</span>: K,</span><br><span class="line">  <span class="attr">value</span>: K <span class="keyword">extends</span> <span class="title class_">InjectionKey</span>&lt;infer V&gt; ? V : T</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="comment">// 读取当前组件的实例（currentInstance）并做判断</span></span><br><span class="line">  <span class="keyword">if</span> (!currentInstance) &#123;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      <span class="comment">// 函数形式的provide只能在setup函数/语法糖模式使用，Options API无法使用</span></span><br><span class="line">      <span class="title function_">warn</span>(<span class="string">`provide() can only be used inside setup().`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 读取当前组件实例中的provides</span></span><br><span class="line">    <span class="keyword">let</span> provides = currentInstance.<span class="property">provides</span></span><br><span class="line">    <span class="comment">// by default an instance inherits its parent&#x27;s provides object</span></span><br><span class="line">    <span class="comment">// but when it needs to provide values of its own, it creates its</span></span><br><span class="line">    <span class="comment">// own provides object using parent provides object as prototype.</span></span><br><span class="line">    <span class="comment">// this way in `inject` we can simply look up injections from direct</span></span><br><span class="line">    <span class="comment">// parent and let the prototype chain do the work.</span></span><br><span class="line">    <span class="comment">// 默认情况下，实例继承父类的provides对象</span></span><br><span class="line">    <span class="comment">// 如果当前组件有自己的provide，它使用父provides对象作为原型创建自己的provides对象</span></span><br><span class="line">    <span class="comment">// 在inject中，只需查询原型链即可</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当前组件的父组件的provides</span></span><br><span class="line">    <span class="keyword">const</span> parentProvides =</span><br><span class="line">      currentInstance.<span class="property">parent</span> &amp;&amp; currentInstance.<span class="property">parent</span>.<span class="property">provides</span></span><br><span class="line">    <span class="comment">// 判断父组件和子组件的provides是否一样</span></span><br><span class="line">    <span class="keyword">if</span> (parentProvides === provides) &#123;</span><br><span class="line">      <span class="comment">// 如果一样的话（子组件还没有自己的provide），以父组件的provides为基础创建新对象</span></span><br><span class="line">      provides = currentInstance.<span class="property">provides</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(parentProvides)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// TS doesn&#x27;t allow symbol as index type</span></span><br><span class="line">    <span class="comment">// 在新的对象上添加这次provide的值</span></span><br><span class="line">    provides[key <span class="keyword">as</span> <span class="built_in">string</span>] = value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inject</span></span><br><span class="line"><span class="comment">// 一些函数重载</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> inject&lt;T&gt;(<span class="attr">key</span>: <span class="title class_">InjectionKey</span>&lt;T&gt; | <span class="built_in">string</span>): T | <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> inject&lt;T&gt;(</span><br><span class="line">  <span class="attr">key</span>: <span class="title class_">InjectionKey</span>&lt;T&gt; | <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">defaultValue</span>: T,</span><br><span class="line">  treatDefaultAsFactory?: <span class="literal">false</span></span><br><span class="line">): T</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> inject&lt;T&gt;(</span><br><span class="line">  <span class="attr">key</span>: <span class="title class_">InjectionKey</span>&lt;T&gt; | <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">defaultValue</span>: T | (<span class="function">() =&gt;</span> T),</span><br><span class="line">  <span class="attr">treatDefaultAsFactory</span>: <span class="literal">true</span></span><br><span class="line">): T</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">inject</span>(<span class="params"></span></span><br><span class="line"><span class="params">  key: InjectionKey&lt;<span class="built_in">any</span>&gt; | <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  defaultValue?: <span class="built_in">unknown</span>,</span></span><br><span class="line"><span class="params">  treatDefaultAsFactory = <span class="literal">false</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// fallback to `currentRenderingInstance` so that this can be called in</span></span><br><span class="line">  <span class="comment">// a functional component</span></span><br><span class="line">  <span class="comment">// 读取当前组件实例</span></span><br><span class="line">  <span class="keyword">const</span> instance = currentInstance || currentRenderingInstance</span><br><span class="line"></span><br><span class="line">  <span class="comment">// also support looking up from app-level provides w/ `app.runWithContext()`</span></span><br><span class="line">  <span class="comment">// 如果能读到</span></span><br><span class="line">  <span class="keyword">if</span> (instance || currentApp) &#123;</span><br><span class="line">    <span class="comment">// #2400</span></span><br><span class="line">    <span class="comment">// to support `app.use` plugins,</span></span><br><span class="line">    <span class="comment">// fallback to appContext&#x27;s `provides` if the instance is at root</span></span><br><span class="line">    <span class="comment">// 尝试去读父组件的provides，如果实例在根目录，回退到appContext的provides中</span></span><br><span class="line">    <span class="keyword">const</span> provides = instance</span><br><span class="line">      ? instance.<span class="property">parent</span> == <span class="literal">null</span></span><br><span class="line">        ? instance.<span class="property">vnode</span>.<span class="property">appContext</span> &amp;&amp; instance.<span class="property">vnode</span>.<span class="property">appContext</span>.<span class="property">provides</span></span><br><span class="line">        : instance.<span class="property">parent</span>.<span class="property">provides</span></span><br><span class="line">      : currentApp!.<span class="property">_context</span>.<span class="property">provides</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (provides &amp;&amp; (key <span class="keyword">as</span> <span class="built_in">string</span> | <span class="built_in">symbol</span>) <span class="keyword">in</span> provides) &#123;</span><br><span class="line">      <span class="comment">// TS doesn&#x27;t allow symbol as index type</span></span><br><span class="line">      <span class="comment">// 读到就直接返回</span></span><br><span class="line">      <span class="keyword">return</span> provides[key <span class="keyword">as</span> <span class="built_in">string</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> treatDefaultAsFactory &amp;&amp; <span class="title function_">isFunction</span>(defaultValue)</span><br><span class="line">        ? defaultValue.<span class="title function_">call</span>(instance &amp;&amp; instance.<span class="property">proxy</span>)</span><br><span class="line">        : defaultValue</span><br><span class="line">    <span class="comment">// 读不到就报错</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      <span class="title function_">warn</span>(<span class="string">`injection &quot;<span class="subst">$&#123;<span class="built_in">String</span>(key)&#125;</span>&quot; not found.`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(<span class="string">`inject() can only be used inside setup() or functional components.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>兄弟组件传参和Event Bus</title>
    <url>/web/study/vue/24.%E5%85%84%E5%BC%9F%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%8F%82%E5%92%8CEvent%20Bus.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="借助父组件传参"><a href="#借助父组件传参" class="headerlink" title="借助父组件传参"></a>借助父组件传参</h1><p>交替使用emit和prop，以父组件为桥梁进行兄弟间的传参。</p>
<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 这两个子组件是平级的 --&gt;</span><br><span class="line">    &lt;A @on-click=&quot;getFlag&quot;&gt;&lt;/A&gt;</span><br><span class="line">    &lt;B :flag=&quot;flag&quot;&gt;&lt;/B&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">import A from &quot;@/components/A.vue&quot;</span><br><span class="line">import B from &quot;@/components/B.vue&quot;</span><br><span class="line"></span><br><span class="line">let flag = ref(false)</span><br><span class="line">// 父组件将接收到的A组件的传值传给B组件</span><br><span class="line">const getFlag = (param: boolean)=&gt; &#123;</span><br><span class="line">  flag.value = param</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>A.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a&quot;&gt;</span><br><span class="line">    &lt;h1&gt;A组件&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;emitB&quot;&gt;派发一个事件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">const emit = defineEmits([&quot;on-click&quot;])</span><br><span class="line">let flag = false</span><br><span class="line">// 通过自定义事件给父组件App.vue传递数据</span><br><span class="line">const emitB = ()=&gt; &#123;</span><br><span class="line">  flag = !flag</span><br><span class="line">  emit(&quot;on-click&quot;, flag)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.a &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background-color: cyan;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>B.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;b&quot;&gt;</span><br><span class="line">    &lt;h1&gt;B组件&lt;/h1&gt;</span><br><span class="line">    &#123;&#123; flag &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">defineProps&lt;&#123;</span><br><span class="line">  flag: boolean</span><br><span class="line">&#125;&gt;()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.b &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>但是这样太麻烦了，每次都要在父组件这里处理逻辑。</p>
<h1 id="借助Event-Bus传参"><a href="#借助Event-Bus传参" class="headerlink" title="借助Event Bus传参"></a>借助Event Bus传参</h1><p>简单实现一个发布者-订阅者模式。</p>
<p>bus.ts：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">BusClass</span> = &#123;</span><br><span class="line">  <span class="comment">// emit的其他参数会传给on的callback函数</span></span><br><span class="line">  <span class="attr">emit</span>:<span class="function">(<span class="params">name:<span class="built_in">string</span></span>)=&gt;</span><span class="built_in">void</span></span><br><span class="line">  <span class="attr">on</span>:<span class="function">(<span class="params">name:<span class="built_in">string</span>,callback:<span class="built_in">Function</span></span>)=&gt;</span><span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ParamsKey</span> = <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">symbol</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">List</span> = &#123;</span><br><span class="line">  [<span class="attr">key</span>:<span class="title class_">ParamsKey</span>]:<span class="title class_">Array</span>&lt;<span class="title class_">Function</span>&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">implements</span> <span class="title class_">BusClass</span> &#123;</span><br><span class="line">  <span class="comment">// 调度中心</span></span><br><span class="line">  <span class="attr">list</span>:<span class="title class_">List</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span> = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">emit</span>(<span class="params">name:<span class="built_in">string</span>,...args:<span class="built_in">Array</span>&lt;<span class="built_in">any</span>&gt;</span>) &#123;</span><br><span class="line">    <span class="comment">// 取得回调函数集合</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">eventName</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Function</span>&gt; = <span class="variable language_">this</span>.<span class="property">list</span>[name]</span><br><span class="line">    eventName.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span>=&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>,args)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">on</span>(<span class="params">name:<span class="built_in">string</span>,callback:<span class="built_in">Function</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取事件注册的回调函数数组，如果没有数组就新建一个</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">fn</span>:<span class="title class_">Array</span>&lt;<span class="title class_">Function</span>&gt; = <span class="variable language_">this</span>.<span class="property">list</span>[name] || []</span><br><span class="line">    fn.<span class="title function_">push</span>(callback)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">list</span>[name] = fn</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Bus</span>()</span><br></pre></td></tr></table></figure>

<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;A&gt;&lt;/A&gt;</span><br><span class="line">    &lt;B&gt;&lt;/B&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import A from &quot;@/components/A.vue&quot;</span><br><span class="line">import B from &quot;@/components/B.vue&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>A.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a&quot;&gt;</span><br><span class="line">    &lt;h1&gt;A组件&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;emitB&quot;&gt;派发一个事件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import Bus from &quot;../bus&quot;</span><br><span class="line">let flag = false</span><br><span class="line"></span><br><span class="line">const emitB = ()=&gt; &#123;</span><br><span class="line">  flag = !flag</span><br><span class="line">  Bus.emit(&quot;on-click&quot;,flag)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.a &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background-color: cyan;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>B.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;b&quot;&gt;</span><br><span class="line">    &lt;h1&gt;B组件&lt;/h1&gt;</span><br><span class="line">    &#123;&#123; flag &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">import Bus from &quot;../bus&quot;</span><br><span class="line"></span><br><span class="line">let flag = ref(false)</span><br><span class="line">Bus.on(&quot;on-click&quot;, (f:boolean)=&gt;&#123;</span><br><span class="line">  flag.value = f</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.b &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Mitt"><a href="#Mitt" class="headerlink" title="Mitt"></a>Mitt</h1><p>在Vue2中常用全局事件总线，但Vue3中<code>$on</code>、<code>$off</code>和<code>$once</code>实例方法都已被删除，组件实例不再实现事件触发接口，因此就不能像Vue2一样使用全局事件总线了。</p>
<p>作为替代，可以使用Mitt库（就是发布订阅模式）</p>
<p>在main.ts中将Mitt挂载到全局：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 其他的省略</span></span><br><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&quot;mitt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Mit</span> = <span class="title function_">mitt</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// typescript注册</span></span><br><span class="line"><span class="comment">// 必须要拓展ComponentCustomProperties类型才能获得类型提示</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;vue&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$Bus</span>: <span class="keyword">typeof</span> <span class="title class_">Mit</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue3 挂载全局API</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$Bus</span> = <span class="title class_">Mit</span></span><br></pre></td></tr></table></figure>

<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;A&gt;&lt;/A&gt;</span><br><span class="line">    &lt;B&gt;&lt;/B&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import A from &quot;@/components/A.vue&quot;</span><br><span class="line">import B from &quot;@/components/B.vue&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>A.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a&quot;&gt;</span><br><span class="line">    &lt;h1&gt;A组件&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;emitB&quot;&gt;派发一个事件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; getCurrentInstance &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 获取当前组件的实例</span><br><span class="line">const instance = getCurrentInstance()</span><br><span class="line"></span><br><span class="line">let flag = false</span><br><span class="line"></span><br><span class="line">const emitB = ()=&gt; &#123;</span><br><span class="line">  flag = !flag</span><br><span class="line">  instance?.proxy?.$Bus.emit(&quot;on-click&quot;,flag)</span><br><span class="line">  instance?.proxy?.$Bus.emit(&quot;on-str&quot;,&quot;strstr&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.a &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background-color: cyan;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>B.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;b&quot;&gt;</span><br><span class="line">    &lt;h1&gt;B组件&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;cancelFlag&quot;&gt;取消监听flag&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;cancelAll&quot;&gt;取消所有事件&lt;/button&gt;</span><br><span class="line">    &#123;&#123; flag &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, getCurrentInstance &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">const instance = getCurrentInstance()</span><br><span class="line"></span><br><span class="line">const cb = (f: unknown)=&gt;&#123;</span><br><span class="line">  flag.value = f as boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let flag = ref(false)</span><br><span class="line">// 监听on-click flag变化的事件</span><br><span class="line">instance?.proxy?.$Bus.on(&quot;on-click&quot;, cb)</span><br><span class="line"></span><br><span class="line">// *表示监听所有的事件触发</span><br><span class="line">instance?.proxy?.$Bus.on(&quot;*&quot;, (type, arg)=&gt;&#123;</span><br><span class="line">  // type：事件名称 其他参数：事件传参</span><br><span class="line">  console.log(type,arg)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 取消on-click flag的事件</span><br><span class="line">const cancelFlag = ()=&gt; &#123;</span><br><span class="line">  // 参数1：取消的事件名 参数2：取消的回调函数</span><br><span class="line">  instance?.proxy?.$Bus.off(&quot;on-click&quot;, cb)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 取消所有事件</span><br><span class="line">const cancelAll = ()=&gt; &#123;</span><br><span class="line">  instance?.proxy?.$Bus.all.clear()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.b &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>也可以通过引入mitt使用。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>TSX</title>
    <url>/web/study/vue/26.%E6%B7%B1%E5%85%A5v-model.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h1><p><img src="https://image.cheriko.fun/post/202305251458907.png" alt="v-model支持的元素"></p>
<p>v-model其实就是一个语法糖，通过props和emits组合而成的。</p>
<p>Vue3的v-model相比Vue2作了如下变动：</p>
<ol>
<li>prop：value→modelValue</li>
<li>事件：input→update:modelValue（Vue2里sync的写法）</li>
<li>移除了v-bind的.sync修饰符和组件的model选项</li>
<li>新增了支持多个v-model的特性</li>
<li>新增支持自定义修饰符Modifiers的特性</li>
</ol>
<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;App.vue（父组件）&lt;/h1&gt;</span><br><span class="line">    &lt;div&gt;isShow：&#123;&#123; isShow &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;text：&#123;&#123; text &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;button @click=&quot;isShow = !isShow&quot;&gt;开关&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;!-- Vue3支持多个v-model，通过冒号后面的名字进行接收 --&gt;</span><br><span class="line">    &lt;!-- Vue3还支持自定义修饰符，这里加入了自定义修饰符abc --&gt;</span><br><span class="line">    &lt;VModel v-model=&quot;isShow&quot; v-model:textVal.abc=&quot;text&quot;&gt;&lt;/VModel&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import VModel from &quot;@/components/VModel.vue&quot;</span><br><span class="line"></span><br><span class="line">const isShow = ref&lt;boolean&gt;(false)</span><br><span class="line">const text = ref&lt;string&gt;(&quot;yajue&quot;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>VModel.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if=&quot;modelValue&quot; class=&quot;model&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;close&quot;&gt;&lt;button @click=&quot;close&quot;&gt;关闭&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">    &lt;h3&gt;我是v-model子组件&lt;/h3&gt;</span><br><span class="line">    &lt;div&gt;内容：&lt;input @input=&quot;change&quot; :value=&quot;textVal&quot; type=&quot;text&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line"></span><br><span class="line">// vue3 默认值modelValue</span><br><span class="line">const props = defineProps&lt;&#123;</span><br><span class="line">  // 收到了父组件传来的isShow</span><br><span class="line">  modelValue: boolean</span><br><span class="line">  // 收到了父组件传来的text</span><br><span class="line">  textVal: string</span><br><span class="line">  // 如果是默认值的话就是modelModifiers</span><br><span class="line">  textValModifiers?: &#123;</span><br><span class="line">    // 都是布尔值</span><br><span class="line">    abc:boolean</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&gt;()</span><br><span class="line"></span><br><span class="line">// vue3 默认值update:modelValue</span><br><span class="line">const emit = defineEmits([&quot;update:modelValue&quot;,&quot;update:textVal&quot;])</span><br><span class="line"></span><br><span class="line">const close = ()=&gt; &#123;</span><br><span class="line">  // 给父组件回传isShow</span><br><span class="line">  emit(&quot;update:modelValue&quot;,false)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const change = (e:Event)=&gt; &#123;</span><br><span class="line">  const target = e.target as HTMLInputElement</span><br><span class="line">  // 给父组件回传text</span><br><span class="line">  // 如果加入了abc修饰符，每次输入时在text的末尾加上abc，否则不加</span><br><span class="line">  emit(&quot;update:textVal&quot;, props?.textValModifiers?.abc? target.value + &quot;abc&quot;: target.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 很多第三方组件上的v-model就是这么封装的</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.model &#123;</span><br><span class="line">  width: 500px;</span><br><span class="line">  border: 5px solid #ccc;</span><br><span class="line">  padding: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>在Vue源码（<code>/package/runtime-dom/src/directives/vModel.ts</code>）中可以看到v-model的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// We are exporting the v-model runtime directly as vnode hooks so that it can</span></span><br><span class="line"><span class="comment">// be tree-shaken in case v-model is never used.</span></span><br><span class="line"><span class="comment">// 一个自定义指令</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">vModelText</span>: <span class="title class_">ModelDirective</span>&lt;</span><br><span class="line">  <span class="title class_">HTMLInputElement</span> | <span class="title class_">HTMLTextAreaElement</span></span><br><span class="line">&gt; = &#123;</span><br><span class="line">  <span class="comment">// el dom节点对象   binding对象（内置修饰符）   vnode</span></span><br><span class="line">  <span class="title function_">created</span>(<span class="params">el, &#123; modifiers: &#123; lazy, trim, <span class="built_in">number</span> &#125; &#125;, vnode</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取props中的modelValue属性对应的函数</span></span><br><span class="line">    el.<span class="property">_assign</span> = <span class="title function_">getModelAssigner</span>(vnode)</span><br><span class="line">    <span class="keyword">const</span> castToNumber =</span><br><span class="line">      <span class="built_in">number</span> || (vnode.<span class="property">props</span> &amp;&amp; vnode.<span class="property">props</span>.<span class="property">type</span> === <span class="string">&#x27;number&#x27;</span>)</span><br><span class="line">  	<span class="comment">// 通过addEventListener 如果有lazy修饰符，触发change</span></span><br><span class="line">    <span class="comment">// 因为change只有在改变值且鼠标离开焦点才会触发，而input会频繁触发</span></span><br><span class="line">    <span class="title function_">addEventListener</span>(el, lazy ? <span class="string">&#x27;change&#x27;</span> : <span class="string">&#x27;input&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ((e.<span class="property">target</span> <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">composing</span>) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">let</span> <span class="attr">domValue</span>: <span class="built_in">string</span> | <span class="built_in">number</span> = el.<span class="property">value</span></span><br><span class="line">      <span class="comment">// 如果有trim修饰符，去除左右空格</span></span><br><span class="line">      <span class="keyword">if</span> (trim) &#123;</span><br><span class="line">        domValue = domValue.<span class="title function_">trim</span>()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果有number修饰符，转成数字</span></span><br><span class="line">      <span class="keyword">if</span> (castToNumber) &#123;</span><br><span class="line">        domValue = <span class="title function_">looseToNumber</span>(domValue)</span><br><span class="line">      &#125;</span><br><span class="line">      el.<span class="title function_">_assign</span>(domValue)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 如果触发的是change事件，有修饰符trim也要去除左右空格</span></span><br><span class="line">    <span class="keyword">if</span> (trim) &#123;</span><br><span class="line">      <span class="title function_">addEventListener</span>(el, <span class="string">&#x27;change&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        el.<span class="property">value</span> = el.<span class="property">value</span>.<span class="title function_">trim</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!lazy) &#123;</span><br><span class="line">      <span class="comment">// lazy 中文输入法特殊处理</span></span><br><span class="line">      <span class="comment">// 当用户选中输入法输入的值，手动触发input</span></span><br><span class="line">      <span class="title function_">addEventListener</span>(el, <span class="string">&#x27;compositionstart&#x27;</span>, onCompositionStart)</span><br><span class="line">      <span class="title function_">addEventListener</span>(el, <span class="string">&#x27;compositionend&#x27;</span>, onCompositionEnd)</span><br><span class="line">      <span class="comment">// Safari &lt; 10.2 &amp; UIWebView doesn&#x27;t fire compositionend when</span></span><br><span class="line">      <span class="comment">// switching focus before confirming composition choice</span></span><br><span class="line">      <span class="comment">// this also fixes the issue where some browsers e.g. iOS Chrome</span></span><br><span class="line">      <span class="comment">// fires &quot;change&quot; instead of &quot;input&quot; on autocomplete.</span></span><br><span class="line">      <span class="title function_">addEventListener</span>(el, <span class="string">&#x27;change&#x27;</span>, onCompositionEnd)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// set value on mounted so it&#x27;s after min/max for type=&quot;range&quot;</span></span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params">el, &#123; value &#125;</span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化赋值，绑定的值赋给value，目前只是单向流动</span></span><br><span class="line">    el.<span class="property">value</span> = value == <span class="literal">null</span> ? <span class="string">&#x27;&#x27;</span> : value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeUpdate</span>(<span class="params">el, &#123; value, modifiers: &#123; lazy, trim, <span class="built_in">number</span> &#125; &#125;, vnode</span>) &#123;</span><br><span class="line">    el.<span class="property">_assign</span> = <span class="title function_">getModelAssigner</span>(vnode)</span><br><span class="line">    <span class="comment">// avoid clearing unresolved text. #2302</span></span><br><span class="line">    <span class="keyword">if</span> ((el <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">composing</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">activeElement</span> === el &amp;&amp; el.<span class="property">type</span> !== <span class="string">&#x27;range&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果设了lazy，返回</span></span><br><span class="line">      <span class="keyword">if</span> (lazy) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果设了trim且值已经去过空格，返回</span></span><br><span class="line">      <span class="keyword">if</span> (trim &amp;&amp; el.<span class="property">value</span>.<span class="title function_">trim</span>() === value) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果设了number且值已经是number，返回</span></span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        (<span class="built_in">number</span> || el.<span class="property">type</span> === <span class="string">&#x27;number&#x27;</span>) &amp;&amp;</span><br><span class="line">        <span class="title function_">looseToNumber</span>(el.<span class="property">value</span>) === value</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> newValue = value == <span class="literal">null</span> ? <span class="string">&#x27;&#x27;</span> : value</span><br><span class="line">    <span class="comment">// 新值和旧值不一样才更新</span></span><br><span class="line">    <span class="keyword">if</span> (el.<span class="property">value</span> !== newValue) &#123;</span><br><span class="line">      el.<span class="property">value</span> = newValue</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>emit的源码位于<code>/package/runtime-core/src/componentEmits.ts</code>，v-model需要和emit配合进行更新。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">emit</span>(<span class="params"></span></span><br><span class="line"><span class="params">  instance: ComponentInternalInstance,</span></span><br><span class="line"><span class="params">  event: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">  ...rawArgs: <span class="built_in">any</span>[]</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (instance.<span class="property">isUnmounted</span>) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// 读取当前实例的props对象</span></span><br><span class="line">  <span class="keyword">const</span> props = instance.<span class="property">vnode</span>.<span class="property">props</span> || <span class="variable constant_">EMPTY_OBJ</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      emitsOptions,</span><br><span class="line">      <span class="attr">propsOptions</span>: [propsOptions]</span><br><span class="line">    &#125; = instance</span><br><span class="line">    <span class="keyword">if</span> (emitsOptions) &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        !(event <span class="keyword">in</span> emitsOptions) &amp;&amp;</span><br><span class="line">        !(</span><br><span class="line">          __COMPAT__ &amp;&amp;</span><br><span class="line">          (event.<span class="title function_">startsWith</span>(<span class="string">&#x27;hook:&#x27;</span>) ||</span><br><span class="line">            event.<span class="title function_">startsWith</span>(compatModelEventPrefix))</span><br><span class="line">        )</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!propsOptions || !(<span class="title function_">toHandlerKey</span>(event) <span class="keyword">in</span> propsOptions)) &#123;</span><br><span class="line">          <span class="title function_">warn</span>(</span><br><span class="line">            <span class="string">`Component emitted event &quot;<span class="subst">$&#123;event&#125;</span>&quot; but it is neither declared in `</span> +</span><br><span class="line">              <span class="string">`the emits option nor as an &quot;<span class="subst">$&#123;toHandlerKey(event)&#125;</span>&quot; prop.`</span></span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> validator = emitsOptions[event]</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isFunction</span>(validator)) &#123;</span><br><span class="line">          <span class="keyword">const</span> isValid = <span class="title function_">validator</span>(...rawArgs)</span><br><span class="line">          <span class="keyword">if</span> (!isValid) &#123;</span><br><span class="line">            <span class="title function_">warn</span>(</span><br><span class="line">              <span class="string">`Invalid event arguments: event validation failed for event &quot;<span class="subst">$&#123;event&#125;</span>&quot;.`</span></span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> args = rawArgs</span><br><span class="line">  <span class="comment">// 查看事件是否是update:开头</span></span><br><span class="line">  <span class="keyword">const</span> isModelListener = event.<span class="title function_">startsWith</span>(<span class="string">&#x27;update:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// for v-model update:xxx events, apply modifiers on args</span></span><br><span class="line">  <span class="comment">// 是的话就截取掉，获得后面那段</span></span><br><span class="line">  <span class="keyword">const</span> modelArg = isModelListener &amp;&amp; event.<span class="title function_">slice</span>(<span class="number">7</span>)</span><br><span class="line">  <span class="keyword">if</span> (modelArg &amp;&amp; modelArg <span class="keyword">in</span> props) &#123;</span><br><span class="line">    <span class="keyword">const</span> modifiersKey = <span class="string">`<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="subst"><span class="string">      modelArg === <span class="string">&#x27;modelValue&#x27;</span> ? <span class="string">&#x27;model&#x27;</span> : modelArg</span></span></span><br><span class="line"><span class="subst"><span class="string">    &#125;</span>Modifiers`</span></span><br><span class="line">    <span class="comment">// 获取v-model的修饰符，回传的时候也会做处理</span></span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="built_in">number</span>, trim &#125; = props[modifiersKey] || <span class="variable constant_">EMPTY_OBJ</span></span><br><span class="line">    <span class="keyword">if</span> (trim) &#123;</span><br><span class="line">      args = rawArgs.<span class="title function_">map</span>(<span class="function"><span class="params">a</span> =&gt;</span> (<span class="title function_">isString</span>(a) ? a.<span class="title function_">trim</span>() : a))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">number</span>) &#123;</span><br><span class="line">      args = rawArgs.<span class="title function_">map</span>(looseToNumber)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__DEV__ || __FEATURE_PROD_DEVTOOLS__) &#123;</span><br><span class="line">    <span class="title function_">devtoolsComponentEmit</span>(instance, event, args)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="keyword">const</span> lowerCaseEvent = event.<span class="title function_">toLowerCase</span>()</span><br><span class="line">    <span class="keyword">if</span> (lowerCaseEvent !== event &amp;&amp; props[<span class="title function_">toHandlerKey</span>(lowerCaseEvent)]) &#123;</span><br><span class="line">      <span class="title function_">warn</span>(</span><br><span class="line">        <span class="string">`Event &quot;<span class="subst">$&#123;lowerCaseEvent&#125;</span>&quot; is emitted in component `</span> +</span><br><span class="line">          <span class="string">`<span class="subst">$&#123;formatComponentName(</span></span></span><br><span class="line"><span class="subst"><span class="string">            instance,</span></span></span><br><span class="line"><span class="subst"><span class="string">            instance.<span class="keyword">type</span></span></span></span><br><span class="line"><span class="subst"><span class="string">          )&#125;</span> but the handler is registered for &quot;<span class="subst">$&#123;event&#125;</span>&quot;. `</span> +</span><br><span class="line">          <span class="string">`Note that HTML attributes are case-insensitive and you cannot use `</span> +</span><br><span class="line">          <span class="string">`v-on to listen to camelCase events when using in-DOM templates. `</span> +</span><br><span class="line">          <span class="string">`You should probably use &quot;<span class="subst">$&#123;hyphenate(event)&#125;</span>&quot; instead of &quot;<span class="subst">$&#123;event&#125;</span>&quot;.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// handlerName = on+事件名称</span></span><br><span class="line">  <span class="keyword">let</span> handlerName</span><br><span class="line">  <span class="keyword">let</span> handler =</span><br><span class="line">    props[(handlerName = <span class="title function_">toHandlerKey</span>(event))] ||</span><br><span class="line">    <span class="comment">// also try camelCase event handler (#2249)</span></span><br><span class="line">    props[(handlerName = <span class="title function_">toHandlerKey</span>(<span class="title function_">camelize</span>(event)))]</span><br><span class="line">  <span class="comment">// for v-model update:xxx events, also trigger kebab-case equivalent</span></span><br><span class="line">  <span class="comment">// for props passed via kebab-case</span></span><br><span class="line">  <span class="keyword">if</span> (!handler &amp;&amp; isModelListener) &#123;</span><br><span class="line">    handler = props[(handlerName = <span class="title function_">toHandlerKey</span>(<span class="title function_">hyphenate</span>(event)))]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行对应的回调函数</span></span><br><span class="line">  <span class="keyword">if</span> (handler) &#123;</span><br><span class="line">    <span class="title function_">callWithAsyncErrorHandling</span>(</span><br><span class="line">      handler,</span><br><span class="line">      instance,</span><br><span class="line">      <span class="title class_">ErrorCodes</span>.<span class="property">COMPONENT_EVENT_HANDLER</span>,</span><br><span class="line">      args</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onceHandler = props[handlerName + <span class="string">`Once`</span>]</span><br><span class="line">  <span class="keyword">if</span> (onceHandler) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance.<span class="property">emitted</span>) &#123;</span><br><span class="line">      instance.<span class="property">emitted</span> = &#123;&#125; <span class="keyword">as</span> <span class="title class_">Record</span>&lt;<span class="built_in">any</span>, <span class="built_in">boolean</span>&gt;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (instance.<span class="property">emitted</span>[handlerName]) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    instance.<span class="property">emitted</span>[handlerName] = <span class="literal">true</span></span><br><span class="line">    <span class="title function_">callWithAsyncErrorHandling</span>(</span><br><span class="line">      onceHandler,</span><br><span class="line">      instance,</span><br><span class="line">      <span class="title class_">ErrorCodes</span>.<span class="property">COMPONENT_EVENT_HANDLER</span>,</span><br><span class="line">      args</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (__COMPAT__) &#123;</span><br><span class="line">    <span class="title function_">compatModelEmit</span>(instance, event, args)</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">compatInstanceEmit</span>(instance, event, args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义Hooks</title>
    <url>/web/study/vue/28.%E8%87%AA%E5%AE%9A%E4%B9%89Hooks.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="Vue2的Mixins"><a href="#Vue2的Mixins" class="headerlink" title="Vue2的Mixins"></a>Vue2的Mixins</h1><p>在Vue2里就有类似的Mixins。</p>
<p>Mixins能将多个相同的逻辑抽离出来，各个组件只要引入mixins，就能实现一次写代码，多组件受益的效果。</p>
<p>但Mixins存在其问题</p>
<ol>
<li><p>会涉及到覆盖的问题，组件的data、methods、filters会覆盖mixin中的同名data、methods、filters</p>
<p><img src="https://image.cheriko.fun/post/202305252036211.png"></p>
</li>
<li><p>来自mixins的变量难以使用，隐式传入不利于阅读，使代码难以维护</p>
</li>
</ol>
<h1 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h1><p>使用hooks做一个根据图片生成base64的逻辑</p>
<p>hooks&#x2F;index.ts：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Options</span> = &#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params">options:Options</span>):<span class="title class_">Promise</span>&lt;&#123;<span class="attr">baseUrl</span>:<span class="built_in">string</span>&#125;&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">img</span>:<span class="title class_">HTMLImageElement</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(options.<span class="property">el</span>) <span class="keyword">as</span> <span class="title class_">HTMLImageElement</span></span><br><span class="line">      <span class="comment">// 等图片加载完成后再转换，不然会报错</span></span><br><span class="line">      img.<span class="property">onload</span> = <span class="function">()=&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(&#123;</span><br><span class="line">          <span class="attr">baseUrl</span>:<span class="title function_">base64</span>(img)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">base64</span> = (<span class="params">el:HTMLImageElement</span>)=&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>)</span><br><span class="line">      <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>)</span><br><span class="line">      canvas.<span class="property">width</span> = el.<span class="property">width</span></span><br><span class="line">      canvas.<span class="property">height</span> = el.<span class="property">height</span></span><br><span class="line">      <span class="comment">// 根据图片画canvas</span></span><br><span class="line">      ctx?.<span class="title function_">drawImage</span>(el,<span class="number">0</span>,<span class="number">0</span>,canvas.<span class="property">width</span>,canvas.<span class="property">height</span>)</span><br><span class="line">      <span class="comment">// 获取图片的后缀名</span></span><br><span class="line">      <span class="keyword">const</span> src = el.<span class="property">src</span></span><br><span class="line">      <span class="keyword">const</span> suffix = src.<span class="title function_">substring</span>(src.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>)</span><br><span class="line">      <span class="comment">// 导出一个base64</span></span><br><span class="line">      <span class="keyword">return</span> canvas.<span class="title function_">toDataURL</span>(<span class="string">`image/<span class="subst">$&#123;suffix&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;img id=&quot;img&quot; width=&quot;300&quot; height=&quot;300&quot; src=&quot;./assets/images/Computer Love EP_109951166194032069.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import useBase64 from &quot;@/hooks/index&quot;</span><br><span class="line">useBase64(&#123;el: &quot;#img&quot;&#125;).then(console.log)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>NPM库的打包和上传</title>
    <url>/web/study/vue/29.NPM%E5%BA%93%E7%9A%84%E6%89%93%E5%8C%85%E5%92%8C%E4%B8%8A%E4%BC%A0.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h1><p>需求：实现一个函数，同时支持hook和自定义指令，去监听DOM宽高的变化</p>
<p>攻克点：</p>
<ol>
<li>如何监听DOM宽高变化</li>
<li>如何用vite打包库</li>
<li>如何发布npm</li>
</ol>
<h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>创建一个基本的工程，作为开发依赖引入vue3和vite后，编写src&#x2F;index.ts：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">App</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MutationObserver 主要侦听子集、属性、增删改查的变化</span></span><br><span class="line"><span class="comment">// ResizeObserver 主要侦听元素宽高的变化</span></span><br><span class="line"><span class="comment">// 实现自定义hook</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useResize</span>(<span class="params">el: HTMLElement, callback: <span class="built_in">Function</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> resize = <span class="keyword">new</span> <span class="title class_">ResizeObserver</span>(<span class="function">(<span class="params">entries</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 用回调函数回传元素宽高</span></span><br><span class="line">    <span class="title function_">callback</span>(entries[<span class="number">0</span>].<span class="property">contentRect</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  resize.<span class="title function_">observe</span>(el)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue插件的规范（实现install函数）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">install</span> = (<span class="params">app:App</span>)=&gt; &#123;</span><br><span class="line">  <span class="comment">// 实现自定义指令</span></span><br><span class="line">  app.<span class="title function_">directive</span>(<span class="string">&quot;resize&quot;</span>, &#123;</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params">el,binding</span>) &#123;</span><br><span class="line">      <span class="title function_">useResize</span>(el,binding.<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把install方法加到useResize身上</span></span><br><span class="line">useResize.<span class="property">install</span> = install</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useResize</span><br></pre></td></tr></table></figure>

<p>编写声明文件index.d.ts：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">App</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写声明文件</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">useResize</span>: &#123;</span><br><span class="line">  (<span class="attr">el</span>:<span class="title class_">HTMLElement</span>,<span class="attr">callback</span>:<span class="title class_">Function</span>):<span class="built_in">void</span></span><br><span class="line">  <span class="attr">install</span>:<span class="function">(<span class="params">app:App</span>)=&gt;</span><span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useResize</span><br></pre></td></tr></table></figure>

<h1 id="打包成库"><a href="#打包成库" class="headerlink" title="打包成库"></a>打包成库</h1><p>配置vite.config.js：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// umd 支持amd、cmd、cjs和全局变量模式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">build</span>: &#123;</span><br><span class="line">    <span class="comment">// 开发面向浏览器的库时使用</span></span><br><span class="line">    <span class="attr">lib</span>: &#123;</span><br><span class="line">      <span class="comment">// 入口文件</span></span><br><span class="line">      <span class="attr">entry</span>: <span class="string">&quot;src/index.ts&quot;</span>,</span><br><span class="line">      <span class="comment">// 包名</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;useResize&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 透传属性</span></span><br><span class="line">    <span class="attr">rollupOptions</span>: &#123;</span><br><span class="line">      <span class="comment">// 排除vue（不想被打包进库的依赖）</span></span><br><span class="line">      <span class="attr">external</span>: [<span class="string">&quot;vue&quot;</span>],</span><br><span class="line">      <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">globals</span>:&#123;</span><br><span class="line">          <span class="comment">// 给umd全局变量用</span></span><br><span class="line">          <span class="attr">useResize</span>:<span class="string">&quot;useResize&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>使用vite build将包打出来，会在dist文件夹打出两个文件，.mjs是ES Module模式，.umd.js是各种模式的综合。</p>
<h1 id="发布到NPM"><a href="#发布到NPM" class="headerlink" title="发布到NPM"></a>发布到NPM</h1><p>修改package.json：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v-resize&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/v-resize.umd.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/v-resize.mjs&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;index.d.ts&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.3.8&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.3.4&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后通过三步把包发到npm上：</p>
<ol>
<li>需要拥有npm账号，没有的话使用npm adduser命令注册</li>
<li>登录npm，使用npm login</li>
<li>使用npm publish发布</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
        <tag>vite</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>TSX</title>
    <url>/web/study/vue/25.TSX.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="Vue3提供TSX支持"><a href="#Vue3提供TSX支持" class="headerlink" title="Vue3提供TSX支持"></a>Vue3提供TSX支持</h1><p>Vue中常用Template写模板，但也可以使用tsx。</p>
<p>Vue2就已经支持jsx写法，但友好度不高。因为Vue3对TypeScript的支持度高，所以tsx写法越来越被接受。</p>
<p>使用前需要安装<code>@vitejs/plugin-vue-jsx</code>插件。</p>
<p>安装完后在vite.config.ts引入：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vueJsx <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue-jsx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vueJsx</span>(),</span><br><span class="line">    <span class="comment">// ...省略</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// ...省略</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="使用TSX"><a href="#使用TSX" class="headerlink" title="使用TSX"></a>使用TSX</h1><p>创建一个App.tsx文件并使用：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式1：返回一个渲染函数</span></span><br><span class="line"><span class="comment">// export default function() &#123;</span></span><br><span class="line"><span class="comment">//   const code = 114514</span></span><br><span class="line"><span class="comment">//   return (&lt;div&gt;&#123;code&#125;&lt;/div&gt;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2：使用defineComponent + Options API</span></span><br><span class="line"><span class="comment">// export default defineComponent(&#123;</span></span><br><span class="line"><span class="comment">//   data() &#123;</span></span><br><span class="line"><span class="comment">//     return &#123;</span></span><br><span class="line"><span class="comment">//       age:24,</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   render() &#123;</span></span><br><span class="line"><span class="comment">//     return (&lt;div&gt;&#123;this.age&#125;岁，是学生&lt;/div&gt;)</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式3：使用defineComponent + setup函数模式</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&quot;野兽先辈&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>直接引入，可以类似组件一样使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ABC&gt;&lt;/ABC&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import ABC from &quot;./App&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="TSX和Vue语法"><a href="#TSX和Vue语法" class="headerlink" title="TSX和Vue语法"></a>TSX和Vue语法</h1><h2 id="ref响应式和v-show"><a href="#ref响应式和v-show" class="headerlink" title="ref响应式和v-show"></a>ref响应式和v-show</h2><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&quot;野兽先辈&quot;</span></span><br><span class="line">    <span class="keyword">const</span> flag = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ref在template中会自动解包，但在tsx中不会，需要加上.value</span></span><br><span class="line">    <span class="comment">// tsx中可以直接使用v-show</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&#123;flag.value&#125;</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="string">&quot;野兽先辈&quot;</span></span><br><span class="line">    <span class="keyword">const</span> flag = <span class="title function_">ref</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// tsx中不支持v-if，用了就报错</span></span><br><span class="line">    <span class="comment">// return ()=&gt; (&lt;div v-if=&#123;flag.value&#125;&gt;&#123;name&#125;&lt;/div&gt;)</span></span><br><span class="line">    <span class="comment">// 真的要用的话就利用编程思想（三元表达式代替v-if）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span> (<span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;flag.value? <span class="tag">&lt;<span class="name">div</span>&gt;</span>true<span class="tag">&lt;/<span class="name">div</span>&gt;</span>: &quot;&quot;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="v-for和v-bind"><a href="#v-for和v-bind" class="headerlink" title="v-for和v-bind"></a>v-for和v-bind</h2><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;KNN&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;SNNN&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;YJSP&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;RU&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;BNKRG&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;SIK&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment">// tsx也不能使用v-for，也要用编程思想（Array.map代替v-for）</span></span><br><span class="line">    <span class="comment">// 使用v-bind时可以直接写属性名并传值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span> (<span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;data.map(v=&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return<span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&#123;v.name&#125;</span>&gt;</span>&#123;v.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="props和emits"><a href="#props和emits" class="headerlink" title="props和emits"></a>props和emits</h2><p>App.tsx：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  name?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="title class_">String</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">emits</span>: [<span class="string">&quot;on-click&quot;</span>],</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props:Props,&#123;emit&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> data = [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;KNN&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;SNNN&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;YJSP&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;RU&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;BNKRG&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;SIK&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">click</span> = (<span class="params">item:<span class="built_in">any</span></span>)=&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;click&quot;</span>,item)</span><br><span class="line">      <span class="title function_">emit</span>(<span class="string">&quot;on-click&quot;</span>,item)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span> (<span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>props：&#123;props?.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;data.map(v=&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        // 函数柯里化</span></span><br><span class="line"><span class="language-xml">        return<span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>click(v)&#125;&gt;&#123;v.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ABC name=&quot;yajue&quot; @on-click=&quot;click2&quot;&gt;&lt;/ABC&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import ABC from &quot;./App&quot;</span><br><span class="line"></span><br><span class="line">const click2 = (item:any)=&gt; &#123;</span><br><span class="line">  console.log(&quot;click2&quot;,item)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 渲染函数，作为提供插槽的子组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">A</span> = (<span class="params">_:<span class="built_in">any</span>,&#123;slots&#125;:<span class="built_in">any</span></span>)=&gt; (<span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;slots.default? slots.default(): &quot;默认值&quot;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;slots.foo?.()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/&gt;</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 使用对象定义插入插槽的内容</span></span><br><span class="line">    <span class="keyword">const</span> slot = &#123;</span><br><span class="line">      <span class="attr">default</span>: <span class="function">()=&gt;</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>default slots<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>),</span><br><span class="line">      <span class="attr">foo</span>: <span class="function">()=&gt;</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>foo slots<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span> (<span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">A</span> <span class="attr">v-slots</span>=<span class="string">&#123;slot&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">A</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> v = ref&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="comment">// v-model可以直接用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span> (<span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&#123;v.value&#125;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;v.value&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="Vite插件制作"><a href="#Vite插件制作" class="headerlink" title="Vite插件制作"></a>Vite插件制作</h1><p>用到的库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install @vue/babel-plugin-jsx</span><br><span class="line">npm install @babel/core</span><br><span class="line">npm install @babel/plugin-transform-typescript</span><br><span class="line">npm install @babel/plugin-syntax-import-meta</span><br><span class="line">npm install @types/babel__core</span><br></pre></td></tr></table></figure>

<p>Babel常用于语法转换，比如把ES6语法转换为ES5，提高低版本浏览器的兼容性。</p>
<p><img src="https://image.cheriko.fun/post/202305242012808.png" alt="编译原理"></p>
<p>在项目根目录新建plugin&#x2F;index.ts：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite插件制作方式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Plugin</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span></span><br><span class="line"><span class="comment">// @babel/core 核心功能，将源代码转换成目标代码</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> babel <span class="keyword">from</span> <span class="string">&quot;@babel/core&quot;</span></span><br><span class="line"><span class="comment">// Vue给babel写的插件 支持tsx v-model等</span></span><br><span class="line"><span class="keyword">import</span> jsx <span class="keyword">from</span> <span class="string">&quot;@vue/babel-plugin-jsx&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>): <span class="title class_">Plugin</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;vite-plugin-vue-tsx&quot;</span>,</span><br><span class="line">    <span class="comment">// 把代码(code)和路径(id)返回成这个函数的参数</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">transform</span>(<span class="params">code, id</span>) &#123;</span><br><span class="line">      <span class="comment">// 匹配文件类型</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="regexp">/.tsx$/</span>.<span class="title function_">test</span>(id)) &#123;</span><br><span class="line">        <span class="comment">// @ts-ignore</span></span><br><span class="line">        <span class="keyword">const</span> ts = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&quot;@babel/plugin-transform-typescript&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">r</span>=&gt;</span>r.<span class="property">default</span>)</span><br><span class="line">        <span class="keyword">const</span> res = <span class="keyword">await</span> babel.<span class="title function_">transformAsync</span>(code,&#123;</span><br><span class="line">          <span class="comment">// ast：抽象语法树，源代码语法结构的一种抽象表示</span></span><br><span class="line">          <span class="attr">ast</span>:<span class="literal">true</span>,</span><br><span class="line">          <span class="comment">// 默认搜索默认babel.config.json文件</span></span><br><span class="line">          <span class="attr">configFile</span>:<span class="literal">false</span>,</span><br><span class="line">          <span class="comment">// .babelrc.json</span></span><br><span class="line">          <span class="attr">babelrc</span>:<span class="literal">false</span>,</span><br><span class="line">          <span class="comment">// 添加babel插件</span></span><br><span class="line">          <span class="attr">plugins</span>:[jsx,[ts,&#123;<span class="attr">isTSX</span>:<span class="literal">true</span>,<span class="attr">allowExtensions</span>:<span class="literal">true</span>&#125;]]</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> res?.<span class="property">code</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> code</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时在tsconfig的include中加入该路径，就可以作为插件使用了。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义指令directive</title>
    <url>/web/study/vue/27.%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4directive.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h1><h2 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h2><p>Vue3自定义指令有这些生命周期钩子函数：</p>
<ul>
<li>created：元素初始化时</li>
<li>beforeMount：指令绑定到元素后调用，只调用一次</li>
<li>mounted：元素插入父级dom调用</li>
<li>beforeUpdate：元素被更新前调用</li>
<li>update：元素被更新后调用</li>
<li>beforeUnmount：在元素被移除前调用</li>
<li>unmounted：指令被移除后调用，只调用一次</li>
</ul>
<blockquote>
<p>Vue2的指令：bind、inserted、update、componentUpdated、unbind</p>
</blockquote>
<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;flag=!flag&quot;&gt;切换&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;background=(background===&#x27;cyan&#x27;?&#x27;orange&#x27;:&#x27;cyan&#x27;)&quot;&gt;更新&lt;/button&gt;</span><br><span class="line">    &lt;A v-if=&quot;flag&quot; v-move:abc.def=&quot;&#123;background&#125;&quot;&gt;&lt;/A&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import A from &quot;@/components/A.vue&quot;</span><br><span class="line">import type &#123; DirectiveBinding &#125; from &quot;vue&quot;</span><br><span class="line">import type &#123; Directive &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">const flag = ref&lt;boolean&gt;(true)</span><br><span class="line">const background = ref&lt;string&gt;(&quot;cyan&quot;)</span><br><span class="line"></span><br><span class="line">type Dir = &#123;</span><br><span class="line">  background:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 命名规范：必须以v开头</span><br><span class="line">const vMove: Directive = &#123;</span><br><span class="line">  // 每一个钩子函数里都能收到传值、参数和修饰符</span><br><span class="line">  // 一般用到mounted、updated和unmounted比较多</span><br><span class="line">  /**</span><br><span class="line">   * 可以使用这些参数做些事情</span><br><span class="line">   * @param el 被绑定自定义指令的元素</span><br><span class="line">   * @param dir 传入的内容，包括参数、修饰符、传值、上次的传值、当前组件实例</span><br><span class="line">   * @param vNode 当前组件的虚拟DOM</span><br><span class="line">   * @param preVNode 上次的虚拟DOM</span><br><span class="line">   */</span><br><span class="line">  created(el:HTMLElement, dir:DirectiveBinding&lt;Dir&gt;, vNode, preVNode) &#123;</span><br><span class="line">    console.log(&quot;vMove created&quot;)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount(el, dir, vNode, preVNode) &#123;</span><br><span class="line">    console.log(&quot;vMove beforeMount&quot;)</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted(el, dir, vNode, preVNode) &#123;</span><br><span class="line">    console.log(&quot;vMove mounted&quot;)</span><br><span class="line">    el.style.background = dir.value.background</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUpdate(el, dir, vNode, preVNode) &#123;</span><br><span class="line">    console.log(&quot;vMove beforeUpdate&quot;)</span><br><span class="line">  &#125;,</span><br><span class="line">  updated(el, dir, vNode, preVNode) &#123;</span><br><span class="line">    console.log(&quot;vMove Updated&quot;)</span><br><span class="line">    el.style.background = dir.value.background</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUnmount(el, dir, vNode, preVNode) &#123;</span><br><span class="line">    console.log(&quot;vMove beforeUnmount&quot;)</span><br><span class="line">  &#125;,</span><br><span class="line">  unmounted(el, dir, vNode, preVNode) &#123;</span><br><span class="line">    console.log(&quot;vMove Unmounted&quot;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>A.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;a&quot;&gt;</span><br><span class="line">    &lt;h1&gt;A组件&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.a &#123;</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h2 id="函数简写"><a href="#函数简写" class="headerlink" title="函数简写"></a>函数简写</h2><p>如果只关心mounted和updated，并在两个时刻触发相同行为，而不关系其他的钩子函数，就可以使用简写。</p>
<p>权限校验案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;btns&quot;&gt;</span><br><span class="line">    &lt;button v-has-show=&quot;&#x27;shop:create&#x27;&quot;&gt;创建&lt;/button&gt;</span><br><span class="line">    &lt;button v-has-show=&quot;&#x27;shop:edit&#x27;&quot;&gt;编辑&lt;/button&gt;</span><br><span class="line">    &lt;button v-has-show=&quot;&#x27;shop:delete&#x27;&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import type &#123; Directive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">localStorage.setItem(&quot;userId&quot;,&quot;114514&quot;)</span><br><span class="line"></span><br><span class="line">// mock后台返回的权限数据</span><br><span class="line">const permission = [</span><br><span class="line">  &quot;114514:shop:edit&quot;,</span><br><span class="line">  &quot;114514:shop:create&quot;,</span><br><span class="line">  &quot;114514:shop:delete&quot;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const userId = localStorage.getItem(&quot;userId&quot;) as string</span><br><span class="line">const vHasShow:Directive&lt;HTMLElement,string&gt; = (el:HTMLElement, binding:DirectiveBinding)=&gt; &#123;</span><br><span class="line">  // 如果权限表不包含这一条权限，隐藏，否则显示</span><br><span class="line">  if(!permission.includes(userId+&quot;:&quot;+binding.value)) &#123;</span><br><span class="line">    el.style.display = &quot;none&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.btns &#123;</span><br><span class="line">  button &#123;</span><br><span class="line">    margin: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>内容拖拽案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-move class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;header&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;内容&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import type &#123; DirectiveBinding &#125; from &#x27;vue&#x27;;</span><br><span class="line">import type &#123; Directive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const vMove:Directive&lt;any,void&gt; = (el:HTMLElement, binding:DirectiveBinding)=&gt; &#123;</span><br><span class="line">  let moveElement:HTMLDivElement = el.firstElementChild as HTMLDivElement</span><br><span class="line">  const mouseDown = (e:MouseEvent)=&gt; &#123;</span><br><span class="line">    let X = e.clientX - el.offsetLeft</span><br><span class="line">    let Y = e.clientY - el.offsetTop</span><br><span class="line">    const move = (e:MouseEvent)=&gt; &#123;</span><br><span class="line">      el.style.left = e.clientX - X +&quot;px&quot;</span><br><span class="line">      el.style.top = e.clientY - Y +&quot;px&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    document.addEventListener(&quot;mousemove&quot;,move)</span><br><span class="line">    document.addEventListener(&quot;mouseup&quot;,()=&gt;&#123;</span><br><span class="line">      document.removeEventListener(&quot;mousemove&quot;,move)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  moveElement.addEventListener(&quot;mousedown&quot;,mouseDown)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.box &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  left: 50%;</span><br><span class="line">  top: 50%;</span><br><span class="line">  transform: translate(-50%, -50%);</span><br><span class="line">  width: 200px;</span><br><span class="line">  height: 200px;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  .header &#123;</span><br><span class="line">    height: 20px;</span><br><span class="line">    background: black;</span><br><span class="line">    cursor: move;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>图片懒加载案例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;img v-lazy=&quot;item&quot; width=&quot;350&quot; height=&quot;350&quot; v-for=&quot;(item,index) in arr&quot; :key=&quot;index&quot; alt=&quot;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import type &#123; Directive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// glob默认懒加载，就像这样</span><br><span class="line">// let modules = &#123;</span><br><span class="line">//   &quot;xxx&quot;: ()=&gt; import(&quot;xxxxx&quot;)</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// 开启eager是静态加载，就像这样</span><br><span class="line">// import xxx from &quot;xxxxx&quot;</span><br><span class="line"></span><br><span class="line">const imageList:Record&lt;string,&#123;default:string&#125;&gt; = import.meta.glob(&quot;./assets/images/*.*&quot;,&#123;eager:true&#125;)</span><br><span class="line">const arr = Object.values(imageList).map((v:any)=&gt;v.default)</span><br><span class="line"></span><br><span class="line">let vLazy:Directive&lt;HTMLImageElement,string&gt; = async (el,binding)=&gt; &#123;</span><br><span class="line">  // 默认展示加载图片</span><br><span class="line">  const def = await import(&quot;@/assets/loading.gif&quot;)</span><br><span class="line">  el.src = def.default</span><br><span class="line"></span><br><span class="line">  // 滑到可视区内再替换</span><br><span class="line">  // IntersectionObserver监控元素是否在可视区内</span><br><span class="line">  // 虚拟列表也可以通过这个API实现</span><br><span class="line">  // https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver</span><br><span class="line">  const observer = new IntersectionObserver((en)=&gt; &#123;</span><br><span class="line">    // intersectionRatio 元素被展现的比例（不在视口外的比例）</span><br><span class="line">    if(en[0].intersectionRatio&gt;0) &#123;</span><br><span class="line">      el.src=binding.value</span><br><span class="line">      // 停止监听</span><br><span class="line">      observer.unobserve(el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  observer.observe(el)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite目录&amp;Vue单文件组件&amp;npm run dev</title>
    <url>/web/study/vue/3.Vite%E7%9B%AE%E5%BD%95&amp;Vue%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6&amp;npm%20run%20dev.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="Vite目录"><a href="#Vite目录" class="headerlink" title="Vite目录"></a>Vite目录</h1><ul>
<li>public：存放不会被Vite编译的静态资源</li>
<li>src<ul>
<li>assets：存放静态资源</li>
<li>components：存放组件</li>
<li>App.vue：Vue全局入口文件</li>
<li>main.ts：全局TS文件，可以引入全局样式、全局API、配置等</li>
<li>vite-env.d.ts：声明文件扩充，脚手架默认做了*.vue文件的声明扩充</li>
<li>index.html：Vite入口文件，使用ES Module形式引入main.ts</li>
<li>package.json：一些命令、依赖等</li>
<li>tsconfig.json：TS配置文件</li>
<li>vite.config.ts：Vite配置文件</li>
</ul>
</li>
</ul>
<p>Vite基于esbuild做编译；基于rollup.js做打包，性能优异。</p>
<h1 id="单文件组件（SFC）"><a href="#单文件组件（SFC）" class="headerlink" title="单文件组件（SFC）"></a>单文件组件（SFC）</h1><p>主要由三部分组成：</p>
<ul>
<li>script，写JS代码，setup形式的script在一个SFC中只能存在一个，非setup形式可存在多个</li>
<li>template，写HTML标签，在一个SFC中只能存在一个</li>
<li>style：写CSS样式</li>
</ul>
<h1 id="Vue3开发插件"><a href="#Vue3开发插件" class="headerlink" title="Vue3开发插件"></a>Vue3开发插件</h1><p>Volar（Vue Language Features和TypeScript Vue Plugin）：Vue3智能提示，使用时需禁用Vue2的Vetur。</p>
<h1 id="npm-run-dev"><a href="#npm-run-dev" class="headerlink" title="npm run dev"></a>npm run dev</h1><p>终端输入npm run dev命令后进行的全过程：</p>
<ol>
<li>收到命令，寻找package.json的scripts，查看对应的命令</li>
<li>npm run dev对应的是vite命令，执行它<ul>
<li>直接执行vite命令一般不生效，如果没做过相应配置，只能通过npm run dev执行</li>
<li>Vite在package.json中做了一个软链接（到bin），连至bin目录，里面有三个Vite的配置<ul>
<li>vite：主要给UNIX操作系统使用，通过shell脚本执行对应的vite.js</li>
<li>vite.cmd：主要给Windows操作系统使用</li>
<li>vite.ps1：跨平台，在各种操作系统都能使用</li>
</ul>
</li>
<li>查找规则：<ol>
<li>node_modules&#x2F;vite寻找bin中可执行的文件，找到则执行，找不到则到2</li>
<li>去npm全局包找，找到则执行，找不到则到3</li>
<li>找环境变量，找到则执行，找不到则报错</li>
</ol>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>定义全局函数和变量</title>
    <url>/web/study/vue/30.%E5%AE%9A%E4%B9%89%E5%85%A8%E5%B1%80%E5%87%BD%E6%95%B0%E5%92%8C%E5%8F%98%E9%87%8F.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="globalProperties"><a href="#globalProperties" class="headerlink" title="globalProperties"></a>globalProperties</h1><p>Vue3没有Prototype属性，所以使用app.config.globalProperties代替去定义变量和函数。</p>
<p>Vue2：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Vue.prototype.$http = ()=&gt;&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>Vue3：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const app = create App(&#123;&#125;)</span><br><span class="line">app.config.globalProperties.$http = ()=&gt;&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>另外，Vue3废除了filters，但可以用全局函数代替。</p>
<p>main.ts：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其他省略</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$env</span> = <span class="string">&quot;dev&quot;</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$filters</span> = &#123;</span><br><span class="line">  format&lt;T&gt;(<span class="attr">str</span>:T) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`114514<span class="subst">$&#123;str&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Filter</span> = &#123;</span><br><span class="line">  format&lt;T&gt;(<span class="attr">str</span>:T):<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不扩充类型的话使用时会报错</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;vue&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">$env</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">$filters</span>: <span class="title class_">Filter</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 定义完后，可以直接在任何模板中访问到全局函数/变量 --&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; $env &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; $filters.format(&quot;1919810&quot;) &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">// 在ts内则需要通过组件实例获取</span><br><span class="line">const app = getCurrentInstance()</span><br><span class="line">console.log(app?.proxy?.$env)</span><br><span class="line">console.log(app?.proxy?.$filters.format(&quot;1919810&quot;))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>在Vue源码（<code>/package/runtime-core/src/apiCreateApp.ts</code>）中可以看到createApp的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义的很多属性在此初始化</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createAppContext</span>(<span class="params"></span>): <span class="title class_">AppContext</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">app</span>: <span class="literal">null</span> <span class="keyword">as</span> <span class="built_in">any</span>,</span><br><span class="line">    <span class="attr">config</span>: &#123;</span><br><span class="line">      <span class="attr">isNativeTag</span>: <span class="variable constant_">NO</span>,</span><br><span class="line">      <span class="attr">performance</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="comment">// 全局函数变量在这呢</span></span><br><span class="line">      <span class="attr">globalProperties</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">optionMergeStrategies</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">errorHandler</span>: <span class="literal">undefined</span>,</span><br><span class="line">      <span class="attr">warnHandler</span>: <span class="literal">undefined</span>,</span><br><span class="line">      <span class="attr">compilerOptions</span>: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mixins</span>: [],</span><br><span class="line">    <span class="attr">components</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">directives</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">provides</span>: <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>),</span><br><span class="line">    <span class="attr">optionsCache</span>: <span class="keyword">new</span> <span class="title class_">WeakMap</span>(),</span><br><span class="line">    <span class="attr">propsCache</span>: <span class="keyword">new</span> <span class="title class_">WeakMap</span>(),</span><br><span class="line">    <span class="attr">emitsCache</span>: <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> createAppAPI&lt;<span class="title class_">HostElement</span>&gt;(</span><br><span class="line">  <span class="attr">render</span>: <span class="title class_">RootRenderFunction</span>&lt;<span class="title class_">HostElement</span>&gt;,</span><br><span class="line">  hydrate?: <span class="title class_">RootHydrateFunction</span></span><br><span class="line">): <span class="title class_">CreateAppFunction</span>&lt;<span class="title class_">HostElement</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// 返回项目里用到的createApp函数，接收一个根组件（通常是App.vue）</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">createApp</span>(<span class="params">rootComponent, rootProps = <span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isFunction</span>(rootComponent)) &#123;</span><br><span class="line">      rootComponent = <span class="title function_">extend</span>(&#123;&#125;, rootComponent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rootProps != <span class="literal">null</span> &amp;&amp; !<span class="title function_">isObject</span>(rootProps)) &#123;</span><br><span class="line">      __DEV__ &amp;&amp; <span class="title function_">warn</span>(<span class="string">`root props passed to app.mount() must be an object.`</span>)</span><br><span class="line">      rootProps = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">const</span> context = <span class="title function_">createAppContext</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO remove in 3.4</span></span><br><span class="line">    <span class="comment">// 开发团队说这块代码在3.4版本会移除</span></span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(context.<span class="property">config</span>, <span class="string">&#x27;unwrapInjectedRef&#x27;</span>, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="title function_">warn</span>(</span><br><span class="line">            <span class="string">`app.config.unwrapInjectedRef has been deprecated. `</span> +</span><br><span class="line">              <span class="string">`3.3 now alawys unwraps injected refs in Options API.`</span></span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> installedPlugins = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isMounted = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋给app这个对象，填充这些属性和方法</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">app</span>: <span class="title class_">App</span> = (context.<span class="property">app</span> = &#123;</span><br><span class="line">      <span class="attr">_uid</span>: uid++,</span><br><span class="line">      <span class="attr">_component</span>: rootComponent <span class="keyword">as</span> <span class="title class_">ConcreteComponent</span>,</span><br><span class="line">      <span class="attr">_props</span>: rootProps,</span><br><span class="line">      <span class="attr">_container</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">_context</span>: context,</span><br><span class="line">      <span class="attr">_instance</span>: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">      version,</span><br><span class="line"></span><br><span class="line">      <span class="keyword">get</span> <span class="title function_">config</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> context.<span class="property">config</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="keyword">set</span> <span class="title function_">config</span>(<span class="params">v</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">          <span class="title function_">warn</span>(</span><br><span class="line">            <span class="string">`app.config cannot be replaced. Modify individual options instead.`</span></span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 注册一些插件</span></span><br><span class="line">      <span class="title function_">use</span>(<span class="params">plugin: Plugin, ...options: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (installedPlugins.<span class="title function_">has</span>(plugin)) &#123;</span><br><span class="line">          __DEV__ &amp;&amp; <span class="title function_">warn</span>(<span class="string">`Plugin has already been applied to target app.`</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (plugin &amp;&amp; <span class="title function_">isFunction</span>(plugin.<span class="property">install</span>)) &#123;</span><br><span class="line">          installedPlugins.<span class="title function_">add</span>(plugin)</span><br><span class="line">          plugin.<span class="title function_">install</span>(app, ...options)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isFunction</span>(plugin)) &#123;</span><br><span class="line">          installedPlugins.<span class="title function_">add</span>(plugin)</span><br><span class="line">          <span class="title function_">plugin</span>(app, ...options)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">          <span class="title function_">warn</span>(</span><br><span class="line">            <span class="string">`A plugin must either be a function or an object with an &quot;install&quot; `</span> +</span><br><span class="line">              <span class="string">`function.`</span></span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> app</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 注册一些混入</span></span><br><span class="line">      <span class="title function_">mixin</span>(<span class="params">mixin: ComponentOptions</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (__FEATURE_OPTIONS_API__) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!context.<span class="property">mixins</span>.<span class="title function_">includes</span>(mixin)) &#123;</span><br><span class="line">            context.<span class="property">mixins</span>.<span class="title function_">push</span>(mixin)</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">            <span class="title function_">warn</span>(</span><br><span class="line">              <span class="string">&#x27;Mixin has already been applied to target app&#x27;</span> +</span><br><span class="line">                (mixin.<span class="property">name</span> ? <span class="string">`: <span class="subst">$&#123;mixin.name&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">          <span class="title function_">warn</span>(<span class="string">&#x27;Mixins are only available in builds supporting Options API&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> app</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 注册一些全局组件</span></span><br><span class="line">      <span class="title function_">component</span>(<span class="attr">name</span>: <span class="built_in">string</span>, component?: <span class="title class_">Component</span>): <span class="built_in">any</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">          <span class="title function_">validateComponentName</span>(name, context.<span class="property">config</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!component) &#123;</span><br><span class="line">          <span class="keyword">return</span> context.<span class="property">components</span>[name]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (__DEV__ &amp;&amp; context.<span class="property">components</span>[name]) &#123;</span><br><span class="line">          <span class="title function_">warn</span>(<span class="string">`Component &quot;<span class="subst">$&#123;name&#125;</span>&quot; has already been registered in target app.`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        context.<span class="property">components</span>[name] = component</span><br><span class="line">        <span class="keyword">return</span> app</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 注册一些指令</span></span><br><span class="line">      <span class="title function_">directive</span>(<span class="params">name: <span class="built_in">string</span>, directive?: Directive</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">          <span class="title function_">validateDirectiveName</span>(name)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!directive) &#123;</span><br><span class="line">          <span class="keyword">return</span> context.<span class="property">directives</span>[name] <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (__DEV__ &amp;&amp; context.<span class="property">directives</span>[name]) &#123;</span><br><span class="line">          <span class="title function_">warn</span>(<span class="string">`Directive &quot;<span class="subst">$&#123;name&#125;</span>&quot; has already been registered in target app.`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        context.<span class="property">directives</span>[name] = directive</span><br><span class="line">        <span class="keyword">return</span> app</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 挂载到DOM上，app.mount(&quot;#app&quot;)</span></span><br><span class="line">      <span class="title function_">mount</span>(</span><br><span class="line">        <span class="attr">rootContainer</span>: <span class="title class_">HostElement</span>,</span><br><span class="line">        isHydrate?: <span class="built_in">boolean</span>,</span><br><span class="line">        isSVG?: <span class="built_in">boolean</span></span><br><span class="line">      ): <span class="built_in">any</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isMounted) &#123;</span><br><span class="line">          <span class="comment">// #5571</span></span><br><span class="line">          <span class="keyword">if</span> (__DEV__ &amp;&amp; (rootContainer <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">__vue_app__</span>) &#123;</span><br><span class="line">            <span class="title function_">warn</span>(</span><br><span class="line">              <span class="string">`There is already an app instance mounted on the host container.\n`</span> +</span><br><span class="line">                <span class="string">` If you want to mount another app on the same host container,`</span> +</span><br><span class="line">                <span class="string">` you need to unmount the previous app by calling \`app.unmount()\` first.`</span></span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">const</span> vnode = <span class="title function_">createVNode</span>(</span><br><span class="line">            rootComponent <span class="keyword">as</span> <span class="title class_">ConcreteComponent</span>,</span><br><span class="line">            rootProps</span><br><span class="line">          )</span><br><span class="line">          <span class="comment">// store app context on the root VNode.</span></span><br><span class="line">          <span class="comment">// this will be set on the root instance on initial mount.</span></span><br><span class="line">          vnode.<span class="property">appContext</span> = context</span><br><span class="line"></span><br><span class="line">          <span class="comment">// HMR root reload</span></span><br><span class="line">          <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">            context.<span class="property">reload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">              <span class="title function_">render</span>(<span class="title function_">cloneVNode</span>(vnode), rootContainer, isSVG)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (isHydrate &amp;&amp; hydrate) &#123;</span><br><span class="line">            <span class="title function_">hydrate</span>(vnode <span class="keyword">as</span> <span class="title class_">VNode</span>&lt;<span class="title class_">Node</span>, <span class="title class_">Element</span>&gt;, rootContainer <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">render</span>(vnode, rootContainer, isSVG)</span><br><span class="line">          &#125;</span><br><span class="line">          isMounted = <span class="literal">true</span></span><br><span class="line">          app.<span class="property">_container</span> = rootContainer</span><br><span class="line">          <span class="comment">// for devtools and telemetry</span></span><br><span class="line">          ;(rootContainer <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">__vue_app__</span> = app</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (__DEV__ || __FEATURE_PROD_DEVTOOLS__) &#123;</span><br><span class="line">            app.<span class="property">_instance</span> = vnode.<span class="property">component</span></span><br><span class="line">            <span class="title function_">devtoolsInitApp</span>(app, version)</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">getExposeProxy</span>(vnode.<span class="property">component</span>!) || vnode.<span class="property">component</span>!.<span class="property">proxy</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">          <span class="title function_">warn</span>(</span><br><span class="line">            <span class="string">`App has already been mounted.\n`</span> +</span><br><span class="line">              <span class="string">`If you want to remount the same app, move your app creation logic `</span> +</span><br><span class="line">              <span class="string">`into a factory function and create fresh app instances for each `</span> +</span><br><span class="line">              <span class="string">`mount - e.g. \`const createMyApp = () =&gt; createApp(App)\``</span></span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 卸载</span></span><br><span class="line">      <span class="title function_">unmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (isMounted) &#123;</span><br><span class="line">          <span class="title function_">render</span>(<span class="literal">null</span>, app.<span class="property">_container</span>)</span><br><span class="line">          <span class="keyword">if</span> (__DEV__ || __FEATURE_PROD_DEVTOOLS__) &#123;</span><br><span class="line">            app.<span class="property">_instance</span> = <span class="literal">null</span></span><br><span class="line">            <span class="title function_">devtoolsUnmountApp</span>(app)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">delete</span> app.<span class="property">_container</span>.<span class="property">__vue_app__</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">          <span class="title function_">warn</span>(<span class="string">`Cannot unmount an app that is not mounted.`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 依赖注入</span></span><br><span class="line">      <span class="title function_">provide</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (__DEV__ &amp;&amp; (key <span class="keyword">as</span> <span class="built_in">string</span> | <span class="built_in">symbol</span>) <span class="keyword">in</span> context.<span class="property">provides</span>) &#123;</span><br><span class="line">          <span class="title function_">warn</span>(</span><br><span class="line">            <span class="string">`App already provides property with key &quot;<span class="subst">$&#123;<span class="built_in">String</span>(key)&#125;</span>&quot;. `</span> +</span><br><span class="line">              <span class="string">`It will be overwritten with the new value.`</span></span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        context.<span class="property">provides</span>[key <span class="keyword">as</span> <span class="built_in">string</span> | <span class="built_in">symbol</span>] = value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> app</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="title function_">runWithContext</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">        currentApp = app</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">fn</span>()</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          currentApp = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__COMPAT__) &#123;</span><br><span class="line">      <span class="title function_">installAppCompatProperties</span>(app, context, render)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回app</span></span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Vue源码（<code>/package/runtime-core/src/component.ts</code>）中可以看到app.proxy的来源。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setupStatefulComponent函数内</span></span><br><span class="line"><span class="comment">// 用markRaw为对象添加__skip__属性跳过reactive代理，因为它里面自己就做了个代理（防止重复代理）</span></span><br><span class="line"><span class="comment">// 代理了instance.ctx，调用了PublicInstanceProxyHandlers方法</span></span><br><span class="line"><span class="comment">// ctx就是$开头的一些api</span></span><br><span class="line">instance.<span class="property">proxy</span> = <span class="title function_">markRaw</span>(<span class="keyword">new</span> <span class="title class_">Proxy</span>(instance.<span class="property">ctx</span>, <span class="title class_">PublicInstanceProxyHandlers</span>))</span><br></pre></td></tr></table></figure>

<p>在Vue源码（<code>/package/runtime-core/src/componentPublicInstance.ts</code>）中可以看到app.proxy调用的方法PublicInstanceProxyHandlers，其中：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">      <span class="comment">// global properties</span></span><br><span class="line">      <span class="comment">// 赋值全局函数变量</span></span><br><span class="line">      ((globalProperties = appContext.<span class="property">config</span>.<span class="property">globalProperties</span>),</span><br><span class="line">      <span class="comment">// 判断要读取的属性是否存在于globalProperties</span></span><br><span class="line">      <span class="title function_">hasOwn</span>(globalProperties, key))</span><br><span class="line">    )&#123;</span><br><span class="line">      <span class="keyword">if</span> (__COMPAT__) &#123;</span><br><span class="line">        <span class="comment">// 读取属性的描述符，兼容边缘情况</span></span><br><span class="line">        <span class="keyword">const</span> desc = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(globalProperties, key)!</span><br><span class="line">        <span class="comment">// 如果有getter</span></span><br><span class="line">        <span class="keyword">if</span> (desc.<span class="property">get</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> desc.<span class="property">get</span>.<span class="title function_">call</span>(instance.<span class="property">proxy</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> val = globalProperties[key]</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">isFunction</span>(val)</span><br><span class="line">            ? <span class="title class_">Object</span>.<span class="title function_">assign</span>(val.<span class="title function_">bind</span>(instance.<span class="property">proxy</span>), val)</span><br><span class="line">            : val</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 存在就返回</span></span><br><span class="line">        <span class="keyword">return</span> globalProperties[key]</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>编写Vue3插件</title>
    <url>/web/study/vue/31.%E7%BC%96%E5%86%99Vue3%E6%8F%92%E4%BB%B6.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="插件编写"><a href="#插件编写" class="headerlink" title="插件编写"></a>插件编写</h1><p>插件需要暴露一个对象或函数，并通过app.use注册到全局，省略注册过程。</p>
<p>Loading&#x2F;index.ts：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">App</span>, <span class="title class_">VNode</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createVNode,render &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Loading</span> <span class="keyword">from</span> <span class="string">&quot;./index.vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// vue插件 支持对象形式和函数形式</span></span><br><span class="line"><span class="comment">// 对象形式内必须含有install函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app: App</span>) &#123;</span><br><span class="line">    <span class="comment">// 把组件实例转换成VNode</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">VNode</span>:<span class="title class_">VNode</span> = <span class="title function_">createVNode</span>(<span class="title class_">Loading</span>)</span><br><span class="line">    <span class="comment">// 手动给VNode挂载组件</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="title class_">VNode</span>,<span class="variable language_">document</span>.<span class="property">body</span>)</span><br><span class="line">    <span class="title class_">VNode</span>.<span class="property">component</span>?.<span class="property">exposed</span></span><br><span class="line">    <span class="comment">// 把属性和方法放到全局</span></span><br><span class="line">    app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">__loading</span> = &#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="title class_">VNode</span>.<span class="property">component</span>?.<span class="property">exposed</span>?.<span class="property">show</span>,</span><br><span class="line">      <span class="attr">hide</span>: <span class="title class_">VNode</span>.<span class="property">component</span>?.<span class="property">exposed</span>?.<span class="property">hide</span>,</span><br><span class="line">      <span class="attr">isShow</span>: <span class="title class_">VNode</span>.<span class="property">component</span>?.<span class="property">exposed</span>?.<span class="property">isShow</span></span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Loading&#x2F;index.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if=&quot;isShow&quot; class=&quot;loading&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;loading-content&quot;&gt;Loading...&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">const isShow = ref&lt;boolean&gt;(false)</span><br><span class="line"></span><br><span class="line">const show = ()=&gt; isShow.value = true</span><br><span class="line">const hide = ()=&gt; isShow.value = false</span><br><span class="line"></span><br><span class="line">defineExpose(&#123;show,hide,isShow&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.loading &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  inset: 0;</span><br><span class="line">  background: rgba(0, 0, 0, 0.8);</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line"></span><br><span class="line">  &amp;-content &#123;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">    color: #fff;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">const instance = getCurrentInstance()</span><br><span class="line">instance?.proxy?.__loading.show()</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  instance?.proxy?.__loading.hide()</span><br><span class="line">&#125;, 5000)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>手写一个myUse：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">App</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; app &#125; <span class="keyword">from</span> <span class="string">&quot;./main&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Use</span> &#123;</span><br><span class="line">  <span class="attr">install</span>:<span class="function">(<span class="params">app:App,...options:<span class="built_in">any</span>[]</span>)=&gt;</span><span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存策略，防止重复添加</span></span><br><span class="line"><span class="keyword">const</span> installList = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title class_">MyUse</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Use</span>&gt;(<span class="attr">plugin</span>:T,...<span class="attr">options</span>:<span class="built_in">any</span>[]) &#123;</span><br><span class="line">  <span class="comment">// 如果插件已经注册过了，报错</span></span><br><span class="line">  <span class="keyword">if</span>(installList.<span class="title function_">has</span>(plugin)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;already regist!&quot;</span>,plugin)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// use函数其实就是帮把app传给插件</span></span><br><span class="line">    plugin.<span class="title function_">install</span>(app,...options)</span><br><span class="line">    <span class="comment">// 添加到缓存</span></span><br><span class="line">    installList.<span class="title function_">add</span>(plugin)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Vue源码（<code>/package/runtime-core/src/apiCreateApp.ts</code>）中可以看到use的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 缓存机制</span></span><br><span class="line"><span class="keyword">const</span> installedPlugins = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// ......省略</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">use</span>(<span class="params">plugin: Plugin, ...options: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">  <span class="comment">// 组件已经注册过了，报错</span></span><br><span class="line">  <span class="keyword">if</span> (installedPlugins.<span class="title function_">has</span>(plugin)) &#123;</span><br><span class="line">    __DEV__ &amp;&amp; <span class="title function_">warn</span>(<span class="string">`Plugin has already been applied to target app.`</span>)</span><br><span class="line">  <span class="comment">// plugin是否有值，plugin.install是否是函数</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (plugin &amp;&amp; <span class="title function_">isFunction</span>(plugin.<span class="property">install</span>)) &#123;</span><br><span class="line">    <span class="comment">// 添加到缓存并调用插件</span></span><br><span class="line">    installedPlugins.<span class="title function_">add</span>(plugin)</span><br><span class="line">    plugin.<span class="title function_">install</span>(app, ...options)</span><br><span class="line">  <span class="comment">// plugin本身是否是函数</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isFunction</span>(plugin)) &#123;</span><br><span class="line">    <span class="comment">// 添加到缓存并调用插件</span></span><br><span class="line">    installedPlugins.<span class="title function_">add</span>(plugin)</span><br><span class="line">    <span class="title function_">plugin</span>(app, ...options)</span><br><span class="line">  <span class="comment">// 报错</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    <span class="title function_">warn</span>(</span><br><span class="line">      <span class="string">`A plugin must either be a function or an object with an &quot;install&quot; `</span> + <span class="string">`function.`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回app本身主要是方便做链式调用</span></span><br><span class="line">  <span class="keyword">return</span> app</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>scoped和样式穿透</title>
    <url>/web/study/vue/32.scoped%E5%92%8C%E6%A0%B7%E5%BC%8F%E7%A9%BF%E9%80%8F.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="scoped"><a href="#scoped" class="headerlink" title="scoped"></a>scoped</h1><p>Vue scoped通过在DOM结构以及CSS样式上增加唯一不重复的标记data-v-hash的方式，确保样式的唯一性，实现样式私有化模块化的效果。</p>
<blockquote>
<p>这个工作通过PostCSS转译实现。</p>
</blockquote>
<p>scoped的三条渲染规则：</p>
<ul>
<li>给HTML的DOM节点加一个不重复的data属性（形如data-v-114514）以表示唯一性。</li>
<li>在每句CSS选择器末尾（编译后生成的CSS语句）加一个当前组件的data属性选择器（如[data-v-114514]）来私有化样式。</li>
<li>如果组件内部包含其他组件，只会给其他组件的最外层标签加上当前组件的data属性</li>
</ul>
<p><img src="https://image.cheriko.fun/post/202305272107517.png" alt="增加了data属性的DOM"></p>
<p><img src="https://image.cheriko.fun/post/202305272104376.png" alt="增加了属性选择器的CSS"></p>
<h1 id="样式穿透"><a href="#样式穿透" class="headerlink" title="样式穿透"></a>样式穿透</h1><p>主要用于修改常用Vue组件库（例如<a href="https://element-plus.gitee.io/zh-CN/">Element</a>、<a href="https://vant-contrib.gitee.io/vant/v1/#/zh-CN/intro">Vant</a>、<a href="https://www.antdv.com/docs/vue/introduce-cn/">Ant Design</a>等）的默认自带样式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;el-input placeholder=&quot;测试&quot; class=&quot;ipt&quot;&gt;&lt;/el-input&gt;</span><br><span class="line">  &lt;/main&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.ipt &#123;</span><br><span class="line">  width: 300px;</span><br><span class="line">  margin: 100px 400px;</span><br><span class="line">  // 这样做因为scoped的机制，是无法应用样式的</span><br><span class="line">  .el-input__inner &#123;</span><br><span class="line">    background-color: green;</span><br><span class="line">  &#125;</span><br><span class="line">  :deep(.el-input__inner) &#123;</span><br><span class="line">    background-color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.cheriko.fun/post/202305272111482.png" alt="属性选择器被放到.ipt后面而非.el-input__inner后面"></p>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>在Vue源码（<code>/package/compiler-sfc/src/compileStyle.ts</code>）中可以看到scoped和样式穿透的源码。</p>
<blockquote>
<p>compiler-sfc用于处理.Vue单文件组件。</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">doCompileStyle</span>(<span class="params"></span></span><br><span class="line"><span class="params">  options: SFCAsyncStyleCompileOptions</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">SFCStyleCompileResults</span> | <span class="title class_">Promise</span>&lt;<span class="title class_">SFCStyleCompileResults</span>&gt; &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ......省略</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// PostCSS插件</span></span><br><span class="line">  <span class="keyword">const</span> plugins = (postcssPlugins || []).<span class="title function_">slice</span>()</span><br><span class="line">  plugins.<span class="title function_">unshift</span>(<span class="title function_">cssVarsPlugin</span>(&#123; <span class="attr">id</span>: shortId, isProd &#125;))</span><br><span class="line">  <span class="keyword">if</span> (trim) &#123;</span><br><span class="line">    plugins.<span class="title function_">push</span>(<span class="title function_">trimPlugin</span>())</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果scoped = true就向postCss添加一个插件</span></span><br><span class="line">  <span class="keyword">if</span> (scoped) &#123;</span><br><span class="line">    plugins.<span class="title function_">push</span>(<span class="title function_">scopedPlugin</span>(longId))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ......省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>/package/compiler-sfc/src/style/pluginScoped.ts</code>中可以看到对PostCSS的使用。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// PostCSS插件</span></span><br><span class="line"><span class="comment">// PostCSS接收一个CSS文件并提供一个API来分析，修改它的规则（通过把CSS规则转换成一个抽象语法树的形式）</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">scopedPlugin</span>: <span class="title class_">PluginCreator</span>&lt;<span class="built_in">string</span>&gt; = <span class="function">(<span class="params">id = <span class="string">&#x27;&#x27;</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> keyframes = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> shortId = id.<span class="title function_">replace</span>(<span class="regexp">/^data-v-/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 定义PostCSS插件名称</span></span><br><span class="line">    <span class="attr">postcssPlugin</span>: <span class="string">&#x27;vue-sfc-scoped&#x27;</span>,</span><br><span class="line">    <span class="comment">// 处理CSS的AST</span></span><br><span class="line">    <span class="title class_">Rule</span>(rule) &#123;</span><br><span class="line">      <span class="title function_">processRule</span>(id, rule)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 处理@相关的CSS 例如media keyframes</span></span><br><span class="line">    <span class="title class_">AtRule</span>(node) &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        <span class="regexp">/-?keyframes$/</span>.<span class="title function_">test</span>(node.<span class="property">name</span>) &amp;&amp;</span><br><span class="line">        !node.<span class="property">params</span>.<span class="title function_">endsWith</span>(<span class="string">`-<span class="subst">$&#123;shortId&#125;</span>`</span>)</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">// register keyframes</span></span><br><span class="line">        keyframes[node.<span class="property">params</span>] = node.<span class="property">params</span> = node.<span class="property">params</span> + <span class="string">&#x27;-&#x27;</span> + shortId</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 最后执行而且只处理一次</span></span><br><span class="line">    <span class="title class_">OnceExit</span>(root) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">keys</span>(keyframes).<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="comment">// If keyframes are found in this &lt;style&gt;, find and rewrite animation names</span></span><br><span class="line">        <span class="comment">// in declarations.</span></span><br><span class="line">        <span class="comment">// Caveat: this only works for keyframes and animation rules in the same</span></span><br><span class="line">        <span class="comment">// &lt;style&gt; element.</span></span><br><span class="line">        <span class="comment">// individual animation-name declaration</span></span><br><span class="line">        root.<span class="title function_">walkDecls</span>(<span class="function"><span class="params">decl</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (animationNameRE.<span class="title function_">test</span>(decl.<span class="property">prop</span>)) &#123;</span><br><span class="line">            decl.<span class="property">value</span> = decl.<span class="property">value</span></span><br><span class="line">              .<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">              .<span class="title function_">map</span>(<span class="function"><span class="params">v</span> =&gt;</span> keyframes[v.<span class="title function_">trim</span>()] || v.<span class="title function_">trim</span>())</span><br><span class="line">              .<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// shorthand</span></span><br><span class="line">          <span class="keyword">if</span> (animationRE.<span class="title function_">test</span>(decl.<span class="property">prop</span>)) &#123;</span><br><span class="line">            decl.<span class="property">value</span> = decl.<span class="property">value</span></span><br><span class="line">              .<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">              .<span class="title function_">map</span>(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> vals = v.<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="regexp">/\s+/</span>)</span><br><span class="line">                <span class="keyword">const</span> i = vals.<span class="title function_">findIndex</span>(<span class="function"><span class="params">val</span> =&gt;</span> keyframes[val])</span><br><span class="line">                <span class="keyword">if</span> (i !== -<span class="number">1</span>) &#123;</span><br><span class="line">                  vals.<span class="title function_">splice</span>(i, <span class="number">1</span>, keyframes[vals[i]])</span><br><span class="line">                  <span class="keyword">return</span> vals.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">return</span> v</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">              .<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 做缓存，如果已经有这个rule（一个AST）就不操作了</span></span><br><span class="line"><span class="keyword">const</span> processedRules = <span class="keyword">new</span> <span class="title class_">WeakSet</span>&lt;<span class="title class_">Rule</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processRule</span>(<span class="params">id: <span class="built_in">string</span>, rule: Rule</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    processedRules.<span class="title function_">has</span>(rule) ||</span><br><span class="line">    (rule.<span class="property">parent</span> &amp;&amp;</span><br><span class="line">      rule.<span class="property">parent</span>.<span class="property">type</span> === <span class="string">&#x27;atrule&#x27;</span> &amp;&amp;</span><br><span class="line">      <span class="regexp">/-?keyframes$/</span>.<span class="title function_">test</span>((rule.<span class="property">parent</span> <span class="keyword">as</span> <span class="title class_">AtRule</span>).<span class="property">name</span>))</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  processedRules.<span class="title function_">add</span>(rule)</span><br><span class="line">  <span class="comment">// 遍历AST节点</span></span><br><span class="line">  rule.<span class="property">selector</span> = <span class="title function_">selectorParser</span>(<span class="function"><span class="params">selectorRoot</span> =&gt;</span> &#123;</span><br><span class="line">    selectorRoot.<span class="title function_">each</span>(<span class="function"><span class="params">selector</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">rewriteSelector</span>(id, selector, selectorRoot)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).<span class="title function_">processSync</span>(rule.<span class="property">selector</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Style</title>
    <url>/web/study/vue/33.Vue%20Style.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="插槽选择器"><a href="#插槽选择器" class="headerlink" title="插槽选择器"></a>插槽选择器</h1><p>选择插槽内的元素。</p>
<p>A.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是插槽</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">// 这样做不会生效，因为vue会将a理解为父级的类名</span><br><span class="line">// .a &#123;</span><br><span class="line">//   color: red;</span><br><span class="line">// &#125;</span><br><span class="line">// 插槽选择器，vue会认为a是子组件的类名，这样就能生效了</span><br><span class="line">:slotted(.a) &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>App.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;A&gt;</span><br><span class="line">    &lt;div class=&quot;a&quot;&gt;插入&lt;/div&gt;</span><br><span class="line">  &lt;/A&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import A from &#x27;@/components/A.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="全局选择器"><a href="#全局选择器" class="headerlink" title="全局选择器"></a>全局选择器</h1><p>在全局选择元素（不限作用域）。</p>
<p>A.vue：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    我是插槽</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">// 也可以用全局选择器</span><br><span class="line">:global(.a) &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">// 可以直接开一个新的style，不加scoped，就可以作用于全局</span><br><span class="line">// .a &#123;</span><br><span class="line">//   color: red;</span><br><span class="line">// &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h1 id="动态CSS"><a href="#动态CSS" class="headerlink" title="动态CSS"></a>动态CSS</h1><p>可以通过JS变量控制CSS。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;div1&quot;&gt;</span><br><span class="line">    动态CSS1</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;div2&quot;&gt;</span><br><span class="line">    动态CSS2</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">const style1 = ref(&quot;red&quot;)</span><br><span class="line">const style2 = ref(&#123;</span><br><span class="line">  color:&#x27;red&#x27;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 可以通过js控制样式</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  style1.value = &quot;blue&quot;</span><br><span class="line">  style2.value.color = &quot;blue&quot;</span><br><span class="line">&#125;, 2000)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.div1 &#123;</span><br><span class="line">  color: v-bind(style1)</span><br><span class="line">&#125;</span><br><span class="line">.div2 &#123;</span><br><span class="line">  // 不能直接读取对象属性，会报错，需要加引号</span><br><span class="line">  color: v-bind(&quot;style2.color&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>也可以将Style标签作为模块使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 如果没有给style模块标签命名就这么写 --&gt;</span><br><span class="line">  &lt;!-- &lt;div :class=&quot;[$style.div,$style.border]&quot;&gt; --&gt;</span><br><span class="line">  &lt;!-- 如果给style模块标签命了名就这么写 --&gt;</span><br><span class="line">  &lt;div :class=&quot;[cssss.div,cssss.border]&quot;&gt;</span><br><span class="line">    动态CSS</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">const css = useCssModule(&quot;cssss&quot;)</span><br><span class="line">// 可以读到实际生成的类名</span><br><span class="line">console.log(css)</span><br><span class="line">// 常用于tsx或render函数</span><br><span class="line">// return(&lt;div class=&#123;cssss.div&#125;&gt;&lt;/div&gt;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style module=&quot;cssss&quot; lang=&quot;scss&quot;&gt;</span><br><span class="line">.div &#123;</span><br><span class="line">  color: red</span><br><span class="line">&#125;</span><br><span class="line">.border &#123;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3集成Tailwind CSS</title>
    <url>/web/study/vue/34.Vue3%E9%9B%86%E6%88%90Tailwind%20CSS.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="Tailwind-CSS"><a href="#Tailwind-CSS" class="headerlink" title="Tailwind CSS"></a>Tailwind CSS</h1><p><a href="https://www.tailwindcss.cn/">Tailwind CSS</a>是由JS编写的CSS框架，基于PostCSS解析。</p>
<ul>
<li>通过一套约束系统保证一致性，避免随意的取值。</li>
<li>因为抽象层级较低，所以可定制性强。</li>
<li>在生产环境中会进行Tree Shake，自动删除未使用的CSS。</li>
<li>简化响应式设计。</li>
<li>简化互动设计，例如鼠标悬停或焦点状态。</li>
<li>支持在自定义类中组合Tailwind工具类使用。</li>
<li>支持夜间模式。</li>
<li>支持自定义工具类。</li>
<li>跟进前沿CSS技术。</li>
</ul>
<h1 id="PostCSS"><a href="#PostCSS" class="headerlink" title="PostCSS"></a>PostCSS</h1><p><a href="https://www.postcss.com.cn/">PostCSS</a>是一个用JS转换CSS代码的工具。</p>
<ul>
<li>增强代码的可读性，利用<a href="https://caniuse.com/">Can I use</a>网站的数据自动添加厂商前缀。</li>
<li>将最新前沿CSS语法转换为兼容性好的语法。</li>
<li>终结全局CSS</li>
<li>使用Stylelint检查代码，避免错误。</li>
</ul>
<h1 id="PostCSS解析Tailwind-CSS"><a href="#PostCSS解析Tailwind-CSS" class="headerlink" title="PostCSS解析Tailwind CSS"></a>PostCSS解析Tailwind CSS</h1><ol>
<li>将CSS解析成抽象语法树（AST）</li>
<li>读取插件配置，根据配置文件生成新的AST</li>
<li>将AST传递给一系列数据转化操作处理（变量数据循环生成、嵌套类名循环等）</li>
<li>清除一系列操作留下的数据痕迹</li>
<li>将处理完毕的AST重新转换成字符串</li>
</ol>
<h1 id="Vue3集成Tailwind-CSS"><a href="#Vue3集成Tailwind-CSS" class="headerlink" title="Vue3集成Tailwind CSS"></a>Vue3集成Tailwind CSS</h1><ol>
<li><p>初始化项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 Tailwind 以及其它依赖项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -D tailwindcss@latest postcss@latest autoprefixer@latest</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成配置文件（<a href="https://www.tailwindcss.cn/docs/configuration">Tailwind CSS配置</a>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx tailwindcss init -p</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改配置文件 tailwind.config.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;tailwindcss&#x27;).Config</span>&#125; */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">content</span>: [<span class="string">&quot;./index.html&quot;</span>,<span class="string">&quot;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&quot;</span>],</span><br><span class="line">  <span class="attr">theme</span>: &#123;</span><br><span class="line">    <span class="attr">extend</span>: &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建index.css</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@tailwind base;</span><br><span class="line">@tailwind components;</span><br><span class="line">@tailwind utilities;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在main.ts中引入index.css</p>
</li>
<li><p>测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden md:max-w-2xl&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;md:flex&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;md:flex-shrink-0&quot;&gt;</span><br><span class="line">        &lt;img class=&quot;h-48 w-full object-cover md:w-48&quot; src=&quot;https://image.cheriko.fun/music/202304301615221.jpg&quot; alt=&quot;Man looking at item at a store&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;p-8&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;uppercase tracking-wide text-sm text-indigo-500 font-semibold&quot;&gt;Lorem ipsum&lt;/div&gt;</span><br><span class="line">        &lt;a href=&quot;#&quot; class=&quot;block mt-1 text-lg leading-tight font-medium text-black hover:underline&quot;&gt;dolor sit, amet consectetur adipisicing elit.&lt;/a&gt;</span><br><span class="line">        &lt;p class=&quot;mt-2 text-gray-500&quot;&gt;Iusto, quae! Pariatur mollitia nulla ipsa. Velit, totam!&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">      </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>VS Code可以安装Tailwind CSS IntelliSense扩展获取代码提示。</p>
</blockquote>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue开发移动端</title>
    <url>/web/study/vue/36.Vue%E5%BC%80%E5%8F%91%E7%A7%BB%E5%8A%A8%E7%AB%AF.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="移动端尺寸"><a href="#移动端尺寸" class="headerlink" title="移动端尺寸"></a>移动端尺寸</h1><p>开发移动端最重要的是适配各种手机，所以应该使用相对尺寸单位，比如根据HTML font-size做缩放的rem，或与视口高度&#x2F;宽度有关的vw&#x2F;vh。</p>
<p>但前端设计稿通常采用px设计，为了适应多尺寸，需要对单位做转化。</p>
<p>可以使用插件postcss-px-to-viewport将px转化为vw&#x2F;vh。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install postcss-px-to-viewport -d</span><br></pre></td></tr></table></figure>

<p>配置（vite.config.js）：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">postcss</span>: &#123;</span><br><span class="line">      <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title function_">pxtoViewPort</span>(&#123;</span><br><span class="line">          <span class="attr">unitToConvert</span>: <span class="string">&#x27;px&#x27;</span>, <span class="comment">// 要转化的单位</span></span><br><span class="line">          <span class="attr">viewportWidth</span>: <span class="number">320</span>, <span class="comment">// UI设计稿的宽度</span></span><br><span class="line">          <span class="comment">// unitPrecision: 6, // 转换后的精度，即小数点位数</span></span><br><span class="line">          <span class="comment">// propList: [&#x27;*&#x27;], // 指定转换的css属性的单位，*代表全部css属性的单位都进行转换</span></span><br><span class="line">          <span class="comment">// viewportUnit: &#x27;vw&#x27;, // 指定需要转换成的视窗单位，默认vw</span></span><br><span class="line">          <span class="comment">// fontViewportUnit: &#x27;vw&#x27;, // 指定字体需要转换成的视窗单位，默认vw</span></span><br><span class="line">          <span class="comment">// selectorBlackList: [&#x27;ignore-&#x27;], // 指定不转换为视窗单位的类名，</span></span><br><span class="line">          <span class="comment">// minPixelValue: 1, // 默认值1，小于或等于1px则不进行转换</span></span><br><span class="line">          <span class="comment">// mediaQuery: true, // 是否在媒体查询的css代码中也进行转换，默认false</span></span><br><span class="line">          <span class="comment">// replace: true, // 是否转换后直接更换属性值</span></span><br><span class="line">          <span class="comment">// landscape: false // 是否处理横屏情况</span></span><br><span class="line">        &#125;)</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试（App.vue）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;test&quot;&gt;</span><br><span class="line">    草</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">.test &#123;</span><br><span class="line">  // 这里写的是px</span><br><span class="line">  width: 200px;</span><br><span class="line">  background-color: pink;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://image.cheriko.fun/post/202306021551654.png" alt="但是被变成vw啦"></p>
<p>可以看到px单位被转化成了vw</p>
<h1 id="打包成安卓应用"><a href="#打包成安卓应用" class="headerlink" title="打包成安卓应用"></a>打包成安卓应用</h1><ol>
<li><p>新建一个Android Studio项目</p>
</li>
<li><p>将res&#x2F;layout&#x2F;activity_main.xml代码修改成：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span>  <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/activity_main&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">WebView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/web_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将程序包的MainActivity.java代码修改成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.vuetest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebView;</span><br><span class="line"><span class="keyword">import</span> android.webkit.WebViewClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取id为web_view的WebView XML标签</span></span><br><span class="line">        <span class="type">WebView</span> <span class="variable">view</span> <span class="operator">=</span> findViewById(R.id.web_view);</span><br><span class="line">        <span class="comment">// 运行执行JavaScript脚本</span></span><br><span class="line">        view.getSettings().setJavaScriptEnabled(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// Vue项目的服务器地址</span></span><br><span class="line">        view.loadUrl(<span class="string">&quot;http://10.0.2.2:5173&quot;</span>);</span><br><span class="line">        view.setWebViewClient(<span class="keyword">new</span> <span class="title class_">WebViewClient</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将manifests&#x2F;AndroidManifest.xml代码修改成：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.example.vuetest&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/app_name&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:usesCleartextTraffic</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">&quot;@style/Theme.VueTest&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:exported</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.INTERNET&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_NETWORK_STATE&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.ACCESS_WIFI_STATE&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Event Loop和nextTick</title>
    <url>/web/study/vue/35.Event%20Loop%E5%92%8CnextTick.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h1><h2 id="JavaScript单线程"><a href="#JavaScript单线程" class="headerlink" title="JavaScript单线程"></a>JavaScript单线程</h2><p>JavaScript被设计成单线程，主要的原因还是在于操作DOM ，包括在异步的事件处理器中操作DOM。</p>
<p>如果JS是多线程，那么操作DOM必然会涉及资源的竞争，这款语言就必然被实现的非常臃肿，在客户端中跑这样的程序，资源消耗和性能都将是不乐观的，同时在客户端也没有实现多线程的刚需。</p>
<p>如果设计成单线程，并辅以完善的异步队列来实现，那么运行成本就会比多线程小很多了。</p>
<p>随着HTML5的到来，JavaScript也开始支持多线程webWorker，但它不能操作DOM。</p>
<h2 id="JavaScript异步"><a href="#JavaScript异步" class="headerlink" title="JavaScript异步"></a>JavaScript异步</h2><p>单线程就意味着所有的任务都需要排队，后面的任务需要等前面的任务执行完才能执行。</p>
<p>如果前面的任务耗时过长，后面的任务就需要一直等，一些从用户角度上不需要等待的任务就会一直排队。</p>
<p>这从用户体验角度上是不可接受的，所以JavaScript就有了异步。</p>
<h3 id="同步任务"><a href="#同步任务" class="headerlink" title="同步任务"></a>同步任务</h3><p>代码从上到下按顺序执行。</p>
<h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><h4 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h4><p>script（整体代码）、setTimeout、setInterval、UI交互事件、postMessage、Ajax</p>
<h4 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h4><p>Promise.then.catch.finally、MutationObserver、process.nextTice（Node.js环境）</p>
<h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><p>所有的同步任务都是在主进程执行的，形成了一个执行栈。</p>
<p>主线程之外，还存在一个“任务队列”。异步任务执行队列中，先执行宏任务，然后清空当次宏任务中的所有微任务，然后进行下一个tick，如此形成循环。</p>
<p><img src="https://image.cheriko.fun/post/202305282104387.png" alt="运行机制"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">Prom</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Y&quot;</span>)</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;X&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">8</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Prom</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// 执行顺序：Y 0 5 6 7 8 X 1 2 3 4</span></span><br></pre></td></tr></table></figure>

<h1 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h1><p>创建一个异步任务，它要等到同步任务执行完成后才执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=&quot;box&quot; class=&quot;wraps&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;div class=&quot;item&quot; v-for=&quot;(item,index) in chatList&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123; item.name &#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123; item.message &#125;&#125;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;ipt&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;textarea v-model=&quot;ipt&quot; type=&quot;text&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button @click=&quot;send&quot;&gt;send&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt; </span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">const chatList = reactive([</span><br><span class="line">  &#123;name:&quot;张三&quot;,message:&quot;xxxxxxxxxx&quot;&#125;,</span><br><span class="line">])</span><br><span class="line">const box = ref&lt;HTMLDivElement&gt;()</span><br><span class="line">const ipt = ref(&quot;&quot;)</span><br><span class="line">const send = async ()=&gt; &#123;</span><br><span class="line">  if(ipt.value === &quot;&quot;) return</span><br><span class="line">  chatList.push(&#123;name:&quot;李四&quot;,message:ipt.value&#125;)</span><br><span class="line">  // 直接操作DOM的滚动高度，有时好使有时不好使</span><br><span class="line">  // box.value!.scrollTop = 1145141919</span><br><span class="line">  // Vue更新DOM是异步的，更新数据是同步的</span><br><span class="line">  // 此处执行的都是同步代码，走完才去更新DOM</span><br><span class="line">  // 造成了先开始滚动，还没滚完就被插入DOM，于是滚动高度混乱的情况</span><br><span class="line"></span><br><span class="line">  // 1.回调函数模式</span><br><span class="line">  // nextTick(()=&gt; &#123;</span><br><span class="line">  //   box.value!.scrollTop = 1145141919</span><br><span class="line">  // &#125;)</span><br><span class="line"></span><br><span class="line">  // 2.async await写法（从此之后的代码都是异步的啦）</span><br><span class="line">  await nextTick()</span><br><span class="line">  box.value!.scrollTop = 1145141919</span><br><span class="line">  ipt.value = &quot;&quot;</span><br><span class="line"></span><br><span class="line">  // 当操作DOM时发现数据读取的还是上次的，就需要使用nextTick</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.wraps &#123;</span><br><span class="line">  margin: 10px auto;</span><br><span class="line">  width: 500px;</span><br><span class="line">  height: 400px;</span><br><span class="line">  overflow: auto;</span><br><span class="line">  overflow-x: hidden;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line"></span><br><span class="line">  .item &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 50px;</span><br><span class="line">    background-color: #ccc;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">    padding: 0 10px;</span><br><span class="line">    border-bottom: 1px solid #fff;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">.ipt &#123;</span><br><span class="line">  margin: 10px auto;</span><br><span class="line">  width: 500px;</span><br><span class="line">  height: 40px;</span><br><span class="line">  background: #fff;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line"> </span><br><span class="line">  textarea &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">    border: none;</span><br><span class="line">    outline: none;</span><br><span class="line">  &#125;</span><br><span class="line">  button &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    margin: 10px 0;</span><br><span class="line">    float: right;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>浏览器在一个tick里做了如下工作：</p>
<ol>
<li>处理用户的事件（event），例如click、input、change等</li>
<li>执行定时器任务</li>
<li>执行requestAnimationFrame</li>
<li>执行dom的回流与重绘</li>
<li>计算更新图层的绘制指令</li>
<li>绘制指令合并主线程 如果有空余时间会执行requestidlecallback</li>
</ol>
<p>如果DOM改变的操作是同步的，如果短时间内某响应式数据持续变化，DOM就会接连改变，消耗性能。如果是异步，下一个tick读取数据并改变DOM，就不会接连改变DOM。</p>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>在Vue源码（<code>/package/runtime-core/src/scheduler.ts</code>）中可以看到nextTick和异步DOM更新的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">queue</span>: <span class="title class_">SchedulerJob</span>[] = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resolvedPromise = <span class="comment">/*#__PURE__*/</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>() <span class="keyword">as</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">currentFlushPromise</span>: <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; | <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过Promise.then()实现异步执行nextTick的回调函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> nextTick&lt;T = <span class="built_in">void</span>&gt;(</span><br><span class="line">  <span class="attr">this</span>: T,</span><br><span class="line">  fn?: <span class="function">(<span class="params"><span class="variable language_">this</span>: T</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">): <span class="title class_">Promise</span>&lt;<span class="built_in">void</span>&gt; &#123;</span><br><span class="line">  <span class="comment">// p是一个promise</span></span><br><span class="line">  <span class="keyword">const</span> p = currentFlushPromise || resolvedPromise</span><br><span class="line">  <span class="comment">// 把传入的函数放到.then()里执行，走了个微任务</span></span><br><span class="line">  <span class="keyword">return</span> fn ? p.<span class="title function_">then</span>(<span class="variable language_">this</span> ? fn.<span class="title function_">bind</span>(<span class="variable language_">this</span>) : fn) : p</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// nextTick的原理就是把函数放进Promise里执行，把代码变异步</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// job就是组件实例上的update方法（effect函数）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">queueJob</span>(<span class="params">job: SchedulerJob</span>) &#123;</span><br><span class="line">  <span class="comment">// the dedupe search uses the startIndex argument of Array.includes()</span></span><br><span class="line">  <span class="comment">// by default the search index includes the current job that is being run</span></span><br><span class="line">  <span class="comment">// so it cannot recursively trigger itself again.</span></span><br><span class="line">  <span class="comment">// if the job is a watch() callback, the search will start with a +1 index to</span></span><br><span class="line">  <span class="comment">// allow it recursively trigger itself - it is the user&#x27;s responsibility to</span></span><br><span class="line">  <span class="comment">// ensure it doesn&#x27;t end up in an infinite loop.</span></span><br><span class="line">  <span class="comment">// 去重判断</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    !queue.<span class="property">length</span> ||</span><br><span class="line">    !queue.<span class="title function_">includes</span>(</span><br><span class="line">      job,</span><br><span class="line">      isFlushing &amp;&amp; job.<span class="property">allowRecurse</span> ? flushIndex + <span class="number">1</span> : flushIndex</span><br><span class="line">    )</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (job.<span class="property">id</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果组件实例没有id，添加到队列尾部</span></span><br><span class="line">      queue.<span class="title function_">push</span>(job)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 按照id自增的顺序排列job</span></span><br><span class="line">      queue.<span class="title function_">splice</span>(<span class="title function_">findInsertionIndex</span>(job.<span class="property">id</span>), <span class="number">0</span>, job)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">queueFlush</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queueFlush</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!isFlushing &amp;&amp; !isFlushPending) &#123;</span><br><span class="line">    isFlushPending = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 创建了一个promise微任务 把flushJobs放进去执行</span></span><br><span class="line">    currentFlushPromise = resolvedPromise.<span class="title function_">then</span>(flushJobs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flushJobs</span>(<span class="params">seen?: CountMap</span>) &#123;</span><br><span class="line">  isFlushPending = <span class="literal">false</span></span><br><span class="line">  isFlushing = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">    seen = seen || <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Sort queue before flush.</span></span><br><span class="line">  <span class="comment">// This ensures that:</span></span><br><span class="line">  <span class="comment">// 1. Components are updated from parent to child. (because parent is always</span></span><br><span class="line">  <span class="comment">//    created before the child so its render effect will have smaller</span></span><br><span class="line">  <span class="comment">//    priority number)</span></span><br><span class="line">  <span class="comment">// 2. If a component is unmounted during a parent component&#x27;s update,</span></span><br><span class="line">  <span class="comment">//    its update can be skipped.</span></span><br><span class="line">  <span class="comment">// 给队列进行排序</span></span><br><span class="line">  queue.<span class="title function_">sort</span>(comparator)</span><br><span class="line">  <span class="comment">// 更新前确保队列是正确的</span></span><br><span class="line">  <span class="comment">// 先创建父组件再创建子组件</span></span><br><span class="line">  <span class="comment">// 如果父组件更新时子组件被卸载了，那么子组件的更新可以被跳过</span></span><br><span class="line">  <span class="comment">// conditional usage of checkRecursiveUpdate must be determined out of</span></span><br><span class="line">  <span class="comment">// try ... catch block since Rollup by default de-optimizes treeshaking</span></span><br><span class="line">  <span class="comment">// inside try-catch. This can leave all warning code unshaked. Although</span></span><br><span class="line">  <span class="comment">// they would get eventually shaken by a minifier like terser, some minifiers</span></span><br><span class="line">  <span class="comment">// would fail to do that (e.g. https://github.com/evanw/esbuild/issues/1610)</span></span><br><span class="line">  <span class="keyword">const</span> check = __DEV__</span><br><span class="line">    ? <span class="function">(<span class="params">job: SchedulerJob</span>) =&gt;</span> <span class="title function_">checkRecursiveUpdates</span>(seen!, job)</span><br><span class="line">    : <span class="variable constant_">NOOP</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历queue队列批量执行</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (flushIndex = <span class="number">0</span>; flushIndex &lt; queue.<span class="property">length</span>; flushIndex++) &#123;</span><br><span class="line">      <span class="keyword">const</span> job = queue[flushIndex]</span><br><span class="line">      <span class="keyword">if</span> (job &amp;&amp; job.<span class="property">active</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (__DEV__ &amp;&amp; <span class="title function_">check</span>(job)) &#123;</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// console.log(`running:`, job.id)</span></span><br><span class="line">        <span class="comment">// 执行job函数</span></span><br><span class="line">        <span class="title function_">callWithErrorHandling</span>(job, <span class="literal">null</span>, <span class="title class_">ErrorCodes</span>.<span class="property">SCHEDULER</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 执行完成 重置状态</span></span><br><span class="line">    flushIndex = <span class="number">0</span></span><br><span class="line">    queue.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行不同的调度策略</span></span><br><span class="line">    <span class="title function_">flushPostFlushCbs</span>(seen)</span><br><span class="line"></span><br><span class="line">    isFlushing = <span class="literal">false</span></span><br><span class="line">    currentFlushPromise = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// some postFlushCb queued jobs!</span></span><br><span class="line">    <span class="comment">// keep flushing until it drains.</span></span><br><span class="line">    <span class="keyword">if</span> (queue.<span class="property">length</span> || pendingPostFlushCbs.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="title function_">flushJobs</span>(seen)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>模板语法&amp;Vue指令</title>
    <url>/web/study/vue/4.%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95&amp;Vue%E6%8C%87%E4%BB%A4.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="Vue3书写风格"><a href="#Vue3书写风格" class="headerlink" title="Vue3书写风格"></a>Vue3书写风格</h1><p>Vue3支持三种书写风格：</p>
<ul>
<li><p>选项式API（Options API），Vue2的写法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // data() 返回的属性将会成为响应式的状态</span><br><span class="line">  // 并且暴露在 `this` 上</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // methods 是一些用来更改状态与触发更新的函数</span><br><span class="line">  // 它们可以在模板中作为事件监听器绑定</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">      this.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 生命周期钩子会在组件生命周期的各个不同阶段被调用</span><br><span class="line">  // 例如这个函数就会在组件挂载完成后被调用</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(`The initial count is $&#123;this.count&#125;.`)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;Count is: &#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>组合式API（Composition API）</p>
<ul>
<li><p>setup函数形式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; setup, ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    // 响应式状态</span><br><span class="line">	const count = ref(0)</span><br><span class="line"></span><br><span class="line">	// 用来修改状态、触发更新的函数</span><br><span class="line">	function increment() &#123;</span><br><span class="line">  	  count.value++</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// 生命周期钩子</span><br><span class="line">	onMounted(() =&gt; &#123;</span><br><span class="line">      console.log(`The initial count is $&#123;count.value&#125;.`)</span><br><span class="line">	&#125;)</span><br><span class="line">	</span><br><span class="line">	// 必须将数据return出去，这样才能被展示</span><br><span class="line">	return &#123;</span><br><span class="line">	  count</span><br><span class="line">	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;Count is: &#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>setup语法糖模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 响应式状态</span><br><span class="line">// 不需要return，直接可以被展示</span><br><span class="line">const count = ref(0)</span><br><span class="line"></span><br><span class="line">// 用来修改状态、触发更新的函数</span><br><span class="line">function increment() &#123;</span><br><span class="line">  count.value++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 生命周期钩子</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  console.log(`The initial count is $&#123;count.value&#125;.`)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;Count is: &#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><p>template中可以使用插值语法<code>&#123;&#123; xxx &#125;&#125;</code>，可以用变量、简单的运算、API调用等展示内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 编译成&lt;div&gt;1&lt;/div&gt; --&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; a &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 编译成&lt;div&gt;2&lt;/div&gt; --&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; a + 1 &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 编译成&lt;div&gt;true&lt;/div&gt; --&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; a? &quot;true&quot;: &quot;false&quot; &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 编译成&lt;div&gt;[&#123;&quot;num&quot;:1&#125;,&#123;&quot;num&quot;:2&#125;,&#123;&quot;num&quot;:3&#125;,&#123;&quot;num&quot;:4&#125;,&#123;&quot;num&quot;:5&#125;]&lt;/div&gt; --&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; b.map(value=&gt;(&#123;num:v&#125;) &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const a = 1</span><br><span class="line">const b = [1,2,3,4,5]</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h1><p>“v-“开头的都是vue的（内置）指令，可以直接使用</p>
<ul>
<li><p><code>v-text</code>：显示文本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 编译成&lt;div&gt;我是一段文字&lt;/div&gt; --&gt;</span><br><span class="line">  &lt;div v-text=&quot;a&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const a = &quot;我是一段文字&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-html</code>：展示富文本，但不支持组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 编译成&lt;div&gt;&lt;section style=&#x27;color:red;&#x27;&gt;我是一段文字&lt;/section&gt;&lt;/div&gt; --&gt;</span><br><span class="line">  &lt;div v-html=&quot;a&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const a = &quot;&lt;section style=&#x27;color:red;&#x27;&gt;我是一段文字&lt;/section&gt;&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-if</code>：控制元素的显示隐藏（切换真假DOM）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- a为真值时才是DOM节点，否则会变成注释节点 --&gt;</span><br><span class="line">  &lt;!-- 当应用在组件上时，v-if和v-show会有区别 --&gt;</span><br><span class="line">  &lt;div v-if=&quot;a&quot;&gt;true&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const a = true</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-else-if</code>：<code>v-if</code>的“else if块”，可以链式调用</p>
</li>
<li><p>v-else：v-if条件收尾语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 编译成&lt;div&gt;C&lt;/div&gt; --&gt;</span><br><span class="line">  &lt;div v-if=&quot;a == &#x27;A&#x27;&quot;&gt;A&lt;/div&gt;</span><br><span class="line">  &lt;div v-else-if=&quot;a == &#x27;B&#x27;&quot;&gt;B&lt;/div&gt;</span><br><span class="line">  &lt;div v-else&gt;C&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const a = &quot;C&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-show</code>：控制元素的显示隐藏（css display none和block切换）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- a为真值时display为block，否则为none --&gt;</span><br><span class="line">  &lt;!-- 因此v-show比v-if性能更高，因为它只是切换一下css --&gt;</span><br><span class="line">  &lt;div v-show=&quot;a&quot;&gt;true&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const a = true</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-on</code>：简写为@，给元素添加事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 这两种写法是等价的 --&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 支持动态事件名 --&gt;</span><br><span class="line">  &lt;button @[event]=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 支持修饰符 --&gt;</span><br><span class="line">  &lt;div @click=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;!-- 阻止冒泡 --&gt;</span><br><span class="line">    &lt;button @[event].stop=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">    &lt;!-- 开启事件捕获 --&gt;</span><br><span class="line">    &lt;button @[event].capture=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">    &lt;!-- 阻止默认事件 --&gt;</span><br><span class="line">    &lt;button @[event].prevent=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">    &lt;!-- 只能发生一次 --&gt;</span><br><span class="line">    &lt;button @[event].once=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">    &lt;!-- 当event.target为元素本身时才触发 --&gt;</span><br><span class="line">    &lt;button @[event].self=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">    &lt;!-- 永不阻止默认事件 --&gt;</span><br><span class="line">    &lt;button @scroll.self=&quot;b&quot;&gt;scroll me&lt;/button&gt;</span><br><span class="line">    &lt;!-- 可以链式调用，需要注意顺序 --&gt;</span><br><span class="line">    &lt;button @[event].prevent.self=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">    &lt;button @[event].self.prevent=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">    &lt;!-- 还有很多别的修饰符，https://cn.vuejs.org/guide/essentials/event-handling.html#event-modifiers --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const a = ()=&gt; &#123;</span><br><span class="line">  console.log(&quot;click&quot;)</span><br><span class="line">&#125;</span><br><span class="line">const b = ()=&gt; &#123;</span><br><span class="line">  console.log(&quot;scroll&quot;)</span><br><span class="line">&#125;</span><br><span class="line">const event = &quot;click&quot;</span><br><span class="line">const parent = ()=&gt; &#123;</span><br><span class="line">  console.log(&quot;click parent&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-bind</code>：简写为:，绑定元素的属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 这两种写法是等价的 --&gt;</span><br><span class="line">  &lt;div v-bind:id=&quot;a&quot;&gt;演示v-bind:id&lt;/div&gt;</span><br><span class="line">  &lt;div :id=&quot;a&quot;&gt;演示:id&lt;/div&gt;</span><br><span class="line">  &lt;!-- 这两种写法是等价的 --&gt;</span><br><span class="line">  &lt;div :style=&quot;style&quot;&gt;演示:style&lt;/div&gt;</span><br><span class="line">  &lt;div :class=&quot;[&#x27;a&#x27;,&#x27;b&#x27;]&quot;&gt;演示:style&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 可以使用表达式 --&gt;</span><br><span class="line">  &lt;div :class=&quot;[b? &#x27;a&#x27;: &#x27;b&#x27;]&quot;&gt;演示:style&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 可以同时支持一个动态、一个静态 --&gt;</span><br><span class="line">  &lt;!-- 不能支持多个动态或多个静态 --&gt;</span><br><span class="line">  &lt;div :class=&quot;[b? &#x27;a&#x27;: &#x27;b&#x27;]&quot; class=&quot;c&quot;&gt;演示:style&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const a = 114514</span><br><span class="line">const b = true</span><br><span class="line">const style = &#123;</span><br><span class="line">  color:&quot;red&quot;;</span><br><span class="line">  border:&quot;1px solid black&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .a &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">  .b &#123;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">  &#125;</span><br><span class="line">  .c &#123;</span><br><span class="line">    background-color: pink;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-model</code>：双向绑定表单元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input v-model=&quot;name&quot; type=&quot;text&quot; /&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; name &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">// 使用ref或reactive包裹的变量才具有响应式</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">    </span><br><span class="line">const name = ref(&quot;野兽先辈&quot;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-for</code>：遍历元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- item：数组元素 index：元素下标 --&gt;</span><br><span class="line">    &lt;!-- v-for可以嵌套 --&gt;</span><br><span class="line">    &lt;!-- 需要给v-for提供一个key（唯一值） --&gt;</span><br><span class="line">    &lt;div :key=&quot;index&quot; v-for=&quot;(item, index) in name&quot;&gt;&#123;&#123; index &#125;&#125; - &#123;&#123; item &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const name = [&quot;野兽先辈&quot;, &quot;MUR&quot;, &quot;KMR&quot;, &quot;远野&quot;, &quot;野兽妹&quot;]</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-once</code>：性能优化，只渲染一次</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 改变a的值也不会发生变化 --&gt;</span><br><span class="line">  &lt;div v-once&gt;&#123;&#123; a &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;a++&quot;&gt;+&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">    </span><br><span class="line">const a = ref(1)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-memo</code>：大型项目性能优化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 写一个空数组时，效果就和v-once一样 --&gt;</span><br><span class="line">  &lt;div v-memo=&quot;[]&quot;&gt;&#123;&#123; a &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;a++&quot;&gt;+&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 常配合v-for使用，条件成立时才会更新，节省小部分性能 --&gt;</span><br><span class="line">  &lt;div @click=&quot;select(item.id)&quot; :key=&quot;item.id&quot; v-for=&quot;(item) in arr&quot; v-memo=&quot;[item.id === active]&quot;&gt;</span><br><span class="line">      &#123;&#123; item.id &#125;&#125; - selected： &#123;&#123; item.id == active &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">    </span><br><span class="line">const a = ref(1)</span><br><span class="line"></span><br><span class="line">import &#123; ref, reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const arr = reactive&lt;any[]&gt;([])</span><br><span class="line">for (let i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">  arr.push(&#123;</span><br><span class="line">    id: i + 1,</span><br><span class="line">    name: &quot;test&quot;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const active = ref(1)</span><br><span class="line"></span><br><span class="line">const select = async (index: number) =&gt; &#123;</span><br><span class="line">  active.value = index;</span><br><span class="line">  console.time()</span><br><span class="line">  await Promise.resolve()</span><br><span class="line">  console.timeEnd()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟DOM和diff算法</title>
    <url>/web/study/vue/5.%E8%99%9A%E6%8B%9FDOM%E5%92%8Cdiff%E7%AE%97%E6%B3%95.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h1><p>虚拟DOM就是通过JS生成的AST抽象语法树（编译原理），很多语言的编译都会使用AST，例如TS转JS，ES6转ES5等。</p>
<p><img src="https://image.cheriko.fun/post/202305022054195.png"></p>
<p>一个DOM的属性非常多，直接操作DOM浪费性能，而操作JS就非常快。</p>
<p>所以就有了虚拟DOM，它不仅提升速度，还利于做算法的优化，例如DIFF算法就是为了实现DOM的复用。</p>
<h1 id="DIFF算法"><a href="#DIFF算法" class="headerlink" title="DIFF算法"></a>DIFF算法</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">  	&lt;div :key=&quot;index&quot; v-for=&quot;(item, index) in arr&quot;&gt;</span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">  const arr = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span><br><span class="line">  </span><br><span class="line">  // 向数组中插入一个新元素</span><br><span class="line">  arr.splice(2, 0, &quot;114514&quot;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在Vue源码（<code>/package/runtime-core/src/renderer.ts</code>）中可以看到DIFF算法，分为有key和无key两种情况。</p>
<h2 id="无key"><a href="#无key" class="headerlink" title="无key"></a>无key</h2><p><img src="https://image.cheriko.fun/post/202305022218648.png"></p>
<p>没有对元素进行复用，而是全部重新渲染（旧的换成新的），浪费性能。</p>
<p>key可以给元素做唯一标记，这些元素得以能够被复用。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">patchUnkeyedChildren</span> = (<span class="params"></span></span><br><span class="line"><span class="params">    c1: VNode[],    <span class="comment">// 旧的VNode</span></span></span><br><span class="line"><span class="params">    c2: VNodeArrayChildren,     <span class="comment">// 新的VNode</span></span></span><br><span class="line"><span class="params">    container: RendererElement,</span></span><br><span class="line"><span class="params">    anchor: RendererNode | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    parentComponent: ComponentInternalInstance | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    parentSuspense: SuspenseBoundary | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    isSVG: <span class="built_in">boolean</span>,</span></span><br><span class="line"><span class="params">    slotScopeIds: <span class="built_in">string</span>[] | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    optimized: <span class="built_in">boolean</span></span></span><br><span class="line"><span class="params">  </span>) =&gt; &#123;</span><br><span class="line">    c1 = c1 || <span class="variable constant_">EMPTY_ARR</span></span><br><span class="line">    c2 = c2 || <span class="variable constant_">EMPTY_ARR</span></span><br><span class="line">    <span class="keyword">const</span> oldLength = c1.<span class="property">length</span></span><br><span class="line">    <span class="keyword">const</span> newLength = c2.<span class="property">length</span></span><br><span class="line">    <span class="keyword">const</span> commonLength = <span class="title class_">Math</span>.<span class="title function_">min</span>(oldLength, newLength)</span><br><span class="line">    <span class="keyword">let</span> i</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; commonLength; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> nextChild = (c2[i] = optimized</span><br><span class="line">        ? <span class="title function_">cloneIfMounted</span>(c2[i] <span class="keyword">as</span> <span class="title class_">VNode</span>)</span><br><span class="line">        : <span class="title function_">normalizeVNode</span>(c2[i]))</span><br><span class="line">      <span class="comment">// 重新渲染元素</span></span><br><span class="line">      <span class="title function_">patch</span>(</span><br><span class="line">        c1[i],</span><br><span class="line">        nextChild,</span><br><span class="line">        container,</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        parentComponent,</span><br><span class="line">        parentSuspense,</span><br><span class="line">        isSVG,</span><br><span class="line">        slotScopeIds,</span><br><span class="line">        optimized</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (oldLength &gt; newLength) &#123;</span><br><span class="line">      <span class="comment">// remove old 删除元素</span></span><br><span class="line">      <span class="title function_">unmountChildren</span>(</span><br><span class="line">        c1,</span><br><span class="line">        parentComponent,</span><br><span class="line">        parentSuspense,</span><br><span class="line">        <span class="literal">true</span>,</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        commonLength</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// mount new 新增元素</span></span><br><span class="line">      <span class="title function_">mountChildren</span>(</span><br><span class="line">        c2,</span><br><span class="line">        container,</span><br><span class="line">        anchor,</span><br><span class="line">        parentComponent,</span><br><span class="line">        parentSuspense,</span><br><span class="line">        isSVG,</span><br><span class="line">        slotScopeIds,</span><br><span class="line">        optimized,</span><br><span class="line">        commonLength</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="有key"><a href="#有key" class="headerlink" title="有key"></a>有key</h1><p><img src="https://image.cheriko.fun/post/202305022236151.png"></p>
<blockquote>
<p>和Vue2的双端DIFF算法不一样，Vue2按头-头→尾-尾→头-尾→尾-头进行对比，而Vue3只有头-头→尾-尾</p>
</blockquote>
<p><img src="https://image.cheriko.fun/post/202305022246793.png"></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">patchKeyedChildren</span> = (<span class="params"></span></span><br><span class="line"><span class="params">    c1: VNode[],</span></span><br><span class="line"><span class="params">    c2: VNodeArrayChildren,</span></span><br><span class="line"><span class="params">    container: RendererElement,</span></span><br><span class="line"><span class="params">    parentAnchor: RendererNode | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    parentComponent: ComponentInternalInstance | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    parentSuspense: SuspenseBoundary | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    isSVG: <span class="built_in">boolean</span>,</span></span><br><span class="line"><span class="params">    slotScopeIds: <span class="built_in">string</span>[] | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    optimized: <span class="built_in">boolean</span></span></span><br><span class="line"><span class="params">  </span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> l2 = c2.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> e1 = c1.<span class="property">length</span> - <span class="number">1</span> <span class="comment">// prev ending index</span></span><br><span class="line">    <span class="keyword">let</span> e2 = l2 - <span class="number">1</span> <span class="comment">// next ending index</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. sync from start 前序算法，只对比前面的</span></span><br><span class="line">    <span class="comment">// (a b) c</span></span><br><span class="line">    <span class="comment">// (a b) d e</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;</span><br><span class="line">      <span class="keyword">const</span> n1 = c1[i]</span><br><span class="line">      <span class="keyword">const</span> n2 = (c2[i] = optimized</span><br><span class="line">        ? <span class="title function_">cloneIfMounted</span>(c2[i] <span class="keyword">as</span> <span class="title class_">VNode</span>)</span><br><span class="line">        : <span class="title function_">normalizeVNode</span>(c2[i]))</span><br><span class="line">      <span class="comment">// 判断两元素的type和key是否一样，如果一样才进行复用</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isSameVNodeType</span>(n1, n2)) &#123;</span><br><span class="line">        <span class="title function_">patch</span>(</span><br><span class="line">          n1,</span><br><span class="line">          n2,</span><br><span class="line">          container,</span><br><span class="line">          <span class="literal">null</span>,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG,</span><br><span class="line">          slotScopeIds,</span><br><span class="line">          optimized</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. sync from end 尾序算法，只对比后面的</span></span><br><span class="line">    <span class="comment">// a (b c)</span></span><br><span class="line">    <span class="comment">// d e (b c)</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;</span><br><span class="line">      <span class="keyword">const</span> n1 = c1[e1]</span><br><span class="line">      <span class="keyword">const</span> n2 = (c2[e2] = optimized</span><br><span class="line">        ? <span class="title function_">cloneIfMounted</span>(c2[e2] <span class="keyword">as</span> <span class="title class_">VNode</span>)</span><br><span class="line">        : <span class="title function_">normalizeVNode</span>(c2[e2]))</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isSameVNodeType</span>(n1, n2)) &#123;</span><br><span class="line">        <span class="title function_">patch</span>(</span><br><span class="line">          n1,</span><br><span class="line">          n2,</span><br><span class="line">          container,</span><br><span class="line">          <span class="literal">null</span>,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG,</span><br><span class="line">          slotScopeIds,</span><br><span class="line">          optimized</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      e1--</span><br><span class="line">      e2--</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. common sequence + mount 新增节点</span></span><br><span class="line">    <span class="comment">// (a b)</span></span><br><span class="line">    <span class="comment">// (a b) c</span></span><br><span class="line">    <span class="comment">// i = 2, e1 = 1, e2 = 2</span></span><br><span class="line">    <span class="comment">// (a b)</span></span><br><span class="line">    <span class="comment">// c (a b)</span></span><br><span class="line">    <span class="comment">// i = 0, e1 = -1, e2 = 0</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt; e1) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= e2) &#123;</span><br><span class="line">        <span class="keyword">const</span> nextPos = e2 + <span class="number">1</span></span><br><span class="line">        <span class="keyword">const</span> anchor = nextPos &lt; l2 ? (c2[nextPos] <span class="keyword">as</span> <span class="title class_">VNode</span>).<span class="property">el</span> : parentAnchor</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= e2) &#123;</span><br><span class="line">          <span class="comment">// 如果参数1为null，patch函数即为新增节点</span></span><br><span class="line">          <span class="title function_">patch</span>(</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            (c2[i] = optimized</span><br><span class="line">              ? <span class="title function_">cloneIfMounted</span>(c2[i] <span class="keyword">as</span> <span class="title class_">VNode</span>)</span><br><span class="line">              : <span class="title function_">normalizeVNode</span>(c2[i])),</span><br><span class="line">            container,</span><br><span class="line">            anchor,</span><br><span class="line">            parentComponent,</span><br><span class="line">            parentSuspense,</span><br><span class="line">            isSVG,</span><br><span class="line">            slotScopeIds,</span><br><span class="line">            optimized</span><br><span class="line">          )</span><br><span class="line">          i++</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. common sequence + unmount 卸载元素</span></span><br><span class="line">    <span class="comment">// (a b) c</span></span><br><span class="line">    <span class="comment">// (a b)</span></span><br><span class="line">    <span class="comment">// i = 2, e1 = 2, e2 = 1</span></span><br><span class="line">    <span class="comment">// a (b c)</span></span><br><span class="line">    <span class="comment">// (b c)</span></span><br><span class="line">    <span class="comment">// i = 0, e1 = 0, e2 = -1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; e2) &#123;</span><br><span class="line">      <span class="keyword">while</span> (i &lt;= e1) &#123;</span><br><span class="line">        <span class="title function_">unmount</span>(c1[i], parentComponent, parentSuspense, <span class="literal">true</span>)</span><br><span class="line">        i++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. unknown sequence 乱序，最难的情况</span></span><br><span class="line">    <span class="comment">// [i ... e1 + 1]: a b [c d e] f g</span></span><br><span class="line">    <span class="comment">// [i ... e2 + 1]: a b [e d c h] f g</span></span><br><span class="line">    <span class="comment">// i = 2, e1 = 4, e2 = 5</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> s1 = i <span class="comment">// prev starting index</span></span><br><span class="line">      <span class="keyword">const</span> s2 = i <span class="comment">// next starting index</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 5.1 build key:index map for newChildren 构建新节点的映射关系（map）</span></span><br><span class="line">      <span class="comment">// key值 1 2 3 4 5</span></span><br><span class="line">      <span class="comment">// 索引 0 1 2 3 4</span></span><br><span class="line">      <span class="comment">// 进行排序操作</span></span><br><span class="line">	  <span class="comment">// key值 5 4 3 2 1</span></span><br><span class="line">      <span class="comment">// 索引 0 1 2 3 4（不变）</span></span><br><span class="line">      <span class="comment">// 5=&gt;0 4=&gt;1 3=&gt;2 2=&gt;3 1=&gt;4</span></span><br><span class="line">      <span class="keyword">const</span> <span class="attr">keyToNewIndexMap</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">symbol</span>, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">      <span class="keyword">for</span> (i = s2; i &lt;= e2; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> nextChild = (c2[i] = optimized</span><br><span class="line">          ? <span class="title function_">cloneIfMounted</span>(c2[i] <span class="keyword">as</span> <span class="title class_">VNode</span>)</span><br><span class="line">          : <span class="title function_">normalizeVNode</span>(c2[i]))</span><br><span class="line">        <span class="keyword">if</span> (nextChild.<span class="property">key</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (__DEV__ &amp;&amp; keyToNewIndexMap.<span class="title function_">has</span>(nextChild.<span class="property">key</span>)) &#123;</span><br><span class="line">            <span class="title function_">warn</span>(</span><br><span class="line">              <span class="string">`Duplicate keys found during update:`</span>,</span><br><span class="line">              <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(nextChild.<span class="property">key</span>),</span><br><span class="line">              <span class="string">`Make sure keys are unique.`</span></span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">          keyToNewIndexMap.<span class="title function_">set</span>(nextChild.<span class="property">key</span>, i)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 5.2 loop through old children left to be patched and try to patch</span></span><br><span class="line">      <span class="comment">// matching nodes &amp; remove nodes that are no longer present</span></span><br><span class="line">      <span class="comment">// 记录新节点在旧节点中的位置数组</span></span><br><span class="line">      <span class="comment">// [5, 4, 3, 2, 1]</span></span><br><span class="line">      <span class="keyword">let</span> j</span><br><span class="line">      <span class="keyword">let</span> patched = <span class="number">0</span></span><br><span class="line">      <span class="keyword">const</span> toBePatched = e2 - s2 + <span class="number">1</span></span><br><span class="line">      <span class="keyword">let</span> moved = <span class="literal">false</span></span><br><span class="line">      <span class="comment">// used to track whether any node has moved</span></span><br><span class="line">      <span class="keyword">let</span> maxNewIndexSoFar = <span class="number">0</span></span><br><span class="line">      <span class="comment">// works as Map&lt;newIndex, oldIndex&gt;</span></span><br><span class="line">      <span class="comment">// Note that oldIndex is offset by +1</span></span><br><span class="line">      <span class="comment">// and oldIndex = 0 is a special value indicating the new node has</span></span><br><span class="line">      <span class="comment">// no corresponding old node.</span></span><br><span class="line">      <span class="comment">// used for determining longest stable subsequence</span></span><br><span class="line">      <span class="keyword">const</span> newIndexToOldIndexMap = <span class="keyword">new</span> <span class="title class_">Array</span>(toBePatched)</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; toBePatched; i++) newIndexToOldIndexMap[i] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (i = s1; i &lt;= e1; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> prevChild = c1[i]</span><br><span class="line">        <span class="keyword">if</span> (patched &gt;= toBePatched) &#123;</span><br><span class="line">          <span class="comment">// all new children have been patched so this can only be a removal</span></span><br><span class="line">          <span class="comment">// 如果有多余的旧节点就删除</span></span><br><span class="line">          <span class="title function_">unmount</span>(prevChild, parentComponent, parentSuspense, <span class="literal">true</span>)</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> newIndex</span><br><span class="line">        <span class="keyword">if</span> (prevChild.<span class="property">key</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">          newIndex = keyToNewIndexMap.<span class="title function_">get</span>(prevChild.<span class="property">key</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// key-less node, try to locate a key-less node of the same type</span></span><br><span class="line">          <span class="keyword">for</span> (j = s2; j &lt;= e2; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">              newIndexToOldIndexMap[j - s2] === <span class="number">0</span> &amp;&amp;</span><br><span class="line">              <span class="title function_">isSameVNodeType</span>(prevChild, c2[j] <span class="keyword">as</span> <span class="title class_">VNode</span>)</span><br><span class="line">            ) &#123;</span><br><span class="line">              newIndex = j</span><br><span class="line">              <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果新节点不包含在旧节点里也删除</span></span><br><span class="line">        <span class="keyword">if</span> (newIndex === <span class="literal">undefined</span>) &#123;</span><br><span class="line">          <span class="title function_">unmount</span>(prevChild, parentComponent, parentSuspense, <span class="literal">true</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          newIndexToOldIndexMap[newIndex - s2] = i + <span class="number">1</span></span><br><span class="line">          <span class="keyword">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class="line">            maxNewIndexSoFar = newIndex</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果节点出现交叉，说明是要移动，求最长递增子序列</span></span><br><span class="line">            moved = <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="title function_">patch</span>(</span><br><span class="line">            prevChild,</span><br><span class="line">            c2[newIndex] <span class="keyword">as</span> <span class="title class_">VNode</span>,</span><br><span class="line">            container,</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            parentComponent,</span><br><span class="line">            parentSuspense,</span><br><span class="line">            isSVG,</span><br><span class="line">            slotScopeIds,</span><br><span class="line">            optimized</span><br><span class="line">          )</span><br><span class="line">          patched++</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 5.3 move and mount</span></span><br><span class="line">      <span class="comment">// generate longest stable subsequence only when nodes have moved</span></span><br><span class="line">      <span class="comment">// 求最长递增子序列升序</span></span><br><span class="line">      <span class="keyword">const</span> increasingNewIndexSequence = moved</span><br><span class="line">        ? <span class="title function_">getSequence</span>(newIndexToOldIndexMap)</span><br><span class="line">        : <span class="variable constant_">EMPTY_ARR</span></span><br><span class="line">      j = increasingNewIndexSequence.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">      <span class="comment">// looping backwards so that we can use last patched node as anchor</span></span><br><span class="line">      <span class="keyword">for</span> (i = toBePatched - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">const</span> nextIndex = s2 + i</span><br><span class="line">        <span class="keyword">const</span> nextChild = c2[nextIndex] <span class="keyword">as</span> <span class="title class_">VNode</span></span><br><span class="line">        <span class="keyword">const</span> anchor =</span><br><span class="line">          nextIndex + <span class="number">1</span> &lt; l2 ? (c2[nextIndex + <span class="number">1</span>] <span class="keyword">as</span> <span class="title class_">VNode</span>).<span class="property">el</span> : parentAnchor</span><br><span class="line">        <span class="keyword">if</span> (newIndexToOldIndexMap[i] === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// mount new</span></span><br><span class="line">          <span class="title function_">patch</span>(</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            nextChild,</span><br><span class="line">            container,</span><br><span class="line">            anchor,</span><br><span class="line">            parentComponent,</span><br><span class="line">            parentSuspense,</span><br><span class="line">            isSVG,</span><br><span class="line">            slotScopeIds,</span><br><span class="line">            optimized</span><br><span class="line">          )</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (moved) &#123;</span><br><span class="line">          <span class="comment">// move if:</span></span><br><span class="line">          <span class="comment">// There is no stable subsequence (e.g. a reverse)</span></span><br><span class="line">          <span class="comment">// OR current node is not among the stable sequence</span></span><br><span class="line">          <span class="comment">// 如果当前遍历的节点不在子序列，说明要进行移动</span></span><br><span class="line">          <span class="keyword">if</span> (j &lt; <span class="number">0</span> || i !== increasingNewIndexSequence[j]) &#123;</span><br><span class="line">            <span class="title function_">move</span>(nextChild, container, anchor, <span class="title class_">MoveType</span>.<span class="property">REORDER</span>)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果在子序列里，跳过</span></span><br><span class="line">            j--</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://en.wikipedia.org/wiki/Longest_increasing_subsequence</span></span><br><span class="line"><span class="comment">// 贪心+二分查找，求最长递增子序列</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSequence</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> p = arr.<span class="title function_">slice</span>()</span><br><span class="line">  <span class="keyword">const</span> result = [<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> i, j, u, v, c</span><br><span class="line">  <span class="keyword">const</span> len = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> arrI = arr[i]</span><br><span class="line">    <span class="keyword">if</span> (arrI !== <span class="number">0</span>) &#123;</span><br><span class="line">      j = result[result.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arrI) &#123;</span><br><span class="line">        p[i] = j</span><br><span class="line">        result.<span class="title function_">push</span>(i)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      u = <span class="number">0</span></span><br><span class="line">      v = result.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> (u &lt; v) &#123;</span><br><span class="line">        c = (u + v) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (arr[result[c]] &lt; arrI) &#123;</span><br><span class="line">          u = c + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          v = c</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (arrI &lt; arr[result[u]]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (u &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          p[i] = result[u - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        result[u] = i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  u = result.<span class="property">length</span></span><br><span class="line">  v = result[u - <span class="number">1</span>]</span><br><span class="line">  <span class="keyword">while</span> (u-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    result[u] = v</span><br><span class="line">    v = p[v]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Ref全家桶</title>
    <url>/web/study/vue/6.Ref%E5%85%A8%E5%AE%B6%E6%A1%B6.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><p>接收一个内部值并返回响应式且可变的ref对象，ref对象仅有一个<code>.value</code>属性，指向该内部值。</p>
<blockquote>
<p>浏览器控制台设置里，勾选“启动自定义格式化程序”并刷新，控制台就能看格式化后整齐的ref，reactive也是如此。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;person&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">  &lt;div ref=&quot;dom&quot;&gt;我是个DOM&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">import type &#123; Ref &#125; from &quot;vue&quot;</span><br><span class="line">    </span><br><span class="line">type P = &#123;</span><br><span class="line">  name: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ref 作深层响应式</span><br><span class="line">// 也可以不写类型定义或泛型，ref会做类型推断</span><br><span class="line">// const person = ref&lt;P&gt;(&#123; name: &quot;yajue&quot; &#125;)</span><br><span class="line">// const person: Ref&lt;P&gt; = ref(&#123; name: &quot;yajue&quot; &#125;)</span><br><span class="line">const person = ref(&#123; name: &quot;yajue&quot; &#125;)</span><br><span class="line">    </span><br><span class="line">// 不用ref包裹就没有响应式</span><br><span class="line">const person2 = &#123; name: &quot;pinky&quot; &#125;</span><br><span class="line"></span><br><span class="line">// ref还可以取得DOM元素，变量名需要和元素的ref属性值一致</span><br><span class="line">const dom = ref&lt;HTMLDivElement&gt;()</span><br><span class="line"></span><br><span class="line">// 在setup语法糖里只能读到undefined，因为在这个阶段，DOM还没有被渲染</span><br><span class="line">console.log(dom.value?.innerText)</span><br><span class="line"></span><br><span class="line">const change = ()=&gt; &#123;</span><br><span class="line">  // person.name = &quot;野兽先辈&quot;</span><br><span class="line">  // ref函数返回一个类，其中有一个属性value，修改或取值时必须带上value</span><br><span class="line">  person.value.name = &quot;野兽先辈&quot;</span><br><span class="line">  console.log(person)</span><br><span class="line">  console.log(dom.value?.innerText)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="isRef"><a href="#isRef" class="headerlink" title="isRef"></a>isRef</h1><p>判断是否为ref对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;person&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, isRef &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">const person = ref(&#123; name: &quot;yajue&quot; &#125;)</span><br><span class="line">    </span><br><span class="line">const person2 = &#123; name: &quot;pinky&quot; &#125;</span><br><span class="line"></span><br><span class="line">const change = ()=&gt; &#123;</span><br><span class="line">  // 判断对象是不是ref对象</span><br><span class="line">  // 实际生产中用得不多，但源码里用得很多</span><br><span class="line">  console.log(isRef(person))	// -&gt; true</span><br><span class="line">  console.log(isRef(person2))	// -&gt; false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef"></a>shallowRef</h1><p>创建一个跟踪<code>.value</code>变化的ref，但它的值不会变成响应式（浅层响应式）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;ref: &#123;&#123;person&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;div&gt;shallowRef: &#123;&#123;person2&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, shallowRef &#125; from &quot;vue&quot;</span><br><span class="line">    </span><br><span class="line">type P = &#123;</span><br><span class="line">  name: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person = ref(&#123; name: &quot;yajue&quot; &#125;)</span><br><span class="line"></span><br><span class="line">// shallowRef 作浅层响应式</span><br><span class="line">const person2 = shallowRef(&#123; name: &quot;MUR&quot; &#125;)</span><br><span class="line"></span><br><span class="line">const change = ()=&gt; &#123;</span><br><span class="line">  // 点击后数据改变，但视图不会变化，因为它是浅层响应式</span><br><span class="line">  // person2.value.name = &quot;三浦&quot;</span><br><span class="line">    </span><br><span class="line">  // 直接从value赋值才会变成响应式</span><br><span class="line">  // person2.value = &#123;</span><br><span class="line">  //   name: &quot;三浦&quot;</span><br><span class="line">  // &#125;</span><br><span class="line">    </span><br><span class="line">  // ref和shallowRef不能同时写，因为会影响shallowRef，造成视图的更新</span><br><span class="line">  person.value.name = &quot;我是ref&quot;</span><br><span class="line">  person2.value.name = &quot;我是shallowRef&quot;</span><br><span class="line">  console.log(person2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="triggerRef"><a href="#triggerRef" class="headerlink" title="triggerRef"></a>triggerRef</h1><p>强制页面视图更新。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;ref: &#123;&#123;person&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;div&gt;shallowRef: &#123;&#123;person2&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, shallowRef, triggerRef &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">const person = ref(&#123; name: &quot;yajue&quot; &#125;)</span><br><span class="line"></span><br><span class="line">const person2 = shallowRef(&#123; name: &quot;MUR&quot; &#125;)</span><br><span class="line"></span><br><span class="line">const change = ()=&gt; &#123;</span><br><span class="line">  person2.value.name = &quot;我被影响了&quot;</span><br><span class="line">  // triggerRef强制更新收集的依赖，直接调用它也能更新shallowRef</span><br><span class="line">  // ref底层更新视图的逻辑中会调用triggerRef函数，所以ref和shallowRef不能同时写在一起</span><br><span class="line">  triggerRef(person2)</span><br><span class="line">  console.log(person2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h1><p>自定义ref。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;obj&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, shallowRef, triggerRef, customRef &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">// 自定义ref，要求返回一个customRef的返回值</span><br><span class="line">function myRef&lt;T&gt;(value: T) &#123;</span><br><span class="line">  // customRef接收一个回调函数，回调函数接收两个参数</span><br><span class="line">  return customRef((track, trigger)=&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    // 可以使用自定义ref实现额外的逻辑</span><br><span class="line">    let timer</span><br><span class="line">      </span><br><span class="line">    // 回调函数要求返回一个对象，对象需要实现get和set方法</span><br><span class="line">    return &#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        // track用来收集依赖</span><br><span class="line">        track()</span><br><span class="line">        return value</span><br><span class="line">      &#125;,</span><br><span class="line">      set(newVal) &#123;</span><br><span class="line">        //比如用户输入值时，调用接口并做个防抖</span><br><span class="line">        clearTimeout(timer)</span><br><span class="line">        setTimeout(()=&gt; &#123;</span><br><span class="line">          console.log(&quot;我调用了一个接口&quot;)</span><br><span class="line">          value = newVal</span><br><span class="line">          timer = null</span><br><span class="line">          // trigger用来触发依赖更新</span><br><span class="line">          trigger()</span><br><span class="line">        &#125;, 500)</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">const obj = myRef&lt;string&gt;(&quot;cheriko&quot;)</span><br><span class="line"></span><br><span class="line">const change = ()=&gt; &#123;</span><br><span class="line">  obj.value = &quot;meruko&quot;</span><br><span class="line">  console.log(obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>在Vue源码（<code>/package/reactivity/src/ref.ts</code>）中可以看到ref的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Takes an inner value and returns a reactive and mutable ref object, which</span></span><br><span class="line"><span class="comment"> * has a single property `.value` that points to the inner value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">value</span> - The object to wrap in the ref.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> &#123;<span class="type">@link https://vuejs.org/api/reactivity-core.html#ref</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 进行函数重载，支持多种传入的类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> ref&lt;T <span class="keyword">extends</span> <span class="title class_">Ref</span>&gt;(<span class="attr">value</span>: T): T</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> ref&lt;T&gt;(<span class="attr">value</span>: T): <span class="title class_">Ref</span>&lt;<span class="title class_">UnwrapRef</span>&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> ref&lt;T = <span class="built_in">any</span>&gt;(): <span class="title class_">Ref</span>&lt;T | <span class="literal">undefined</span>&gt;</span><br><span class="line"><span class="comment">// value就是程序员传进ref的值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ref</span>(<span class="params">value?: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createRef</span>(value, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> shallowRef&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt;(</span><br><span class="line">  <span class="attr">value</span>: T</span><br><span class="line">): T <span class="keyword">extends</span> <span class="title class_">Ref</span> ? T : <span class="title class_">ShallowRef</span>&lt;T&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> shallowRef&lt;T&gt;(<span class="attr">value</span>: T): <span class="title class_">ShallowRef</span>&lt;T&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> shallowRef&lt;T = <span class="built_in">any</span>&gt;(): <span class="title class_">ShallowRef</span>&lt;T | <span class="literal">undefined</span>&gt;</span><br><span class="line"><span class="comment">// shallowRef，和ref的不同就是它把__v_isShallow设为true，所以它的响应只到.value</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">shallowRef</span>(<span class="params">value?: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createRef</span>(value, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createRef</span>(<span class="params">rawValue: <span class="built_in">unknown</span>, shallow: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 判断传进的值，如果已经是ref对象就不用再变了</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isRef</span>(rawValue)) &#123;</span><br><span class="line">    <span class="keyword">return</span> rawValue</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建ref对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RefImpl</span>(rawValue, shallow)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RefImpl</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">// 这个_value就是真正要读取的东西</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_value</span>: T</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_rawValue</span>: T</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> dep?: <span class="title class_">Dep</span> = <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isRef = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T, <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isShallow: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_rawValue</span> = __v_isShallow ? value : <span class="title function_">toRaw</span>(value)</span><br><span class="line">    <span class="comment">// 判断isShallow，如果为true就赋值value，为false就赋值toReactive(value)</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = __v_isShallow ? value : <span class="title function_">toReactive</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="comment">// 进行依赖收集</span></span><br><span class="line">    <span class="title function_">trackRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="comment">// 读取的是_value</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> useDirectValue =</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">__v_isShallow</span> || <span class="title function_">isShallow</span>(newVal) || <span class="title function_">isReadonly</span>(newVal)</span><br><span class="line">    newVal = useDirectValue ? newVal : <span class="title function_">toRaw</span>(newVal)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">hasChanged</span>(newVal, <span class="variable language_">this</span>.<span class="property">_rawValue</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_rawValue</span> = newVal</span><br><span class="line">      <span class="comment">// 修改的也是_value</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_value</span> = useDirectValue ? newVal : <span class="title function_">toReactive</span>(newVal)</span><br><span class="line">      <span class="comment">// 进行依赖更新</span></span><br><span class="line">      <span class="title function_">triggerRefValue</span>(<span class="variable language_">this</span>, newVal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// triggerRef，可以强制更新shallowRef的值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">triggerRef</span>(<span class="params">ref: Ref</span>) &#123;</span><br><span class="line">  <span class="title function_">triggerRefValue</span>(ref, __DEV__ ? ref.<span class="property">value</span> : <span class="built_in">void</span> <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// triggerRefValue会接着调用triggerEffects，它会进行依赖的更新</span></span><br></pre></td></tr></table></figure>

<p>这里属于reactive的源码，位于<code>/package/reactivity/src/reactive.ts</code>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a reactive proxy of the given value (if possible).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If the given value is not an object, the original value itself is returned.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">value</span> - The value for which a reactive proxy shall be created.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 判断传入的value是否为引用类型（数组或对象），是则调用reactive，否则返回value本身</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toReactive = &lt;T <span class="keyword">extends</span> <span class="built_in">unknown</span>&gt;(<span class="attr">value</span>: T): <span class="function"><span class="params">T</span> =&gt;</span></span><br><span class="line">  <span class="title function_">isObject</span>(value) ? <span class="title function_">reactive</span>(value) : value</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Reactive全家桶</title>
    <url>/web/study/vue/7.Reactive%E5%85%A8%E5%AE%B6%E6%A1%B6.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h1><p>reactive和ref的区别：</p>
<ul>
<li>ref支持传入所有类型，reactive只支持引用类型（Array、Object、Map、Set、WeakSet、WeakMap等）</li>
<li>ref取值和赋值都要加.value，reactive不需要</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;input v-model=&quot;form.name&quot; type=&quot;text&quot;&gt;</span><br><span class="line">      &lt;br&gt;</span><br><span class="line">      &lt;input v-model=&quot;form.age&quot; type=&quot;text&quot;&gt;</span><br><span class="line">      &lt;br&gt;</span><br><span class="line">      &lt;button @click.prevent=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;  </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- --------------------------------------------------------- --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;(item, index) in list&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">      &lt;!-- &lt;li v-for=&quot;(item, index) in list.arr&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt; --&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button @click=&quot;add&quot;&gt;&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive &#125; from &quot;vue&quot;</span><br><span class="line">    </span><br><span class="line">type P = &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  age: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 只支持引用类型的参数，用基本类型就报错</span><br><span class="line">// let form = reactive(&quot;&quot;)</span><br><span class="line"></span><br><span class="line">// 和ref一样可以进行类型推断，也可以自己定义</span><br><span class="line">// let form = reactive&lt;P&gt;(&#123;</span><br><span class="line">//   name: &quot;yajue&quot;,</span><br><span class="line">//   age: 24</span><br><span class="line">// &#125;)</span><br><span class="line">    </span><br><span class="line">let form = reactive(&#123;</span><br><span class="line">  name: &quot;yajue&quot;,</span><br><span class="line">  age: 24</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 不需要.value</span><br><span class="line">// form.age = 114514</span><br><span class="line">    </span><br><span class="line">const submit = ()=&gt; &#123;</span><br><span class="line">  console.log(form)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// --------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">// reactive是proxy代理的对象，直接赋值会覆盖掉它</span><br><span class="line">let list = reactive&lt;string[]&gt;([])</span><br><span class="line"></span><br><span class="line">// let list = reactive&lt;&#123;</span><br><span class="line">//   arr: string[]</span><br><span class="line">// &#125;&gt;(&#123;</span><br><span class="line">//   arr: []</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">const add = ()=&gt; &#123;</span><br><span class="line">  // 假设它是接口返回的数据</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    let res = [&quot;www&quot;, &quot;草&quot;, &quot;kusa&quot;]</span><br><span class="line">    // 会破坏响应式对象，不能直接赋值</span><br><span class="line">    // list = res</span><br><span class="line"></span><br><span class="line">    // 解决方案1：可以用数组方法</span><br><span class="line">    list.push(...res)</span><br><span class="line"></span><br><span class="line">    // 解决方案2：把数组作为一个对象属性，并把对象赋给reactive</span><br><span class="line">    // list.arr = res</span><br><span class="line"></span><br><span class="line">    console.log(list)</span><br><span class="line">  &#125;, 2000)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h1><p>拷贝一份proxy对象，并将其设为只读。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;show&quot;&gt;&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, readonly &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">let form = reactive(&#123;</span><br><span class="line">  name: &quot;yajue&quot;,</span><br><span class="line">  age: 24</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 把reactive所有属性变成只读</span><br><span class="line">// 实际生产中用得不多，但源码里用得很多</span><br><span class="line">const read = readonly(form)</span><br><span class="line"></span><br><span class="line">const show = ()=&gt; &#123;</span><br><span class="line">  // 会报错，因为read是只读的</span><br><span class="line">  // read.name = &quot;野兽&quot;</span><br><span class="line">  // console.log(form, read)    // -&gt; &#123;name:&quot;yajue&quot;,age:24&#125;, &#123;name:&quot;yajue&quot;,age:24&#125;</span><br><span class="line"></span><br><span class="line">  // 不会报错，因为form不是只读的</span><br><span class="line">  // read会受原始对象影响</span><br><span class="line">  form.name = &quot;野兽&quot;</span><br><span class="line">  console.log(form, read)   // -&gt; &#123;name:&quot;野兽&quot;,age:24&#125;, &#123;name:&quot;野兽&quot;,age:24&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive"></a>shallowReactive</h1><p>只有浅层的数据（第一层）才会变成响应式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;reactive: &#123;&#123; form &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;shallowReactive: &#123;&#123; obj &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;edit&quot;&gt;&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, readonly, shallowReactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">let form = reactive(&#123;</span><br><span class="line">  name: &quot;yajue&quot;,</span><br><span class="line">  age: 24</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// shallowReactive 作浅层响应式</span><br><span class="line">const obj = shallowReactive&lt;any&gt;(&#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    bar: &#123;</span><br><span class="line">      num: 114514</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const edit = ()=&gt; &#123;</span><br><span class="line">  // 改变第一层的属性可以响应</span><br><span class="line">  // obj.foo = &#123; num = 1919810 &#125;</span><br><span class="line"></span><br><span class="line">  // 改变深层嵌套的属性就不会引起视图的更新</span><br><span class="line">  // obj.foo.bar.num = 1919810</span><br><span class="line">  // console.log(obj)</span><br><span class="line"></span><br><span class="line">  // 和ref&amp;shallowRef一样，reactive和shallowReactive同时写也会出现问题</span><br><span class="line">  form.name = &quot;野兽&quot;</span><br><span class="line">  obj.foo.bar.num = 1919810</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>在Vue源码（<code>/package/reactivity/src/reactive.ts</code>）中可以看到reactive的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// reactive使用了泛型约束，只支持引用类型的参数，所以用基本类型就报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> reactive&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt;(<span class="attr">target</span>: T): <span class="title class_">UnwrapNestedRefs</span>&lt;T&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">target: <span class="built_in">object</span></span>) &#123;</span><br><span class="line">  <span class="comment">// if trying to observe a readonly proxy, return the readonly version.</span></span><br><span class="line">  <span class="comment">// 如果对象是只读的，就直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isReadonly</span>(target)) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 否则调用createReactiveObject</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createReactiveObject</span>(</span><br><span class="line">    target,</span><br><span class="line">    <span class="literal">false</span>,		<span class="comment">// isReadonly</span></span><br><span class="line">    mutableHandlers,		<span class="comment">// 用于给Array类型创建proxy</span></span><br><span class="line">    mutableCollectionHandlers,		<span class="comment">// 用于给Set Map WeakSet WeakMap类型创建proxy</span></span><br><span class="line">    reactiveMap</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createReactiveObject</span>(<span class="params"></span></span><br><span class="line"><span class="params">  target: Target,</span></span><br><span class="line"><span class="params">  isReadonly: <span class="built_in">boolean</span>,</span></span><br><span class="line"><span class="params">  baseHandlers: ProxyHandler&lt;<span class="built_in">any</span>&gt;,</span></span><br><span class="line"><span class="params">  collectionHandlers: ProxyHandler&lt;<span class="built_in">any</span>&gt;,</span></span><br><span class="line"><span class="params">  proxyMap: <span class="built_in">WeakMap</span>&lt;Target, <span class="built_in">any</span>&gt;</span></span><br><span class="line"><span class="params">  <span class="comment">// WeakMap（弱映射），主要实现值与对象的关联而不导致内存泄漏</span></span></span><br><span class="line"><span class="params">  <span class="comment">// WeakMap的键只能是Object类型的数据（null除外），且WeakMap的键名所指的对象不计入垃圾回收机制</span></span></span><br><span class="line"><span class="params">  <span class="comment">// WeakMap的值可以是任意的</span></span></span><br><span class="line"><span class="params">  <span class="comment">// 它的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内</span></span></span><br><span class="line"><span class="params">  <span class="comment">// 因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占的内存</span></span></span><br><span class="line"><span class="params">  <span class="comment">// 即，一旦不再需要，WeakMap里的键名对象和所对应的键值对会自动删除，不用手动删除引用</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 如果传入基本类型，报错</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(target)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`value cannot be made reactive: <span class="subst">$&#123;<span class="built_in">String</span>(target)&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// target is already a Proxy, return it.</span></span><br><span class="line">  <span class="comment">// exception: calling readonly() on a reactive object</span></span><br><span class="line">  <span class="comment">// 如果target已经被代理了，且程序员的目的不是将响应式对象变成只读，则直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    target[<span class="title class_">ReactiveFlags</span>.<span class="property">RAW</span>] &amp;&amp;</span><br><span class="line">    !(isReadonly &amp;&amp; target[<span class="title class_">ReactiveFlags</span>.<span class="property">IS_REACTIVE</span>])</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// target already has corresponding Proxy</span></span><br><span class="line">  <span class="comment">// 从缓存(readonlyMap, reactiveMap)中查找，如果已经被代理就直接返回</span></span><br><span class="line">  <span class="keyword">const</span> existingProxy = proxyMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (existingProxy) &#123;</span><br><span class="line">    <span class="keyword">return</span> existingProxy</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// only specific value types can be observed.</span></span><br><span class="line">  <span class="comment">// 如果目标在白名单里直接返回，例如__skip__</span></span><br><span class="line">  <span class="comment">// 通过markRaw函数处理的数据会加上__skip__，即跳过代理</span></span><br><span class="line">  <span class="keyword">const</span> targetType = <span class="title function_">getTargetType</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (targetType === <span class="title class_">TargetType</span>.<span class="property">INVALID</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//以上条件都没触发，开始做proxy代理</span></span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">    target,</span><br><span class="line">    targetType === <span class="title class_">TargetType</span>.<span class="property">COLLECTION</span> ? collectionHandlers : baseHandlers</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// 缓存新代理后的对象</span></span><br><span class="line">  proxyMap.<span class="title function_">set</span>(target, proxy)</span><br><span class="line">  <span class="keyword">return</span> proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>to全家桶</title>
    <url>/web/study/vue/8.to%E5%85%A8%E5%AE%B6%E6%A1%B6.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h1><p>基于响应式对象上的一个属性创建一个对应的ref，这样创建的ref与其源属性保持同步。</p>
<p>改变源属性的值将更新ref的值，反之亦然。</p>
<p>如果对象是非响应式的，则不产生效果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; person &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;toRef: &#123;&#123; like &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; person2 &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;toRef: &#123;&#123; like2 &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; toRef, reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const person = &#123;</span><br><span class="line">  name: &quot;yajue&quot;,</span><br><span class="line">  age: 24,</span><br><span class="line">  like: &quot;ramen&quot;</span><br><span class="line">&#125;</span><br><span class="line">// 非响应式对象经过toRef处理</span><br><span class="line">// 参数1为对象，2为对象中的一个key</span><br><span class="line">const like = toRef(person, &quot;like&quot;)</span><br><span class="line"></span><br><span class="line">const person2 = reactive(&#123;</span><br><span class="line">  name: &quot;yajue&quot;,</span><br><span class="line">  age: 24,</span><br><span class="line">  like: &quot;ramen&quot;</span><br><span class="line">&#125;)</span><br><span class="line">// 响应式对象经过toRef处理</span><br><span class="line">const like2 = toRef(person2, &quot;like&quot;)</span><br><span class="line"></span><br><span class="line">const change = ()=&gt; &#123;</span><br><span class="line">  // 如果对象不是响应式，则值改变不会造成视图的改变</span><br><span class="line">  // person.like = &quot;rape&quot;</span><br><span class="line">  // console.log(person)</span><br><span class="line"></span><br><span class="line">  // toRef作用于非响应式，然并卵，对象本身变化了，但视图不变化</span><br><span class="line">  like.value = &quot;rape&quot;</span><br><span class="line">  console.log(person, like)</span><br><span class="line"></span><br><span class="line">  // toRef作用于响应式，对象和视图都变化了</span><br><span class="line">  like2.value = &quot;rape&quot;</span><br><span class="line">  console.log(person2, like2)</span><br><span class="line"></span><br><span class="line">  // 应用场景：只需要响应式对象上的某属性，并且希望它的改变能导致对象和视图改变</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h1><p>根据一个响应式对象创建普通对象，对象的每个属性都是指向原对象属性的ref，主要是方便解构使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; person &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; name &#125;&#125; - &#123;&#123; age &#125;&#125; - &#123;&#123; like &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; toRef, reactive, toRefs &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const person = reactive(&#123;</span><br><span class="line">  name: &quot;yajue&quot;,</span><br><span class="line">  age: 24,</span><br><span class="line">  like: &quot;ramen&quot;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// toRefs可以把对象的每一个属性都变成ref，</span><br><span class="line">// const toRefs = &lt;T extends object&gt;(object: T)=&gt; &#123;</span><br><span class="line">//   const map: any = &#123;&#125;</span><br><span class="line">//   for(let key in object) &#123;</span><br><span class="line">//     map[key] = toRef(object, key)</span><br><span class="line">//   &#125;</span><br><span class="line">//   return map</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// reactive一旦被解构，响应式就不存在了（变成普通值）</span><br><span class="line">// let &#123;name, age, like&#125; = person</span><br><span class="line">// 如果想要从响应式对象上解构响应式值，需要toRefs</span><br><span class="line">const &#123;name, age, like&#125; = toRefs(person)</span><br><span class="line"></span><br><span class="line">const change = ()=&gt; &#123;</span><br><span class="line">  console.log(name, age, like)</span><br><span class="line">  // name = &quot;yjsp&quot;</span><br><span class="line">  // age = 114</span><br><span class="line">  // like = &quot;rape&quot;</span><br><span class="line">  name.value = &quot;yjsp&quot;</span><br><span class="line">  age.value = 114</span><br><span class="line">  like.value = &quot;rape&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a>toRaw</h1><p>返回响应式对象的原始对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;look&quot;&gt;查看&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, toRaw &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const person = reactive&lt;any&gt;(&#123;</span><br><span class="line">  name: &quot;yajue&quot;,</span><br><span class="line">  age: 24,</span><br><span class="line">  like: &quot;ramen&quot;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const look = ()=&gt; &#123;</span><br><span class="line">  // toRaw能把响应式对象变成普通对象</span><br><span class="line">  console.log(person, toRaw(person))</span><br><span class="line">  // 本质上就是这样（__v_raw是一个隐藏属性）</span><br><span class="line">  console.log(person, person[&quot;__v_raw&quot;])</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>在Vue源码（<code>/package/reactivity/src/ref.ts</code>）中可以看到toRef和toRefs的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前面是各种对函数的重载</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> toRef&lt;T&gt;(</span><br><span class="line">  <span class="attr">value</span>: T</span><br><span class="line">): T <span class="keyword">extends</span> () =&gt; infer R</span><br><span class="line">  ? <span class="title class_">Readonly</span>&lt;<span class="title class_">Ref</span>&lt;R&gt;&gt;</span><br><span class="line">  : T <span class="keyword">extends</span> <span class="title class_">Ref</span></span><br><span class="line">  ? T</span><br><span class="line">  : <span class="title class_">Ref</span>&lt;<span class="title class_">UnwrapRef</span>&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> toRef&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>, K <span class="keyword">extends</span> keyof T&gt;(</span><br><span class="line">  <span class="attr">object</span>: T,</span><br><span class="line">  <span class="attr">key</span>: K</span><br><span class="line">): <span class="title class_">ToRef</span>&lt;T[K]&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> toRef&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>, K <span class="keyword">extends</span> keyof T&gt;(</span><br><span class="line">  <span class="attr">object</span>: T,</span><br><span class="line">  <span class="attr">key</span>: K,</span><br><span class="line">  <span class="attr">defaultValue</span>: T[K]</span><br><span class="line">): <span class="title class_">ToRef</span>&lt;<span class="title class_">Exclude</span>&lt;T[K], <span class="literal">undefined</span>&gt;&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">toRef</span>(<span class="params"></span></span><br><span class="line"><span class="params">  source: Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt; | MaybeRef,	<span class="comment">// 第一个参数：一个对象</span></span></span><br><span class="line"><span class="params">  key?: <span class="built_in">string</span>,			<span class="comment">// 第二个参数：对象的一个key值</span></span></span><br><span class="line"><span class="params">  defaultValue?: <span class="built_in">unknown</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Ref</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isRef</span>(source)) &#123;</span><br><span class="line">    <span class="keyword">return</span> source</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isFunction</span>(source)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GetterRefImpl</span>(source) <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isObject</span>(source) &amp;&amp; <span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">propertyToRef</span>(source, key!, defaultValue)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">ref</span>(source)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">propertyToRef</span>(<span class="params">source: <span class="built_in">object</span>, key: <span class="built_in">string</span>, defaultValue?: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> val = (source <span class="keyword">as</span> <span class="built_in">any</span>)[key]		<span class="comment">// 取出key值的value</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">isRef</span>(val)			<span class="comment">// 判断value是否为ref对象</span></span><br><span class="line">    ? val					<span class="comment">// 是就直接返回</span></span><br><span class="line">    : (<span class="keyword">new</span> <span class="title class_">ObjectRefImpl</span>(		<span class="comment">// 否则变成ref</span></span><br><span class="line">        source <span class="keyword">as</span> <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;,</span><br><span class="line">        key,</span><br><span class="line">        defaultValue</span><br><span class="line">      ) <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectRefImpl</span>&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>, K <span class="keyword">extends</span> keyof T&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isRef = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> _object: T,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> _key: K,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> _defaultValue?: T[K]</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里没有做收集依赖或者触发依赖更新，所以它对非响应式对象不会改变视图</span></span><br><span class="line">  <span class="comment">// 对响应式对象能改变视图，是因为reactive里会用proxy，里面有做收集依赖和触发依赖更新的的操作</span></span><br><span class="line">  <span class="comment">// 如果这里做了，那么就会产生做两次收集或触发的bug（toRef的属性做一次，reactive对象本身再做一次）</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> val = <span class="variable language_">this</span>.<span class="property">_object</span>[<span class="variable language_">this</span>.<span class="property">_key</span>]</span><br><span class="line">    <span class="keyword">return</span> val === <span class="literal">undefined</span> ? (<span class="variable language_">this</span>.<span class="property">_defaultValue</span> <span class="keyword">as</span> T[K]) : val</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_object</span>[<span class="variable language_">this</span>.<span class="property">_key</span>] = newVal</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">dep</span>(): <span class="title class_">Dep</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getDepFromReactive</span>(<span class="title function_">toRaw</span>(<span class="variable language_">this</span>.<span class="property">_object</span>), <span class="variable language_">this</span>.<span class="property">_key</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toRefs，就是给对象的每个属性都toRef</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> toRefs&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt;(<span class="attr">object</span>: T): <span class="title class_">ToRefs</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (__DEV__ &amp;&amp; !<span class="title function_">isProxy</span>(<span class="built_in">object</span>)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`toRefs() expects a reactive object but received a plain one.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">ret</span>: <span class="built_in">any</span> = <span class="title function_">isArray</span>(<span class="built_in">object</span>) ? <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="built_in">object</span>.<span class="property">length</span>) : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="built_in">object</span>) &#123;</span><br><span class="line">    ret[key] = <span class="title function_">propertyToRef</span>(<span class="built_in">object</span>, key)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Vue源码（<code>/package/reactivity/src/reactive.ts</code>）中可以看到toRaw的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 它从对象里取了一个属性，这个属性就是__v_raw</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> toRaw&lt;T&gt;(<span class="attr">observed</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">const</span> raw = observed &amp;&amp; (observed <span class="keyword">as</span> <span class="title class_">Target</span>)[<span class="title class_">ReactiveFlags</span>.<span class="property">RAW</span>]</span><br><span class="line">  <span class="keyword">return</span> raw ? <span class="title function_">toRaw</span>(raw) : observed</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">ReactiveFlags</span> &#123;</span><br><span class="line">  <span class="variable constant_">SKIP</span> = <span class="string">&#x27;__v_skip&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">IS_REACTIVE</span> = <span class="string">&#x27;__v_isReactive&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">IS_READONLY</span> = <span class="string">&#x27;__v_isReadonly&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">IS_SHALLOW</span> = <span class="string">&#x27;__v_isShallow&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">RAW</span> = <span class="string">&#x27;__v_raw&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3响应式原理</title>
    <url>/web/study/vue/9.Vue3%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="Vue2的不足"><a href="#Vue2的不足" class="headerlink" title="Vue2的不足"></a>Vue2的不足</h1><p>Vue2使用<code>Object.defineProperty</code>实现响应式，它有一些不足：</p>
<ul>
<li><p>对象只能劫持事先定义好的数据，新增的数据需要<code>Vue.Set(xxx)</code></p>
</li>
<li><p>数组只能使用七种（Vue重写后的）数组方法操作，使用下标修改某一项值就无法被劫持</p>
<blockquote>
<p><code>Object.defineProperty</code>其实可以做到数组修改，但是会产生性能问题</p>
</blockquote>
</li>
</ul>
<h1 id="reactive的实现"><a href="#reactive的实现" class="headerlink" title="reactive的实现"></a>reactive的实现</h1><p>Vue3使用ES6的Proxy实现响应式。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; track, trigger &#125; <span class="keyword">from</span> <span class="string">&quot;./effect&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isObject</span> = (<span class="params">target:<span class="built_in">any</span></span>)=&gt; target!=<span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> target == <span class="string">&quot;object&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现对象的响应式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reactive = &lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt;(<span class="attr">target</span>: T): <span class="function"><span class="params">T</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, &#123;</span><br><span class="line">    <span class="comment">// 属性读取操作的捕捉器</span></span><br><span class="line">    <span class="comment">// target:当前的对象 key:对象的属性 receiver:proxy或继承proxy的对象</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">      <span class="comment">// 有些情况下会造成上下文的错乱</span></span><br><span class="line">      <span class="comment">// return target[key]</span></span><br><span class="line">      <span class="comment">// 这样（有receiver）可以保证上下文的正确</span></span><br><span class="line">      <span class="keyword">let</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">      <span class="title function_">track</span>(target, key)</span><br><span class="line">      <span class="comment">// 递归监听嵌套对象</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="title function_">isObject</span>(res)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">reactive</span>(res <span class="keyword">as</span> <span class="built_in">object</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 属性设置操作的捕捉器</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">      <span class="comment">// Reflect.set返回一个布尔值</span></span><br><span class="line">      <span class="keyword">let</span> res = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">      <span class="title function_">trigger</span>(target, key)</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// delete操作符的捕捉器</span></span><br><span class="line">    <span class="comment">// deleteProperty() &#123;</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// 函数调用操作的捕捉器</span></span><br><span class="line">    <span class="comment">// apply() &#123;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 等，每种对象操作都有其捕捉器</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="effect"><a href="#effect" class="headerlink" title="effect"></a>effect</h1><p>activeEffect收集副作用函数，初始化时也会调用一下，主要用来进行视图的改变。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局变量activeEffect</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">activeEffect</span>: <span class="title class_">Function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收集当前副作用函数，并且初始化的时候调用一下</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn 匿名函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">effect</span> = (<span class="params">fn: <span class="built_in">Function</span></span>)=&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一个闭包</span></span><br><span class="line">  <span class="keyword">const</span> _effect = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    activeEffect = _effect</span><br><span class="line">    <span class="title function_">fn</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化的时候调用一下</span></span><br><span class="line">  <span class="title function_">_effect</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="track"><a href="#track" class="headerlink" title="track"></a>track</h1><p>如图所示，通过以WeakMap为主的数据结构收集依赖。</p>
<p><img src="https://image.cheriko.fun/post/202305112331599.png"></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要把对象和对象的key拼装成这种数据结构</span></span><br><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 依赖的收集</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target 响应式对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> track = &lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt; <span class="function">(<span class="params">target: T, key: <span class="built_in">string</span> | <span class="built_in">symbol</span></span>)=&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="comment">// 如果targetMap中没有这个对象key</span></span><br><span class="line">  <span class="keyword">if</span>(!depsMap) &#123;</span><br><span class="line">    depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    targetMap.<span class="title function_">set</span>(target, depsMap)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> deps = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="comment">// 同理，如果deps中没有这个对象值key</span></span><br><span class="line">  <span class="keyword">if</span>(!deps) &#123;</span><br><span class="line">    deps = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">    depsMap.<span class="title function_">set</span>(key, deps)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  deps.<span class="title function_">add</span>(activeEffect)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="trigger"><a href="#trigger" class="headerlink" title="trigger"></a>trigger</h1><p>更新依赖（就是调用这个值的副作用函数）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 依赖的更新</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> trigger = &lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt; <span class="function">(<span class="params">target: T, key: <span class="built_in">string</span> | <span class="built_in">symbol</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;111&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> deps = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span>(!deps) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;222&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  deps.<span class="title function_">forEach</span>(<span class="function">(<span class="params">effect: <span class="built_in">Function</span></span>)=&gt;</span> <span class="title function_">effect</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><blockquote>
<p>要先把TypeScript代码编译成JavaScript代码。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;./reactive.js&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; effect &#125; <span class="keyword">from</span> <span class="string">&quot;./effect.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义一个reactive对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> person = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&quot;yajue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">24</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 对象嵌套的情况</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">foo</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bar</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">baz</span>: <span class="number">1919810</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 接收匿名函数，模拟DOM和数据的绑定</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">effect</span>(<span class="function">()=&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#app&quot;</span>).<span class="property">innerText</span> = <span class="string">`<span class="subst">$&#123;person.name&#125;</span> - <span class="subst">$&#123;person.age&#125;</span> - <span class="subst">$&#123;person.foo.bar.baz&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 实现了当数据变化时，视图就变化的响应式效果</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      person.<span class="property">name</span> = <span class="string">&quot;yjsp&quot;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        person.<span class="property">age</span> = <span class="number">114514</span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          person.<span class="property">foo</span>.<span class="property">bar</span>.<span class="property">baz</span> = <span class="number">364364</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
