<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>这是本站点的第一个页面</title>
    <url>/selfTalking/firstPage.html</url>
    <content><![CDATA[<p>之前曾经试着搞过……</p>
<p>首先是用的第三方图床崩了</p>
<p>接着工程自己也崩了（始终没找到是哪里崩的）</p>
<p>正好要做毕设，没时间整这玩意</p>
<p>这下毕设做完了，干脆重新整一个个人博客吧！</p>
<p>于是你就见到了这个新站点……</p>
<p>框架：hexo、主题：butterfly、现在以及今后可能都会出现各种魔改（</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
        <tag>本站</tag>
      </tags>
  </entry>
  <entry>
    <title>我制作了一个唱片架</title>
    <url>/web/diy/recordCase.html</url>
    <content><![CDATA[<p>因为我很喜欢听音乐（尤其是电子音乐），所以我希望我自己的博客能给浏览者安利很多很多好听的音乐。</p>
<p>总感觉这个全局吸底aplayer如果只能播一个歌单的话太浪费了。我希望它能像家里摆着的唱片机一样，当客人来做客时，任他在唱片架挑选中意的唱片，并放进这个唱片机里开始聆听。</p>
<p>虽然我是技术渣，但还是想试试。</p>
<h1 id="乐辑"><a href="#乐辑" class="headerlink" title="乐辑"></a>乐辑</h1><p>这里直接照搬了butterfly主题中图册页的样式和标签插件（确实很好看），就不赘述了。</p>
<p>收藏的唱片一多，确实就需要对唱片架中的唱片进行归类。</p>
<h1 id="唱片架"><a href="#唱片架" class="headerlink" title="唱片架"></a>唱片架</h1><p>一定程度上参考了butterfly的图片页。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>大概长这样：</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://image.cheriko.fun/post/202305011601485.png"></p>
<p>当鼠标移至唱片封面时，会出现个人的<del>吐槽</del>评价，以及黑胶唱片被拿出的效果。</p>
<p>点击下方的播放，底部aplayer的播放列表就会变成这个唱片的曲目啦。</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>为了方便日后使用，干脆做成一个标签插件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AuroraCafe</span></span><br><span class="line"><span class="comment"> * musicGroup and musicItem</span></span><br><span class="line"><span class="comment"> * &#123;% musicGroup [name] [descr] [url] [img] %&#125;</span></span><br><span class="line"><span class="comment"> * &#123;% musicItem [cover] [title] [author] [id] [server] [type] [description] %&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> urlFor = <span class="built_in">require</span>(<span class="string">&#x27;hexo-util&#x27;</span>).<span class="property">url_for</span>.<span class="title function_">bind</span>(hexo)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * musicGroup省略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">musicItem</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> cover = args[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">const</span> title = args[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">const</span> author = args[<span class="number">2</span>]</span><br><span class="line">  <span class="keyword">const</span> id = args[<span class="number">3</span>]</span><br><span class="line">  <span class="keyword">const</span> server = args[<span class="number">4</span>]</span><br><span class="line">  <span class="keyword">const</span> type = args[<span class="number">5</span>]</span><br><span class="line">  <span class="keyword">const</span> description = args[<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> extraHTML = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">if</span>(description &amp;&amp; <span class="title function_">typeof</span>(description)!==<span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    extraHTML = <span class="string">`&lt;div class=&quot;description&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;p class=&quot;des-inner&quot;&gt;<span class="subst">$&#123;description&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;music-item&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;div class=&quot;pic-item&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;img class=&quot;cover no-lightbox&quot; src=&quot;<span class="subst">$&#123;cover&#125;</span>?x-oss-process=image/resize,s_300&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;div class=&quot;inner&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;img no-lazy src=&quot;/img/vinyl.png&quot; class=&quot;vinyl no-lightbox&quot;&gt;</span></span><br><span class="line"><span class="string">        <span class="subst">$&#123;extraHTML&#125;</span></span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">      &lt;p class=&quot;title&quot;&gt;<span class="subst">$&#123;title&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;p class=&quot;author&quot;&gt;<span class="subst">$&#123;author&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;button class=&quot;music-play-btn&quot; data-id=&quot;<span class="subst">$&#123;id&#125;</span>&quot; data-server=&quot;<span class="subst">$&#123;server&#125;</span>&quot; data-type=&quot;<span class="subst">$&#123;type&#125;</span>&quot;&gt;播放&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hexo.extend.tag.register(&#x27;musicGroup&#x27;, musicGroup)</span></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;musicItem&#x27;</span>, musicItem)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><p>在<code>/source/css/tags</code>中创建了<code>musicItem.styl</code>，用于唱片架样式。</p>
<blockquote>
<p>别忘了引入到总样式文件里。</p>
</blockquote>
<p>每一个唱片是<code>.music-item</code>，一个唱片架就是<code>.music-list</code>。</p>
<blockquote>
<p>老实说我还是比较习惯scss的写法，stylus让我觉得好别扭orz。</p>
</blockquote>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#article-container</span></span><br><span class="line">  </span><br><span class="line">  <span class="selector-class">.music-list</span> </span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-row</span>-gap: <span class="number">1.5rem</span>;</span><br><span class="line">    justify-items: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2rem</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">500px</span>)</span><br><span class="line">      &amp;</span><br><span class="line">        grid-template-columns: <span class="number">1</span>fr;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.music-item</span> </span><br><span class="line">      <span class="attribute">width</span>: <span class="number">14rem</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">18rem</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    </span><br><span class="line">      <span class="selector-class">.pic-item</span> </span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">12rem</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">12rem</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="selector-class">.cover</span> </span><br><span class="line">          <span class="attribute">width</span>: <span class="number">12rem</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">12rem</span>;</span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">          <span class="attribute">transition</span>: <span class="number">0.1s</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="selector-class">.inner</span> </span><br><span class="line">          <span class="attribute">width</span>: <span class="number">11.5rem</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">11.5rem</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">3</span>);</span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">1rem</span>;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">top</span>: <span class="number">0.25rem</span>;</span><br><span class="line">          <span class="attribute">left</span>: <span class="number">1.25rem</span>;</span><br><span class="line">          <span class="attribute">transition</span>: <span class="number">0.1s</span>;</span><br><span class="line">          <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.vinyl</span> </span><br><span class="line">          <span class="attribute">width</span>: <span class="number">12rem</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">12rem</span>;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">background-color</span>: transparent;</span><br><span class="line">          <span class="attribute">left</span>: <span class="number">1.5rem</span>;</span><br><span class="line">          <span class="attribute">transition</span>: <span class="number">0.1s</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="selector-class">.description</span> </span><br><span class="line">          <span class="attribute">visibility</span>: hidden;</span><br><span class="line">          <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">12rem</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">12rem</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">          <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">          <span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</span><br><span class="line">          <span class="attribute">overflow</span>: hidden;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">transition</span>: <span class="number">0.1s</span>;</span><br><span class="line">          <span class="attribute">z-index</span>: <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.des-inner</span> </span><br><span class="line">            <span class="attribute">width</span>: <span class="number">12rem</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">12rem</span>;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">0.5rem</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">0.8rem</span>;</span><br><span class="line">            <span class="attribute">letter-spacing</span>: <span class="number">0.05rem</span>;</span><br><span class="line">            <span class="attribute">line-height</span>: <span class="number">1.1rem</span>;</span><br><span class="line">            <span class="attribute">text-indent</span>: <span class="number">1.6rem</span>;</span><br><span class="line">            <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">            <span class="attribute">transition</span>: <span class="number">0.1s</span>;</span><br><span class="line">            <span class="attribute">z-index</span>: <span class="number">5</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span> </span><br><span class="line">          <span class="selector-class">.vinyl</span> </span><br><span class="line">            <span class="attribute">left</span>: <span class="number">3.5rem</span>;</span><br><span class="line">    </span><br><span class="line">          <span class="selector-class">.cover</span> </span><br><span class="line">            <span class="attribute">box-shadow</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>) <span class="number">0px</span> <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line">          </span><br><span class="line">          <span class="selector-class">.inner</span> </span><br><span class="line">            <span class="attribute">box-shadow</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>) <span class="number">0px</span> <span class="number">5px</span> <span class="number">15px</span>;</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.description</span></span><br><span class="line">            <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">            <span class="attribute">visibility</span>: visible;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">      <span class="selector-tag">p</span> </span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">cursor</span>: default;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.title</span> </span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1rem</span>;</span><br><span class="line">        <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">        <span class="attribute">word-break</span>: break-all;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">0.5rem</span>;</span><br><span class="line">  </span><br><span class="line">      <span class="selector-class">.author</span> </span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">0.8rem</span>;</span><br><span class="line">        <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">        <span class="attribute">word-break</span>: break-all;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    </span><br><span class="line">      </span><br><span class="line">      <span class="selector-tag">button</span> </span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0.25rem</span></span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">1rem</span>;</span><br><span class="line">        <span class="attribute">margin-top</span>: <span class="number">0.5rem</span>;</span><br><span class="line">        <span class="attribute">transition</span>: <span class="number">0.1s</span>;</span><br><span class="line">        <span class="attribute">box-shadow</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>) <span class="number">0px</span> <span class="number">4px</span> <span class="number">12px</span>;</span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span> </span><br><span class="line">          <span class="attribute">cursor</span>: pointer;</span><br><span class="line">          <span class="attribute">box-shadow</span>: <span class="built_in">rgba</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">93</span>, <span class="number">0.25</span>) <span class="number">0px</span> <span class="number">2px</span> <span class="number">5px</span> -<span class="number">1px</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>) <span class="number">0px</span> <span class="number">1px</span> <span class="number">3px</span> -<span class="number">1px</span>;</span><br></pre></td></tr></table></figure>

<h2 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h2><p>在<code>/source/js</code>中创建了<code>changePlay.js</code>，用于唱片架样式。</p>
<blockquote>
<p>其实也就点击播放后切换播放列表这一个行为。</p>
</blockquote>
<p>查阅了其他人的一些博客，各位推介的最佳实践都是使用meting.js对aplayer进行增强，这样只要输入几个参数就能获取整个网络音乐平台的播放列表，不需要自己想办法获得音乐的api。就像这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meting-js</span> <span class="attr">server</span>=<span class="string">&quot;netease&quot;</span> <span class="attr">type</span>=<span class="string">&quot;album&quot;</span> <span class="attr">id</span>=<span class="string">&quot;154548341&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>但是这样并不符合我的要求，因为当我查阅meting.js的文档时，我发现一个问题：meting.js仿佛是一个完全的黑箱操作，它好像没有提供任何透露流程细节的API，我只能输入几个参数看着它自己在网页的该位置生成一个aplayer播放器。</p>
<blockquote>
<p>这明显不符合我的需求，我希望操作博客已有的全局吸底播放器，而不是生成一个新播放器。</p>
</blockquote>
<p>于是我查看了meting.js的源码，从其中摘取了一段核心代码，并另写了一个普通的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getMusicList</span> = <span class="keyword">async</span> (<span class="params">options</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> (options) !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> api</span><br><span class="line">  <span class="keyword">let</span> result</span><br><span class="line"></span><br><span class="line">  <span class="comment">//初始化</span></span><br><span class="line">  <span class="title function_">init</span>()</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">parse</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    api =</span><br><span class="line">      options.<span class="property">api</span> ||</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">meting_api</span> ||</span><br><span class="line">      <span class="string">&#x27;https://api.i-meto.com/meting/api?server=:server&amp;type=:type&amp;id=:id&amp;r=:r&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">auto</span>) <span class="title function_">_parse_link</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_parse_link</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> rules = [</span><br><span class="line">        [<span class="string">&#x27;music.163.com.*song.*id=(\\d+)&#x27;</span>, <span class="string">&#x27;netease&#x27;</span>, <span class="string">&#x27;song&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;music.163.com.*album.*id=(\\d+)&#x27;</span>, <span class="string">&#x27;netease&#x27;</span>, <span class="string">&#x27;album&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;music.163.com.*artist.*id=(\\d+)&#x27;</span>, <span class="string">&#x27;netease&#x27;</span>, <span class="string">&#x27;artist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;music.163.com.*playlist.*id=(\\d+)&#x27;</span>, <span class="string">&#x27;netease&#x27;</span>, <span class="string">&#x27;playlist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;music.163.com.*discover/toplist.*id=(\\d+)&#x27;</span>, <span class="string">&#x27;netease&#x27;</span>, <span class="string">&#x27;playlist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;y.qq.com.*song/(\\w+).html&#x27;</span>, <span class="string">&#x27;tencent&#x27;</span>, <span class="string">&#x27;song&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;y.qq.com.*album/(\\w+).html&#x27;</span>, <span class="string">&#x27;tencent&#x27;</span>, <span class="string">&#x27;album&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;y.qq.com.*singer/(\\w+).html&#x27;</span>, <span class="string">&#x27;tencent&#x27;</span>, <span class="string">&#x27;artist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;y.qq.com.*playsquare/(\\w+).html&#x27;</span>, <span class="string">&#x27;tencent&#x27;</span>, <span class="string">&#x27;playlist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;y.qq.com.*playlist/(\\w+).html&#x27;</span>, <span class="string">&#x27;tencent&#x27;</span>, <span class="string">&#x27;playlist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;xiami.com.*song/(\\w+)&#x27;</span>, <span class="string">&#x27;xiami&#x27;</span>, <span class="string">&#x27;song&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;xiami.com.*album/(\\w+)&#x27;</span>, <span class="string">&#x27;xiami&#x27;</span>, <span class="string">&#x27;album&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;xiami.com.*artist/(\\w+)&#x27;</span>, <span class="string">&#x27;xiami&#x27;</span>, <span class="string">&#x27;artist&#x27;</span>],</span><br><span class="line">        [<span class="string">&#x27;xiami.com.*collect/(\\w+)&#x27;</span>, <span class="string">&#x27;xiami&#x27;</span>, <span class="string">&#x27;playlist&#x27;</span>],</span><br><span class="line">      ]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> rule <span class="keyword">of</span> rules) &#123;</span><br><span class="line">        <span class="comment">// 返回匹配</span></span><br><span class="line">        <span class="comment">// eg: &quot;https://y.qq.com/n/yqq/song/001RGrEX3ija5X.html&quot;</span></span><br><span class="line">        <span class="comment">// [&quot;y.qq.com/n/yqq/song/001RGrEX3ija5X.html&quot;, &quot;001RGrEX3ija5X&quot;]</span></span><br><span class="line">        <span class="keyword">let</span> patt = <span class="keyword">new</span> <span class="title class_">RegExp</span>(rule[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">let</span> res = patt.<span class="title function_">exec</span>(options.<span class="property">auto</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (res !== <span class="literal">null</span>) &#123;</span><br><span class="line">          options.<span class="property">server</span> = rule[<span class="number">1</span>]</span><br><span class="line">          options.<span class="property">type</span> = rule[<span class="number">2</span>]</span><br><span class="line">          options.<span class="property">id</span> = res[<span class="number">1</span>]</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">parse</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">url</span>) &#123;</span><br><span class="line">      <span class="comment">// 直接构建 APlayer 配置</span></span><br><span class="line">      <span class="keyword">let</span> res = &#123;</span><br><span class="line">        <span class="attr">name</span>: options.<span class="property">name</span> || options.<span class="property">title</span> || <span class="string">&#x27;Audio name&#x27;</span>,</span><br><span class="line">        <span class="attr">artist</span>: options.<span class="property">artist</span> || options.<span class="property">author</span> || <span class="string">&#x27;Audio artist&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>: options.<span class="property">url</span>,</span><br><span class="line">        <span class="attr">cover</span>: options.<span class="property">cover</span> || options.<span class="property">pic</span>,</span><br><span class="line">        <span class="attr">lrc</span>: options.<span class="property">lrc</span> || options.<span class="property">lyric</span> || <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="attr">type</span>: options.<span class="property">type</span> || <span class="string">&#x27;auto&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      result = res</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// // 1. 通过 meta 拼凑接口参数获得完整接口 （_init 中存放的默认 api）</span></span><br><span class="line">    <span class="comment">// // 2. 请求接口，得到播放列表数据</span></span><br><span class="line">    <span class="keyword">let</span> url = api</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;:server&#x27;</span>, options.<span class="property">server</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;:type&#x27;</span>, options.<span class="property">type</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;:id&#x27;</span>, options.<span class="property">id</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;:auth&#x27;</span>, options.<span class="property">auth</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&#x27;:r&#x27;</span>, <span class="title class_">Math</span>.<span class="title function_">random</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> r = <span class="keyword">await</span> <span class="title function_">fetch</span>(url)</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> r.<span class="title function_">json</span>()</span><br><span class="line"></span><br><span class="line">    result = res</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>源码是一个继承了HTMLElement的类（因为要以HTML标签形式使用），其中最核心的两个部分即<code>init()</code>（调整参数）和<code>parse()</code>（获得播放列表）两个方法。</p>
<p>我把它简单修改成了一个传入配置对象参数就可以获得播放列表的函数，把后续各种构建aplayer实例以及创建DOM元素之类的行为都舍弃了。</p>
<blockquote>
<p>你非得问我的话就是我也不懂（</p>
</blockquote>
<p>然后就是为按钮绑定事件了，但好像产生了新问题：hexo中，用户自定义js好像只能全局引入。</p>
<blockquote>
<p> 如果确实有按页面引入的方法的话请务必告诉我</p>
</blockquote>
<p>这意味着如果我是为music-list还是为music-item绑定事件都不行，因为只有在特定的页面中才会有这两类元素，在其他页面载入话就会产生空指针报错。</p>
<p>最后我想了个笨方法：直接给全局绑定点击事件，并检测点击目标（</p>
<blockquote>
<p>别嘲笑我，我要脸orz。</p>
</blockquote>
<p>具体代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">async</span> (event) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> target = event.<span class="property">target</span></span><br><span class="line">  <span class="keyword">const</span> tagName = target.<span class="property">tagName</span></span><br><span class="line">  <span class="keyword">if</span> (tagName.<span class="title function_">toUpperCase</span>() == <span class="string">&quot;BUTTON&quot;</span> &amp;&amp; target.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;music-play-btn&quot;</span>)) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dataset = target.<span class="property">dataset</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dataset.<span class="property">server</span> == <span class="string">&quot;undefined&quot;</span> || dataset.<span class="property">type</span> == <span class="string">&quot;undefined&quot;</span> || dataset.<span class="property">id</span> == <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;param err&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用上面的魔改meting.js，获取播放列表</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getMusicList</span>(&#123;</span><br><span class="line">      <span class="attr">server</span>: dataset.<span class="property">server</span>,</span><br><span class="line">      <span class="attr">type</span>: dataset.<span class="property">type</span>,</span><br><span class="line">      <span class="attr">id</span>: dataset.<span class="property">id</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据全局吸底aplayer构建实例</span></span><br><span class="line">    <span class="keyword">const</span> ap = <span class="keyword">new</span> <span class="title class_">APlayer</span>(&#123;</span><br><span class="line">      <span class="attr">container</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bottom-aplayer&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ap) &#123;</span><br><span class="line">      <span class="comment">// 清空目前的播放列表</span></span><br><span class="line">      ap.<span class="property">list</span>.<span class="title function_">clear</span>()</span><br><span class="line">      <span class="comment">// 添加播放列表</span></span><br><span class="line">      ap.<span class="property">list</span>.<span class="title function_">add</span>(res)</span><br><span class="line">      <span class="comment">// 获取缓存的音量信息</span></span><br><span class="line">      <span class="keyword">const</span> metingStr = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;metingjs&quot;</span>)</span><br><span class="line">      <span class="keyword">const</span> metingjs = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(metingStr)</span><br><span class="line">      <span class="keyword">let</span> vol</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> (metingjs.<span class="property">volume</span>) == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">        vol = metingjs.<span class="property">volume</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        vol = ap.<span class="property">audio</span>.<span class="property">volume</span></span><br><span class="line">      &#125;</span><br><span class="line">      ap.<span class="title function_">volume</span>(vol, <span class="literal">true</span>)</span><br><span class="line">      <span class="comment">// 展开给浏览者看一下，“我已经改好播放列表了！”</span></span><br><span class="line">      ap.<span class="title function_">setMode</span>(<span class="string">&quot;normal&quot;</span>)</span><br><span class="line">      <span class="comment">// 开始播放</span></span><br><span class="line">      ap.<span class="title function_">play</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure>

<h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>随后我又想尝试新的功能：添加一个按钮，点击后不改变播放列表，只是在播放列表末尾插入曲目。</p>
<p>我尝试了一阵子，始终未能成功，但发现了问题所在：</p>
<p>加载站点后所处的的第一个页面，可以从console找到该页面中所有aplayer实例（全部都被butterfly框架放在了<code>aplayers</code>这个数组中，包括吸底aplayer）。</p>
<p>但前往其他页面时，再看<code>aplayers</code>数组，就找不到刚才的实例了。</p>
<p>确实hexo博客不是单页面应用，这样其实也挺正常的。但全局吸底aplayer托了pjax的福，即便页面连续跳转，播放也不间断。</p>
<p>经观察，上面的代码本质上是给原本全局aplayer的位置新建了一个aplayer实例，如果我只想末尾插入曲目，我可能需要获得原本的aplayer实例。</p>
<p>到底该怎么做呢（我不知道pjax的运行机制）。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>DIY</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>hexo</tag>
        <tag>音乐</tag>
        <tag>DIY</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3概述</title>
    <url>/web/study/vue/1.Vue3%E6%A6%82%E8%BF%B0.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="介绍Vue"><a href="#介绍Vue" class="headerlink" title="介绍Vue"></a>介绍Vue</h1><ul>
<li><p>Vue是一套用于构建用户界面的渐进式框架</p>
</li>
<li><p>Vue的优点</p>
<ul>
<li>自底向上逐层运用</li>
<li>只关注视图层，易上手</li>
<li>易与第三方库或现有项目整合</li>
<li>能驱动复杂的单页面项目</li>
</ul>
</li>
<li><p>Vue是MVVM（Model-View-ViewModel）架构</p>
<ul>
<li>View：视图层（UI用户界面）</li>
<li>ViewModel：业务逻辑层（一切JS可视为业务逻辑）</li>
<li>Model：数据层（存储数据、对数据的处理）</li>
</ul>
</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://image.cheriko.fun/post/202305011714208.png" alt="MVVM架构"></p>
<h1 id="Vue2-vs-Vue3"><a href="#Vue2-vs-Vue3" class="headerlink" title="Vue2 vs Vue3"></a>Vue2 vs Vue3</h1><ul>
<li>声明式API（Options API）写的比较分散，Vue2的写法</li>
<li>组合式API（Composition API）可以把连贯的逻辑写在一起，或者封装成hook</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://image.cheriko.fun/post/202305011714210.png" alt="声明式API &amp; 组合式API"></p>
<h1 id="Vue3新特性"><a href="#Vue3新特性" class="headerlink" title="Vue3新特性"></a>Vue3新特性</h1><ul>
<li><p>重写双向数据绑定</p>
<ul>
<li><p>Vue2：基于<code>Object.defineProperty()</code>实现</p>
<ul>
<li><p>需要使用一个备份对象</p>
</li>
<li><p>需要for in循环，才能给原对象每个属性都加响应式</p>
</li>
<li><p>无法监听数组变化，需要重写数组方法才能实现响应式（但实现的不完全）</p>
</li>
<li><p>代码复杂</p>
</li>
<li><p>原数据新增的属性不带响应式</p>
</li>
<li><p>原数据删除属性时不删除对应响应式</p>
</li>
<li><p>无法处理索引和length属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">property</span>: <span class="number">114514</span>&#125;</span><br><span class="line"><span class="keyword">const</span> _obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(_obj, <span class="string">&#x27;property&#x27;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人读取property属性了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> property <span class="keyword">in</span> obj? obj.<span class="property">property</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">       	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改property属性了，且值是&#x27;</span>+value)</span><br><span class="line">        obj.<span class="property">property</span> = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Vue3：基于Proxy实现（ES6新增）</p>
<ul>
<li><p>丢掉麻烦的备份数据</p>
</li>
<li><p>省去for in循环</p>
</li>
<li><p>监听数组变化</p>
</li>
<li><p>代码简化</p>
</li>
<li><p>监听动态新增的属性</p>
</li>
<li><p>监听删除的属性</p>
</li>
<li><p>监听数据的索引和length属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> proxyObj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">	<span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人读取property属性了&#x27;</span>)</span><br><span class="line">		<span class="keyword">return</span> prop <span class="keyword">in</span> target? target[prop]: <span class="number">0</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">target, property, value</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改property属性了，且值是&#x27;</span>+value)</span><br><span class="line">		target[prop] = value</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>VDOM性能瓶颈的解决</p>
<ul>
<li><p>Vue2中，每次更新diff都是全量对比</p>
</li>
<li><p>Vue3中只对比带有标记的，减少了非动态内容的对比消耗（<a href="https://template-explorer.vuejs.org/">能感受diff优化的工具</a>）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://image.cheriko.fun/post/202305011714211.png" alt="diff的优化"></p>
</li>
</ul>
</li>
<li><p>支持Fragments</p>
<blockquote>
<p>文档碎片，表示一个没有父级文件的最小文档对象，被视作轻量版Document。</p>
</blockquote>
<blockquote>
<p>它不是真实DOM树的一部分，变化不触发DOM重绘、不导致性能问题。</p>
</blockquote>
<blockquote>
<p>主要解决DOM元素的插入问题，例如需插入多个节点时，先创建一个Fragment，把节点依次添加到Fragment上，再把Fragment添加到页面Document上，这样只会产生一次重绘；而如果直接把DOM节点依次添加到Document，就会引发多次重绘。</p>
</blockquote>
<ul>
<li>Vue2：Template中只能有一个父节点，其他节点要被包在里面</li>
<li>Vue3：Template里可以有多个节点，并支持了tsx和jsx写法（类似react），还新增了Suspense和teleport两个内置组件，和多v-model用法</li>
</ul>
</li>
<li><p>支持Tree-shaking</p>
<blockquote>
<p>代码运行结果保持不变的前提下，去掉无用代码。</p>
</blockquote>
<ul>
<li>Vue2：无论使用什么功能，最终都会出现在生产代码中，Vue实例在项目中是单例的，捆绑程序无法检测到该对象的哪些属性在代码中被使用到</li>
<li>Vue3：将全局API进行分块，如果不使用某些功能，就不会被包含在基础包中（不会被打包）</li>
</ul>
</li>
<li><p>新增Composition API（Setup语法糖式编程）</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js底层原理</title>
    <url>/web/study/vue/2.nodejs%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<p>图片全部搬运自<a href="https://xiaoman.blog.csdn.net/article/details/122769982">学习Vue3 第二章（配置环境）</a><del>自己懒得做图了</del>。</p>
<h1 id="Node-js的构成"><a href="#Node-js的构成" class="headerlink" title="Node.js的构成"></a>Node.js的构成</h1><p>Node.js主要由V8、Libuv和第三方库组成。</p>
<ul>
<li>Libuv：跨平台异步IO库（处理事件循环），除了IO功能还提供线程、进程、信号、定时器、进程间通信、线程池等功能。</li>
<li>第三方库<ul>
<li>异步DNS解析（cares）</li>
<li>HTTP解析器（旧版：http_parser；新版：llhttp）</li>
<li>HTTP2解析器（nghttp2）</li>
<li>解压压缩库（zlib）</li>
<li>加密解密库（openssl）</li>
<li>等等等等</li>
</ul>
</li>
<li>V8：实现JS解析（把js编译成机器码）、执行和自定义拓展</li>
</ul>
<p><img src= "/img/loading.gif" data-lazy-src="https://image.cheriko.fun/post/202305012242595.png"></p>
<p>从上到下分为三层：</p>
<ul>
<li>应用层：Node.js API各种模块，基于Libuv，因为可能涉及IO流操作</li>
<li>桥梁层：与底层C或C++通信</li>
<li>底层（C++或C）：处理底层机制</li>
</ul>
<h1 id="Libuv"><a href="#Libuv" class="headerlink" title="Libuv"></a>Libuv</h1><p><img src= "/img/loading.gif" data-lazy-src="https://image.cheriko.fun/post/202305012253451.png"></p>
<ul>
<li><p>loop参数：事件循环结构的结构体</p>
</li>
<li><p>uv_loop_alive：用于注册loop，判断loop里有无任务（是否还有活动），有就开始循环，没有就退出</p>
<blockquote>
<p>loop还在活动的情况：</p>
<ol>
<li>有被引用的活动句柄或活动请求</li>
<li>有正在关闭的句柄</li>
</ol>
</blockquote>
</li>
<li><p>uv_update_time：执行setTimeOut（过段时间后执行回调）</p>
</li>
<li><p>uv_run_timers：执行setInterval（每隔一段时间都执行回调）</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://image.cheriko.fun/post/202305012303489.png"></p>
<ul>
<li>数据结构：链表+二叉堆</li>
<li>把最快过期的节点放到上面，判断是否过期<ul>
<li>如果过期就执行回调</li>
<li>如果没有过期，查看repeat，区分setTimeOut和setInterval<ul>
<li>如果是setTimeOut，任务过期后就结束了</li>
<li>如果是setInterval，进行重复执行</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>uv_run_pending：处理IO流的回调</p>
</li>
<li><p>uv_run_idle&amp;uv_run_prepare：处理其他各种队列</p>
</li>
<li><p>uv_io_poll：处理网络相关</p>
</li>
<li><p>uv_run_closing_handles：结束，关闭服务器</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite目录&amp;Vue单文件组件&amp;npm run dev</title>
    <url>/web/study/vue/3.Vite%E7%9B%AE%E5%BD%95&amp;Vue%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6&amp;npm%20run%20dev.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="Vite目录"><a href="#Vite目录" class="headerlink" title="Vite目录"></a>Vite目录</h1><ul>
<li>public：存放不会被Vite编译的静态资源</li>
<li>src<ul>
<li>assets：存放静态资源</li>
<li>components：存放组件</li>
<li>App.vue：Vue全局入口文件</li>
<li>main.ts：全局TS文件，可以引入全局样式、全局API、配置等</li>
<li>vite-env.d.ts：声明文件扩充，脚手架默认做了*.vue文件的声明扩充</li>
<li>index.html：Vite入口文件，使用ES Module形式引入main.ts</li>
<li>package.json：一些命令、依赖等</li>
<li>tsconfig.json：TS配置文件</li>
<li>vite.config.ts：Vite配置文件</li>
</ul>
</li>
</ul>
<p>Vite基于esbuild做编译；基于rollup.js做打包，性能优异。</p>
<h1 id="单文件组件（SFC）"><a href="#单文件组件（SFC）" class="headerlink" title="单文件组件（SFC）"></a>单文件组件（SFC）</h1><p>主要由三部分组成：</p>
<ul>
<li>script，写JS代码，setup形式的script在一个SFC中只能存在一个，非setup形式可存在多个</li>
<li>template，写HTML标签，在一个SFC中只能存在一个</li>
<li>style：写CSS样式</li>
</ul>
<h1 id="Vue3开发插件"><a href="#Vue3开发插件" class="headerlink" title="Vue3开发插件"></a>Vue3开发插件</h1><p>Volar（Vue Language Features和TypeScript Vue Plugin）：Vue3智能提示，使用时需禁用Vue2的Vetur。</p>
<h1 id="npm-run-dev"><a href="#npm-run-dev" class="headerlink" title="npm run dev"></a>npm run dev</h1><p>终端输入npm run dev命令后进行的全过程：</p>
<ol>
<li>收到命令，寻找package.json的scripts，查看对应的命令</li>
<li>npm run dev对应的是vite命令，执行它<ul>
<li>直接执行vite命令一般不生效，如果没做过相应配置，只能通过npm run dev执行</li>
<li>Vite在package.json中做了一个软链接（到bin），连至bin目录，里面有三个Vite的配置<ul>
<li>vite：主要给UNIX操作系统使用，通过shell脚本执行对应的vite.js</li>
<li>vite.cmd：主要给Windows操作系统使用</li>
<li>vite.ps1：跨平台，在各种操作系统都能使用</li>
</ul>
</li>
<li>查找规则：<ol>
<li>node_modules&#x2F;vite寻找bin中可执行的文件，找到则执行，找不到则到2</li>
<li>去npm全局包找，找到则执行，找不到则到3</li>
<li>找环境变量，找到则执行，找不到则报错</li>
</ol>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>模板语法&amp;Vue指令</title>
    <url>/web/study/vue/4.%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95&amp;Vue%E6%8C%87%E4%BB%A4.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="Vue3书写风格"><a href="#Vue3书写风格" class="headerlink" title="Vue3书写风格"></a>Vue3书写风格</h1><p>Vue3支持三种书写风格：</p>
<ul>
<li><p>选项式API（Options API），Vue2的写法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // data() 返回的属性将会成为响应式的状态</span><br><span class="line">  // 并且暴露在 `this` 上</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // methods 是一些用来更改状态与触发更新的函数</span><br><span class="line">  // 它们可以在模板中作为事件监听器绑定</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">      this.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 生命周期钩子会在组件生命周期的各个不同阶段被调用</span><br><span class="line">  // 例如这个函数就会在组件挂载完成后被调用</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(`The initial count is $&#123;this.count&#125;.`)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;Count is: &#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>组合式API（Composition API）</p>
<ul>
<li><p>setup函数形式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; setup, ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    // 响应式状态</span><br><span class="line">	const count = ref(0)</span><br><span class="line"></span><br><span class="line">	// 用来修改状态、触发更新的函数</span><br><span class="line">	function increment() &#123;</span><br><span class="line">  	  count.value++</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// 生命周期钩子</span><br><span class="line">	onMounted(() =&gt; &#123;</span><br><span class="line">      console.log(`The initial count is $&#123;count.value&#125;.`)</span><br><span class="line">	&#125;)</span><br><span class="line">	</span><br><span class="line">	// 必须将数据return出去，这样才能被展示</span><br><span class="line">	return &#123;</span><br><span class="line">	  count</span><br><span class="line">	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;Count is: &#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>setup语法糖模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 响应式状态</span><br><span class="line">// 不需要return，直接可以被展示</span><br><span class="line">const count = ref(0)</span><br><span class="line"></span><br><span class="line">// 用来修改状态、触发更新的函数</span><br><span class="line">function increment() &#123;</span><br><span class="line">  count.value++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 生命周期钩子</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  console.log(`The initial count is $&#123;count.value&#125;.`)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;Count is: &#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><p>template中可以使用插值语法<code>&#123;&#123; xxx &#125;&#125;</code>，可以用变量、简单的运算、API调用等展示内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 编译成&lt;div&gt;1&lt;/div&gt; --&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; a &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 编译成&lt;div&gt;2&lt;/div&gt; --&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; a + 1 &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 编译成&lt;div&gt;true&lt;/div&gt; --&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; a? &quot;true&quot;: &quot;false&quot; &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 编译成&lt;div&gt;[&#123;&quot;num&quot;:1&#125;,&#123;&quot;num&quot;:2&#125;,&#123;&quot;num&quot;:3&#125;,&#123;&quot;num&quot;:4&#125;,&#123;&quot;num&quot;:5&#125;]&lt;/div&gt; --&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; b.map(value=&gt;(&#123;num:v&#125;) &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const a = 1</span><br><span class="line">const b = [1,2,3,4,5]</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Vue指令"><a href="#Vue指令" class="headerlink" title="Vue指令"></a>Vue指令</h1><p>“v-“开头的都是vue的（内置）指令，可以直接使用</p>
<ul>
<li><p><code>v-text</code>：显示文本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 编译成&lt;div&gt;我是一段文字&lt;/div&gt; --&gt;</span><br><span class="line">  &lt;div v-text=&quot;a&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const a = &quot;我是一段文字&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-html</code>：展示富文本，但不支持组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 编译成&lt;div&gt;&lt;section style=&#x27;color:red;&#x27;&gt;我是一段文字&lt;/section&gt;&lt;/div&gt; --&gt;</span><br><span class="line">  &lt;div v-html=&quot;a&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const a = &quot;&lt;section style=&#x27;color:red;&#x27;&gt;我是一段文字&lt;/section&gt;&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-if</code>：控制元素的显示隐藏（切换真假DOM）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- a为真值时才是DOM节点，否则会变成注释节点 --&gt;</span><br><span class="line">  &lt;!-- 当应用在组件上时，v-if和v-show会有区别 --&gt;</span><br><span class="line">  &lt;div v-if=&quot;a&quot;&gt;true&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const a = true</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-else-if</code>：<code>v-if</code>的“else if块”，可以链式调用</p>
</li>
<li><p>v-else：v-if条件收尾语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 编译成&lt;div&gt;C&lt;/div&gt; --&gt;</span><br><span class="line">  &lt;div v-if=&quot;a == &#x27;A&#x27;&quot;&gt;A&lt;/div&gt;</span><br><span class="line">  &lt;div v-else-if=&quot;a == &#x27;B&#x27;&quot;&gt;B&lt;/div&gt;</span><br><span class="line">  &lt;div v-else&gt;C&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const a = &quot;C&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-show</code>：控制元素的显示隐藏（css display none和block切换）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- a为真值时display为block，否则为none --&gt;</span><br><span class="line">  &lt;!-- 因此v-show比v-if性能更高，因为它只是切换一下css --&gt;</span><br><span class="line">  &lt;div v-show=&quot;a&quot;&gt;true&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const a = true</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-on</code>：简写为@，给元素添加事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 这两种写法是等价的 --&gt;</span><br><span class="line">  &lt;button v-on:click=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 支持动态事件名 --&gt;</span><br><span class="line">  &lt;button @[event]=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 支持修饰符 --&gt;</span><br><span class="line">  &lt;div @click=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;!-- 阻止冒泡 --&gt;</span><br><span class="line">    &lt;button @[event].stop=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">    &lt;!-- 开启事件捕获 --&gt;</span><br><span class="line">    &lt;button @[event].capture=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">    &lt;!-- 阻止默认事件 --&gt;</span><br><span class="line">    &lt;button @[event].prevent=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">    &lt;!-- 只能发生一次 --&gt;</span><br><span class="line">    &lt;button @[event].once=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">    &lt;!-- 当event.target为元素本身时才触发 --&gt;</span><br><span class="line">    &lt;button @[event].self=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">    &lt;!-- 永不阻止默认事件 --&gt;</span><br><span class="line">    &lt;button @scroll.self=&quot;b&quot;&gt;scroll me&lt;/button&gt;</span><br><span class="line">    &lt;!-- 可以链式调用，需要注意顺序 --&gt;</span><br><span class="line">    &lt;button @[event].prevent.self=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">    &lt;button @[event].self.prevent=&quot;a&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">    &lt;!-- 还有很多别的修饰符，https://cn.vuejs.org/guide/essentials/event-handling.html#event-modifiers --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const a = ()=&gt; &#123;</span><br><span class="line">  console.log(&quot;click&quot;)</span><br><span class="line">&#125;</span><br><span class="line">const b = ()=&gt; &#123;</span><br><span class="line">  console.log(&quot;scroll&quot;)</span><br><span class="line">&#125;</span><br><span class="line">const event = &quot;click&quot;</span><br><span class="line">const parent = ()=&gt; &#123;</span><br><span class="line">  console.log(&quot;click parent&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-bind</code>：简写为:，绑定元素的属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 这两种写法是等价的 --&gt;</span><br><span class="line">  &lt;div v-bind:id=&quot;a&quot;&gt;演示v-bind:id&lt;/div&gt;</span><br><span class="line">  &lt;div :id=&quot;a&quot;&gt;演示:id&lt;/div&gt;</span><br><span class="line">  &lt;!-- 这两种写法是等价的 --&gt;</span><br><span class="line">  &lt;div :style=&quot;style&quot;&gt;演示:style&lt;/div&gt;</span><br><span class="line">  &lt;div :class=&quot;[&#x27;a&#x27;,&#x27;b&#x27;]&quot;&gt;演示:style&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 可以使用表达式 --&gt;</span><br><span class="line">  &lt;div :class=&quot;[b? &#x27;a&#x27;: &#x27;b&#x27;]&quot;&gt;演示:style&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 可以同时支持一个动态、一个静态 --&gt;</span><br><span class="line">  &lt;!-- 不能支持多个动态或多个静态 --&gt;</span><br><span class="line">  &lt;div :class=&quot;[b? &#x27;a&#x27;: &#x27;b&#x27;]&quot; class=&quot;c&quot;&gt;演示:style&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const a = 114514</span><br><span class="line">const b = true</span><br><span class="line">const style = &#123;</span><br><span class="line">  color:&quot;red&quot;;</span><br><span class="line">  border:&quot;1px solid black&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .a &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">  .b &#123;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">  &#125;</span><br><span class="line">  .c &#123;</span><br><span class="line">    background-color: pink;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-model</code>：双向绑定表单元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input v-model=&quot;name&quot; type=&quot;text&quot; /&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; name &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">// 使用ref或reactive包裹的变量才具有响应式</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">    </span><br><span class="line">const name = ref(&quot;野兽先辈&quot;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-for</code>：遍历元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- item：数组元素 index：元素下标 --&gt;</span><br><span class="line">    &lt;!-- v-for可以嵌套 --&gt;</span><br><span class="line">    &lt;!-- 需要给v-for提供一个key（唯一值） --&gt;</span><br><span class="line">    &lt;div :key=&quot;index&quot; v-for=&quot;(item, index) in name&quot;&gt;&#123;&#123; index &#125;&#125; - &#123;&#123; item &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">const name = [&quot;野兽先辈&quot;, &quot;MUR&quot;, &quot;KMR&quot;, &quot;远野&quot;, &quot;野兽妹&quot;]</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-once</code>：性能优化，只渲染一次</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 改变a的值也不会发生变化 --&gt;</span><br><span class="line">  &lt;div v-once&gt;&#123;&#123; a &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;a++&quot;&gt;+&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">    </span><br><span class="line">const a = ref(1)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>v-memo</code>：大型项目性能优化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 写一个空数组时，效果就和v-once一样 --&gt;</span><br><span class="line">  &lt;div v-memo=&quot;[]&quot;&gt;&#123;&#123; a &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;a++&quot;&gt;+&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 常配合v-for使用，条件成立时才会更新，节省小部分性能 --&gt;</span><br><span class="line">  &lt;div @click=&quot;select(item.id)&quot; :key=&quot;item.id&quot; v-for=&quot;(item) in arr&quot; v-memo=&quot;[item.id === active]&quot;&gt;</span><br><span class="line">      &#123;&#123; item.id &#125;&#125; - selected： &#123;&#123; item.id == active &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">    </span><br><span class="line">const a = ref(1)</span><br><span class="line"></span><br><span class="line">import &#123; ref, reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const arr = reactive&lt;any[]&gt;([])</span><br><span class="line">for (let i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">  arr.push(&#123;</span><br><span class="line">    id: i + 1,</span><br><span class="line">    name: &quot;test&quot;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const active = ref(1)</span><br><span class="line"></span><br><span class="line">const select = async (index: number) =&gt; &#123;</span><br><span class="line">  active.value = index;</span><br><span class="line">  console.time()</span><br><span class="line">  await Promise.resolve()</span><br><span class="line">  console.timeEnd()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟DOM和diff算法</title>
    <url>/web/study/vue/5.%E8%99%9A%E6%8B%9FDOM%E5%92%8Cdiff%E7%AE%97%E6%B3%95.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h1><p>虚拟DOM就是通过JS生成的AST抽象语法树（编译原理），很多语言的编译都会使用AST，例如TS转JS，ES6转ES5等。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://image.cheriko.fun/post/202305022054195.png"></p>
<p>一个DOM的属性非常多，直接操作DOM浪费性能，而操作JS就非常快。</p>
<p>所以就有了虚拟DOM，它不仅提升速度，还利于做算法的优化，例如DIFF算法就是为了实现DOM的复用。</p>
<h1 id="DIFF算法"><a href="#DIFF算法" class="headerlink" title="DIFF算法"></a>DIFF算法</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">  	&lt;div :key=&quot;index&quot; v-for=&quot;(item, index) in arr&quot;&gt;</span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">  const arr = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;]</span><br><span class="line">  </span><br><span class="line">  // 向数组中插入一个新元素</span><br><span class="line">  arr.splice(2, 0, &quot;114514&quot;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在Vue源码（<code>/package/runtime-core/src/renderer.ts</code>）中可以看到DIFF算法，分为有key和无key两种情况。</p>
<h2 id="无key"><a href="#无key" class="headerlink" title="无key"></a>无key</h2><p><img src= "/img/loading.gif" data-lazy-src="https://image.cheriko.fun/post/202305022218648.png"></p>
<p>没有对元素进行复用，而是全部重新渲染（旧的换成新的），浪费性能。</p>
<p>key可以给元素做唯一标记，这些元素得以能够被复用。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">patchUnkeyedChildren</span> = (<span class="params"></span></span><br><span class="line"><span class="params">    c1: VNode[],    <span class="comment">// 旧的VNode</span></span></span><br><span class="line"><span class="params">    c2: VNodeArrayChildren,     <span class="comment">// 新的VNode</span></span></span><br><span class="line"><span class="params">    container: RendererElement,</span></span><br><span class="line"><span class="params">    anchor: RendererNode | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    parentComponent: ComponentInternalInstance | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    parentSuspense: SuspenseBoundary | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    isSVG: <span class="built_in">boolean</span>,</span></span><br><span class="line"><span class="params">    slotScopeIds: <span class="built_in">string</span>[] | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    optimized: <span class="built_in">boolean</span></span></span><br><span class="line"><span class="params">  </span>) =&gt; &#123;</span><br><span class="line">    c1 = c1 || <span class="variable constant_">EMPTY_ARR</span></span><br><span class="line">    c2 = c2 || <span class="variable constant_">EMPTY_ARR</span></span><br><span class="line">    <span class="keyword">const</span> oldLength = c1.<span class="property">length</span></span><br><span class="line">    <span class="keyword">const</span> newLength = c2.<span class="property">length</span></span><br><span class="line">    <span class="keyword">const</span> commonLength = <span class="title class_">Math</span>.<span class="title function_">min</span>(oldLength, newLength)</span><br><span class="line">    <span class="keyword">let</span> i</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; commonLength; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> nextChild = (c2[i] = optimized</span><br><span class="line">        ? <span class="title function_">cloneIfMounted</span>(c2[i] <span class="keyword">as</span> <span class="title class_">VNode</span>)</span><br><span class="line">        : <span class="title function_">normalizeVNode</span>(c2[i]))</span><br><span class="line">      <span class="comment">// 重新渲染元素</span></span><br><span class="line">      <span class="title function_">patch</span>(</span><br><span class="line">        c1[i],</span><br><span class="line">        nextChild,</span><br><span class="line">        container,</span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        parentComponent,</span><br><span class="line">        parentSuspense,</span><br><span class="line">        isSVG,</span><br><span class="line">        slotScopeIds,</span><br><span class="line">        optimized</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (oldLength &gt; newLength) &#123;</span><br><span class="line">      <span class="comment">// remove old 删除元素</span></span><br><span class="line">      <span class="title function_">unmountChildren</span>(</span><br><span class="line">        c1,</span><br><span class="line">        parentComponent,</span><br><span class="line">        parentSuspense,</span><br><span class="line">        <span class="literal">true</span>,</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        commonLength</span><br><span class="line">      )</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// mount new 新增元素</span></span><br><span class="line">      <span class="title function_">mountChildren</span>(</span><br><span class="line">        c2,</span><br><span class="line">        container,</span><br><span class="line">        anchor,</span><br><span class="line">        parentComponent,</span><br><span class="line">        parentSuspense,</span><br><span class="line">        isSVG,</span><br><span class="line">        slotScopeIds,</span><br><span class="line">        optimized,</span><br><span class="line">        commonLength</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h1 id="有key"><a href="#有key" class="headerlink" title="有key"></a>有key</h1><p><img src= "/img/loading.gif" data-lazy-src="https://image.cheriko.fun/post/202305022236151.png"></p>
<blockquote>
<p>和Vue2的双端DIFF算法不一样，Vue2按头-头→尾-尾→头-尾→尾-头进行对比，而Vue3只有头-头→尾-尾</p>
</blockquote>
<p><img src= "/img/loading.gif" data-lazy-src="https://image.cheriko.fun/post/202305022246793.png"></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">patchKeyedChildren</span> = (<span class="params"></span></span><br><span class="line"><span class="params">    c1: VNode[],</span></span><br><span class="line"><span class="params">    c2: VNodeArrayChildren,</span></span><br><span class="line"><span class="params">    container: RendererElement,</span></span><br><span class="line"><span class="params">    parentAnchor: RendererNode | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    parentComponent: ComponentInternalInstance | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    parentSuspense: SuspenseBoundary | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    isSVG: <span class="built_in">boolean</span>,</span></span><br><span class="line"><span class="params">    slotScopeIds: <span class="built_in">string</span>[] | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">    optimized: <span class="built_in">boolean</span></span></span><br><span class="line"><span class="params">  </span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> l2 = c2.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> e1 = c1.<span class="property">length</span> - <span class="number">1</span> <span class="comment">// prev ending index</span></span><br><span class="line">    <span class="keyword">let</span> e2 = l2 - <span class="number">1</span> <span class="comment">// next ending index</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. sync from start 前序算法，只对比前面的</span></span><br><span class="line">    <span class="comment">// (a b) c</span></span><br><span class="line">    <span class="comment">// (a b) d e</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;</span><br><span class="line">      <span class="keyword">const</span> n1 = c1[i]</span><br><span class="line">      <span class="keyword">const</span> n2 = (c2[i] = optimized</span><br><span class="line">        ? <span class="title function_">cloneIfMounted</span>(c2[i] <span class="keyword">as</span> <span class="title class_">VNode</span>)</span><br><span class="line">        : <span class="title function_">normalizeVNode</span>(c2[i]))</span><br><span class="line">      <span class="comment">// 判断两元素的type和key是否一样，如果一样才进行复用</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isSameVNodeType</span>(n1, n2)) &#123;</span><br><span class="line">        <span class="title function_">patch</span>(</span><br><span class="line">          n1,</span><br><span class="line">          n2,</span><br><span class="line">          container,</span><br><span class="line">          <span class="literal">null</span>,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG,</span><br><span class="line">          slotScopeIds,</span><br><span class="line">          optimized</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. sync from end 尾序算法，只对比后面的</span></span><br><span class="line">    <span class="comment">// a (b c)</span></span><br><span class="line">    <span class="comment">// d e (b c)</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;</span><br><span class="line">      <span class="keyword">const</span> n1 = c1[e1]</span><br><span class="line">      <span class="keyword">const</span> n2 = (c2[e2] = optimized</span><br><span class="line">        ? <span class="title function_">cloneIfMounted</span>(c2[e2] <span class="keyword">as</span> <span class="title class_">VNode</span>)</span><br><span class="line">        : <span class="title function_">normalizeVNode</span>(c2[e2]))</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isSameVNodeType</span>(n1, n2)) &#123;</span><br><span class="line">        <span class="title function_">patch</span>(</span><br><span class="line">          n1,</span><br><span class="line">          n2,</span><br><span class="line">          container,</span><br><span class="line">          <span class="literal">null</span>,</span><br><span class="line">          parentComponent,</span><br><span class="line">          parentSuspense,</span><br><span class="line">          isSVG,</span><br><span class="line">          slotScopeIds,</span><br><span class="line">          optimized</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">      e1--</span><br><span class="line">      e2--</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. common sequence + mount 新增节点</span></span><br><span class="line">    <span class="comment">// (a b)</span></span><br><span class="line">    <span class="comment">// (a b) c</span></span><br><span class="line">    <span class="comment">// i = 2, e1 = 1, e2 = 2</span></span><br><span class="line">    <span class="comment">// (a b)</span></span><br><span class="line">    <span class="comment">// c (a b)</span></span><br><span class="line">    <span class="comment">// i = 0, e1 = -1, e2 = 0</span></span><br><span class="line">    <span class="keyword">if</span> (i &gt; e1) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt;= e2) &#123;</span><br><span class="line">        <span class="keyword">const</span> nextPos = e2 + <span class="number">1</span></span><br><span class="line">        <span class="keyword">const</span> anchor = nextPos &lt; l2 ? (c2[nextPos] <span class="keyword">as</span> <span class="title class_">VNode</span>).<span class="property">el</span> : parentAnchor</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= e2) &#123;</span><br><span class="line">          <span class="comment">// 如果参数1为null，patch函数即为新增节点</span></span><br><span class="line">          <span class="title function_">patch</span>(</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            (c2[i] = optimized</span><br><span class="line">              ? <span class="title function_">cloneIfMounted</span>(c2[i] <span class="keyword">as</span> <span class="title class_">VNode</span>)</span><br><span class="line">              : <span class="title function_">normalizeVNode</span>(c2[i])),</span><br><span class="line">            container,</span><br><span class="line">            anchor,</span><br><span class="line">            parentComponent,</span><br><span class="line">            parentSuspense,</span><br><span class="line">            isSVG,</span><br><span class="line">            slotScopeIds,</span><br><span class="line">            optimized</span><br><span class="line">          )</span><br><span class="line">          i++</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. common sequence + unmount 卸载元素</span></span><br><span class="line">    <span class="comment">// (a b) c</span></span><br><span class="line">    <span class="comment">// (a b)</span></span><br><span class="line">    <span class="comment">// i = 2, e1 = 2, e2 = 1</span></span><br><span class="line">    <span class="comment">// a (b c)</span></span><br><span class="line">    <span class="comment">// (b c)</span></span><br><span class="line">    <span class="comment">// i = 0, e1 = 0, e2 = -1</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; e2) &#123;</span><br><span class="line">      <span class="keyword">while</span> (i &lt;= e1) &#123;</span><br><span class="line">        <span class="title function_">unmount</span>(c1[i], parentComponent, parentSuspense, <span class="literal">true</span>)</span><br><span class="line">        i++</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. unknown sequence 乱序，最难的情况</span></span><br><span class="line">    <span class="comment">// [i ... e1 + 1]: a b [c d e] f g</span></span><br><span class="line">    <span class="comment">// [i ... e2 + 1]: a b [e d c h] f g</span></span><br><span class="line">    <span class="comment">// i = 2, e1 = 4, e2 = 5</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> s1 = i <span class="comment">// prev starting index</span></span><br><span class="line">      <span class="keyword">const</span> s2 = i <span class="comment">// next starting index</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 5.1 build key:index map for newChildren 构建新节点的映射关系（map）</span></span><br><span class="line">      <span class="comment">// key值 1 2 3 4 5</span></span><br><span class="line">      <span class="comment">// 索引 0 1 2 3 4</span></span><br><span class="line">      <span class="comment">// 进行排序操作</span></span><br><span class="line">	  <span class="comment">// key值 5 4 3 2 1</span></span><br><span class="line">      <span class="comment">// 索引 0 1 2 3 4（不变）</span></span><br><span class="line">      <span class="comment">// 5=&gt;0 4=&gt;1 3=&gt;2 2=&gt;3 1=&gt;4</span></span><br><span class="line">      <span class="keyword">const</span> <span class="attr">keyToNewIndexMap</span>: <span class="title class_">Map</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">symbol</span>, <span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">      <span class="keyword">for</span> (i = s2; i &lt;= e2; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> nextChild = (c2[i] = optimized</span><br><span class="line">          ? <span class="title function_">cloneIfMounted</span>(c2[i] <span class="keyword">as</span> <span class="title class_">VNode</span>)</span><br><span class="line">          : <span class="title function_">normalizeVNode</span>(c2[i]))</span><br><span class="line">        <span class="keyword">if</span> (nextChild.<span class="property">key</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (__DEV__ &amp;&amp; keyToNewIndexMap.<span class="title function_">has</span>(nextChild.<span class="property">key</span>)) &#123;</span><br><span class="line">            <span class="title function_">warn</span>(</span><br><span class="line">              <span class="string">`Duplicate keys found during update:`</span>,</span><br><span class="line">              <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(nextChild.<span class="property">key</span>),</span><br><span class="line">              <span class="string">`Make sure keys are unique.`</span></span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">          keyToNewIndexMap.<span class="title function_">set</span>(nextChild.<span class="property">key</span>, i)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 5.2 loop through old children left to be patched and try to patch</span></span><br><span class="line">      <span class="comment">// matching nodes &amp; remove nodes that are no longer present</span></span><br><span class="line">      <span class="comment">// 记录新节点在旧节点中的位置数组</span></span><br><span class="line">      <span class="comment">// [5, 4, 3, 2, 1]</span></span><br><span class="line">      <span class="keyword">let</span> j</span><br><span class="line">      <span class="keyword">let</span> patched = <span class="number">0</span></span><br><span class="line">      <span class="keyword">const</span> toBePatched = e2 - s2 + <span class="number">1</span></span><br><span class="line">      <span class="keyword">let</span> moved = <span class="literal">false</span></span><br><span class="line">      <span class="comment">// used to track whether any node has moved</span></span><br><span class="line">      <span class="keyword">let</span> maxNewIndexSoFar = <span class="number">0</span></span><br><span class="line">      <span class="comment">// works as Map&lt;newIndex, oldIndex&gt;</span></span><br><span class="line">      <span class="comment">// Note that oldIndex is offset by +1</span></span><br><span class="line">      <span class="comment">// and oldIndex = 0 is a special value indicating the new node has</span></span><br><span class="line">      <span class="comment">// no corresponding old node.</span></span><br><span class="line">      <span class="comment">// used for determining longest stable subsequence</span></span><br><span class="line">      <span class="keyword">const</span> newIndexToOldIndexMap = <span class="keyword">new</span> <span class="title class_">Array</span>(toBePatched)</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; toBePatched; i++) newIndexToOldIndexMap[i] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (i = s1; i &lt;= e1; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> prevChild = c1[i]</span><br><span class="line">        <span class="keyword">if</span> (patched &gt;= toBePatched) &#123;</span><br><span class="line">          <span class="comment">// all new children have been patched so this can only be a removal</span></span><br><span class="line">          <span class="comment">// 如果有多余的旧节点就删除</span></span><br><span class="line">          <span class="title function_">unmount</span>(prevChild, parentComponent, parentSuspense, <span class="literal">true</span>)</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> newIndex</span><br><span class="line">        <span class="keyword">if</span> (prevChild.<span class="property">key</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">          newIndex = keyToNewIndexMap.<span class="title function_">get</span>(prevChild.<span class="property">key</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// key-less node, try to locate a key-less node of the same type</span></span><br><span class="line">          <span class="keyword">for</span> (j = s2; j &lt;= e2; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">              newIndexToOldIndexMap[j - s2] === <span class="number">0</span> &amp;&amp;</span><br><span class="line">              <span class="title function_">isSameVNodeType</span>(prevChild, c2[j] <span class="keyword">as</span> <span class="title class_">VNode</span>)</span><br><span class="line">            ) &#123;</span><br><span class="line">              newIndex = j</span><br><span class="line">              <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果新节点不包含在旧节点里也删除</span></span><br><span class="line">        <span class="keyword">if</span> (newIndex === <span class="literal">undefined</span>) &#123;</span><br><span class="line">          <span class="title function_">unmount</span>(prevChild, parentComponent, parentSuspense, <span class="literal">true</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          newIndexToOldIndexMap[newIndex - s2] = i + <span class="number">1</span></span><br><span class="line">          <span class="keyword">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class="line">            maxNewIndexSoFar = newIndex</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果节点出现交叉，说明是要移动，求最长递增子序列</span></span><br><span class="line">            moved = <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="title function_">patch</span>(</span><br><span class="line">            prevChild,</span><br><span class="line">            c2[newIndex] <span class="keyword">as</span> <span class="title class_">VNode</span>,</span><br><span class="line">            container,</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            parentComponent,</span><br><span class="line">            parentSuspense,</span><br><span class="line">            isSVG,</span><br><span class="line">            slotScopeIds,</span><br><span class="line">            optimized</span><br><span class="line">          )</span><br><span class="line">          patched++</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 5.3 move and mount</span></span><br><span class="line">      <span class="comment">// generate longest stable subsequence only when nodes have moved</span></span><br><span class="line">      <span class="comment">// 求最长递增子序列升序</span></span><br><span class="line">      <span class="keyword">const</span> increasingNewIndexSequence = moved</span><br><span class="line">        ? <span class="title function_">getSequence</span>(newIndexToOldIndexMap)</span><br><span class="line">        : <span class="variable constant_">EMPTY_ARR</span></span><br><span class="line">      j = increasingNewIndexSequence.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">      <span class="comment">// looping backwards so that we can use last patched node as anchor</span></span><br><span class="line">      <span class="keyword">for</span> (i = toBePatched - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">const</span> nextIndex = s2 + i</span><br><span class="line">        <span class="keyword">const</span> nextChild = c2[nextIndex] <span class="keyword">as</span> <span class="title class_">VNode</span></span><br><span class="line">        <span class="keyword">const</span> anchor =</span><br><span class="line">          nextIndex + <span class="number">1</span> &lt; l2 ? (c2[nextIndex + <span class="number">1</span>] <span class="keyword">as</span> <span class="title class_">VNode</span>).<span class="property">el</span> : parentAnchor</span><br><span class="line">        <span class="keyword">if</span> (newIndexToOldIndexMap[i] === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// mount new</span></span><br><span class="line">          <span class="title function_">patch</span>(</span><br><span class="line">            <span class="literal">null</span>,</span><br><span class="line">            nextChild,</span><br><span class="line">            container,</span><br><span class="line">            anchor,</span><br><span class="line">            parentComponent,</span><br><span class="line">            parentSuspense,</span><br><span class="line">            isSVG,</span><br><span class="line">            slotScopeIds,</span><br><span class="line">            optimized</span><br><span class="line">          )</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (moved) &#123;</span><br><span class="line">          <span class="comment">// move if:</span></span><br><span class="line">          <span class="comment">// There is no stable subsequence (e.g. a reverse)</span></span><br><span class="line">          <span class="comment">// OR current node is not among the stable sequence</span></span><br><span class="line">          <span class="comment">// 如果当前遍历的节点不在子序列，说明要进行移动</span></span><br><span class="line">          <span class="keyword">if</span> (j &lt; <span class="number">0</span> || i !== increasingNewIndexSequence[j]) &#123;</span><br><span class="line">            <span class="title function_">move</span>(nextChild, container, anchor, <span class="title class_">MoveType</span>.<span class="property">REORDER</span>)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果在子序列里，跳过</span></span><br><span class="line">            j--</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://en.wikipedia.org/wiki/Longest_increasing_subsequence</span></span><br><span class="line"><span class="comment">// 贪心+二分查找，求最长递增子序列</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSequence</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span>[] &#123;</span><br><span class="line">  <span class="keyword">const</span> p = arr.<span class="title function_">slice</span>()</span><br><span class="line">  <span class="keyword">const</span> result = [<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> i, j, u, v, c</span><br><span class="line">  <span class="keyword">const</span> len = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> arrI = arr[i]</span><br><span class="line">    <span class="keyword">if</span> (arrI !== <span class="number">0</span>) &#123;</span><br><span class="line">      j = result[result.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arrI) &#123;</span><br><span class="line">        p[i] = j</span><br><span class="line">        result.<span class="title function_">push</span>(i)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      u = <span class="number">0</span></span><br><span class="line">      v = result.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">while</span> (u &lt; v) &#123;</span><br><span class="line">        c = (u + v) &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (arr[result[c]] &lt; arrI) &#123;</span><br><span class="line">          u = c + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          v = c</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (arrI &lt; arr[result[u]]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (u &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          p[i] = result[u - <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        result[u] = i</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  u = result.<span class="property">length</span></span><br><span class="line">  v = result[u - <span class="number">1</span>]</span><br><span class="line">  <span class="keyword">while</span> (u-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    result[u] = v</span><br><span class="line">    v = p[v]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Ref全家桶</title>
    <url>/web/study/vue/6.Ref%E5%85%A8%E5%AE%B6%E6%A1%B6.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><p>接收一个内部值并返回响应式且可变的ref对象，ref对象仅有一个<code>.value</code>属性，指向该内部值。</p>
<blockquote>
<p>浏览器控制台设置里，勾选“启动自定义格式化程序”并刷新，控制台就能看格式化后整齐的ref，reactive也是如此。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;person&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">  &lt;div ref=&quot;dom&quot;&gt;我是个DOM&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;</span><br><span class="line">import type &#123; Ref &#125; from &quot;vue&quot;</span><br><span class="line">    </span><br><span class="line">type P = &#123;</span><br><span class="line">  name: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ref 作深层响应式</span><br><span class="line">// 也可以不写类型定义或泛型，ref会做类型推断</span><br><span class="line">// const person = ref&lt;P&gt;(&#123; name: &quot;yajue&quot; &#125;)</span><br><span class="line">// const person: Ref&lt;P&gt; = ref(&#123; name: &quot;yajue&quot; &#125;)</span><br><span class="line">const person = ref(&#123; name: &quot;yajue&quot; &#125;)</span><br><span class="line">    </span><br><span class="line">// 不用ref包裹就没有响应式</span><br><span class="line">const person2 = &#123; name: &quot;pinky&quot; &#125;</span><br><span class="line"></span><br><span class="line">// ref还可以取得DOM元素，变量名需要和元素的ref属性值一致</span><br><span class="line">const dom = ref&lt;HTMLDivElement&gt;()</span><br><span class="line"></span><br><span class="line">// 在setup语法糖里只能读到undefined，因为在这个阶段，DOM还没有被渲染</span><br><span class="line">console.log(dom.value?.innerText)</span><br><span class="line"></span><br><span class="line">const change = ()=&gt; &#123;</span><br><span class="line">  // person.name = &quot;野兽先辈&quot;</span><br><span class="line">  // ref函数返回一个类，其中有一个属性value，修改或取值时必须带上value</span><br><span class="line">  person.value.name = &quot;野兽先辈&quot;</span><br><span class="line">  console.log(person)</span><br><span class="line">  console.log(dom.value?.innerText)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="isRef"><a href="#isRef" class="headerlink" title="isRef"></a>isRef</h1><p>判断是否为ref对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;person&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, isRef &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">const person = ref(&#123; name: &quot;yajue&quot; &#125;)</span><br><span class="line">    </span><br><span class="line">const person2 = &#123; name: &quot;pinky&quot; &#125;</span><br><span class="line"></span><br><span class="line">const change = ()=&gt; &#123;</span><br><span class="line">  // 判断对象是不是ref对象</span><br><span class="line">  // 实际生产中用得不多，但源码里用得很多</span><br><span class="line">  console.log(isRef(person))	// -&gt; true</span><br><span class="line">  console.log(isRef(person2))	// -&gt; false</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="shallowRef"><a href="#shallowRef" class="headerlink" title="shallowRef"></a>shallowRef</h1><p>创建一个跟踪<code>.value</code>变化的ref，但它的值不会变成响应式（浅层响应式）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;ref: &#123;&#123;person&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;div&gt;shallowRef: &#123;&#123;person2&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, shallowRef &#125; from &quot;vue&quot;</span><br><span class="line">    </span><br><span class="line">type P = &#123;</span><br><span class="line">  name: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const person = ref(&#123; name: &quot;yajue&quot; &#125;)</span><br><span class="line"></span><br><span class="line">// shallowRef 作浅层响应式</span><br><span class="line">const person2 = shallowRef(&#123; name: &quot;MUR&quot; &#125;)</span><br><span class="line"></span><br><span class="line">const change = ()=&gt; &#123;</span><br><span class="line">  // 点击后数据改变，但视图不会变化，因为它是浅层响应式</span><br><span class="line">  // person2.value.name = &quot;三浦&quot;</span><br><span class="line">    </span><br><span class="line">  // 直接从value赋值才会变成响应式</span><br><span class="line">  // person2.value = &#123;</span><br><span class="line">  //   name: &quot;三浦&quot;</span><br><span class="line">  // &#125;</span><br><span class="line">    </span><br><span class="line">  // ref和shallowRef不能同时写，因为会影响shallowRef，造成视图的更新</span><br><span class="line">  person.value.name = &quot;我是ref&quot;</span><br><span class="line">  person2.value.name = &quot;我是shallowRef&quot;</span><br><span class="line">  console.log(person2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="triggerRef"><a href="#triggerRef" class="headerlink" title="triggerRef"></a>triggerRef</h1><p>强制页面视图更新。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;ref: &#123;&#123;person&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;div&gt;shallowRef: &#123;&#123;person2&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, shallowRef, triggerRef &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">const person = ref(&#123; name: &quot;yajue&quot; &#125;)</span><br><span class="line"></span><br><span class="line">const person2 = shallowRef(&#123; name: &quot;MUR&quot; &#125;)</span><br><span class="line"></span><br><span class="line">const change = ()=&gt; &#123;</span><br><span class="line">  person2.value.name = &quot;我被影响了&quot;</span><br><span class="line">  // triggerRef强制更新收集的依赖，直接调用它也能更新shallowRef</span><br><span class="line">  // ref底层更新视图的逻辑中会调用triggerRef函数，所以ref和shallowRef不能同时写在一起</span><br><span class="line">  triggerRef(person2)</span><br><span class="line">  console.log(person2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h1><p>自定义ref。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123;obj&#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, shallowRef, triggerRef, customRef &#125; from &quot;vue&quot;</span><br><span class="line"></span><br><span class="line">// 自定义ref，要求返回一个customRef的返回值</span><br><span class="line">function myRef&lt;T&gt;(value: T) &#123;</span><br><span class="line">  // customRef接收一个回调函数，回调函数接收两个参数</span><br><span class="line">  return customRef((track, trigger)=&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    // 可以使用自定义ref实现额外的逻辑</span><br><span class="line">    let timer</span><br><span class="line">      </span><br><span class="line">    // 回调函数要求返回一个对象，对象需要实现get和set方法</span><br><span class="line">    return &#123;</span><br><span class="line">      get() &#123;</span><br><span class="line">        // track用来收集依赖</span><br><span class="line">        track()</span><br><span class="line">        return value</span><br><span class="line">      &#125;,</span><br><span class="line">      set(newVal) &#123;</span><br><span class="line">        //比如用户输入值时，调用接口并做个防抖</span><br><span class="line">        clearTimeout(timer)</span><br><span class="line">        setTimeout(()=&gt; &#123;</span><br><span class="line">          console.log(&quot;我调用了一个接口&quot;)</span><br><span class="line">          value = newVal</span><br><span class="line">          timer = null</span><br><span class="line">          // trigger用来触发依赖更新</span><br><span class="line">          trigger()</span><br><span class="line">        &#125;, 500)</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">const obj = myRef&lt;string&gt;(&quot;cheriko&quot;)</span><br><span class="line"></span><br><span class="line">const change = ()=&gt; &#123;</span><br><span class="line">  obj.value = &quot;meruko&quot;</span><br><span class="line">  console.log(obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>在Vue源码（<code>/package/reactivity/src/ref.ts</code>）中可以看到ref的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Takes an inner value and returns a reactive and mutable ref object, which</span></span><br><span class="line"><span class="comment"> * has a single property `.value` that points to the inner value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">value</span> - The object to wrap in the ref.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> &#123;<span class="type">@link https://vuejs.org/api/reactivity-core.html#ref</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 进行函数重载，支持多种传入的类型</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> ref&lt;T <span class="keyword">extends</span> <span class="title class_">Ref</span>&gt;(<span class="attr">value</span>: T): T</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> ref&lt;T&gt;(<span class="attr">value</span>: T): <span class="title class_">Ref</span>&lt;<span class="title class_">UnwrapRef</span>&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> ref&lt;T = <span class="built_in">any</span>&gt;(): <span class="title class_">Ref</span>&lt;T | <span class="literal">undefined</span>&gt;</span><br><span class="line"><span class="comment">// value就是程序员传进ref的值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ref</span>(<span class="params">value?: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createRef</span>(value, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> shallowRef&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt;(</span><br><span class="line">  <span class="attr">value</span>: T</span><br><span class="line">): T <span class="keyword">extends</span> <span class="title class_">Ref</span> ? T : <span class="title class_">ShallowRef</span>&lt;T&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> shallowRef&lt;T&gt;(<span class="attr">value</span>: T): <span class="title class_">ShallowRef</span>&lt;T&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> shallowRef&lt;T = <span class="built_in">any</span>&gt;(): <span class="title class_">ShallowRef</span>&lt;T | <span class="literal">undefined</span>&gt;</span><br><span class="line"><span class="comment">// shallowRef，和ref的不同就是它把__v_isShallow设为true，所以它的响应只到.value</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">shallowRef</span>(<span class="params">value?: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createRef</span>(value, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createRef</span>(<span class="params">rawValue: <span class="built_in">unknown</span>, shallow: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 判断传进的值，如果已经是ref对象就不用再变了</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isRef</span>(rawValue)) &#123;</span><br><span class="line">    <span class="keyword">return</span> rawValue</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建ref对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RefImpl</span>(rawValue, shallow)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RefImpl</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="comment">// 这个_value就是真正要读取的东西</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_value</span>: T</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_rawValue</span>: T</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> dep?: <span class="title class_">Dep</span> = <span class="literal">undefined</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isRef = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T, <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isShallow: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_rawValue</span> = __v_isShallow ? value : <span class="title function_">toRaw</span>(value)</span><br><span class="line">    <span class="comment">// 判断isShallow，如果为true就赋值value，为false就赋值toReactive(value)</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = __v_isShallow ? value : <span class="title function_">toReactive</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="comment">// 进行依赖收集</span></span><br><span class="line">    <span class="title function_">trackRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="comment">// 读取的是_value</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> useDirectValue =</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">__v_isShallow</span> || <span class="title function_">isShallow</span>(newVal) || <span class="title function_">isReadonly</span>(newVal)</span><br><span class="line">    newVal = useDirectValue ? newVal : <span class="title function_">toRaw</span>(newVal)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">hasChanged</span>(newVal, <span class="variable language_">this</span>.<span class="property">_rawValue</span>)) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_rawValue</span> = newVal</span><br><span class="line">      <span class="comment">// 修改的也是_value</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_value</span> = useDirectValue ? newVal : <span class="title function_">toReactive</span>(newVal)</span><br><span class="line">      <span class="comment">// 进行依赖更新</span></span><br><span class="line">      <span class="title function_">triggerRefValue</span>(<span class="variable language_">this</span>, newVal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ----------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// triggerRef，可以强制更新shallowRef的值</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">triggerRef</span>(<span class="params">ref: Ref</span>) &#123;</span><br><span class="line">  <span class="title function_">triggerRefValue</span>(ref, __DEV__ ? ref.<span class="property">value</span> : <span class="built_in">void</span> <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// triggerRefValue会接着调用triggerEffects，它会进行依赖的更新</span></span><br></pre></td></tr></table></figure>

<p>这里属于reactive的源码，位于<code>/package/reactivity/src/reactive.ts</code>。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a reactive proxy of the given value (if possible).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If the given value is not an object, the original value itself is returned.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">value</span> - The value for which a reactive proxy shall be created.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 判断传入的value是否为引用类型（数组或对象），是则调用reactive，否则返回value本身</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toReactive = &lt;T <span class="keyword">extends</span> <span class="built_in">unknown</span>&gt;(<span class="attr">value</span>: T): <span class="function"><span class="params">T</span> =&gt;</span></span><br><span class="line">  <span class="title function_">isObject</span>(value) ? <span class="title function_">reactive</span>(value) : value</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Reactive全家桶</title>
    <url>/web/study/vue/7.Reactive%E5%85%A8%E5%AE%B6%E6%A1%B6.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h1><p>reactive和ref的区别：</p>
<ul>
<li>ref支持传入所有类型，reactive只支持引用类型（Array、Object、Map、Set、WeakSet、WeakMap等）</li>
<li>ref取值和赋值都要加.value，reactive不需要</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      &lt;input v-model=&quot;form.name&quot; type=&quot;text&quot;&gt;</span><br><span class="line">      &lt;br&gt;</span><br><span class="line">      &lt;input v-model=&quot;form.age&quot; type=&quot;text&quot;&gt;</span><br><span class="line">      &lt;br&gt;</span><br><span class="line">      &lt;button @click.prevent=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;  </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- --------------------------------------------------------- --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;(item, index) in list&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">      &lt;!-- &lt;li v-for=&quot;(item, index) in list.arr&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt; --&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button @click=&quot;add&quot;&gt;&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive &#125; from &quot;vue&quot;</span><br><span class="line">    </span><br><span class="line">type P = &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  age: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 只支持引用类型的参数，用基本类型就报错</span><br><span class="line">// let form = reactive(&quot;&quot;)</span><br><span class="line"></span><br><span class="line">// 和ref一样可以进行类型推断，也可以自己定义</span><br><span class="line">// let form = reactive&lt;P&gt;(&#123;</span><br><span class="line">//   name: &quot;yajue&quot;,</span><br><span class="line">//   age: 24</span><br><span class="line">// &#125;)</span><br><span class="line">    </span><br><span class="line">let form = reactive(&#123;</span><br><span class="line">  name: &quot;yajue&quot;,</span><br><span class="line">  age: 24</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 不需要.value</span><br><span class="line">// form.age = 114514</span><br><span class="line">    </span><br><span class="line">const submit = ()=&gt; &#123;</span><br><span class="line">  console.log(form)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// --------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">// reactive是proxy代理的对象，直接赋值会覆盖掉它</span><br><span class="line">let list = reactive&lt;string[]&gt;([])</span><br><span class="line"></span><br><span class="line">// let list = reactive&lt;&#123;</span><br><span class="line">//   arr: string[]</span><br><span class="line">// &#125;&gt;(&#123;</span><br><span class="line">//   arr: []</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">const add = ()=&gt; &#123;</span><br><span class="line">  // 假设它是接口返回的数据</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    let res = [&quot;www&quot;, &quot;草&quot;, &quot;kusa&quot;]</span><br><span class="line">    // 会破坏响应式对象，不能直接赋值</span><br><span class="line">    // list = res</span><br><span class="line"></span><br><span class="line">    // 解决方案1：可以用数组方法</span><br><span class="line">    list.push(...res)</span><br><span class="line"></span><br><span class="line">    // 解决方案2：把数组作为一个对象属性，并把对象赋给reactive</span><br><span class="line">    // list.arr = res</span><br><span class="line"></span><br><span class="line">    console.log(list)</span><br><span class="line">  &#125;, 2000)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h1><p>拷贝一份proxy对象，并将其设为只读。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;show&quot;&gt;&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, readonly &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">let form = reactive(&#123;</span><br><span class="line">  name: &quot;yajue&quot;,</span><br><span class="line">  age: 24</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 把reactive所有属性变成只读</span><br><span class="line">// 实际生产中用得不多，但源码里用得很多</span><br><span class="line">const read = readonly(form)</span><br><span class="line"></span><br><span class="line">const show = ()=&gt; &#123;</span><br><span class="line">  // 会报错，因为read是只读的</span><br><span class="line">  // read.name = &quot;野兽&quot;</span><br><span class="line">  // console.log(form, read)    // -&gt; &#123;name:&quot;yajue&quot;,age:24&#125;, &#123;name:&quot;yajue&quot;,age:24&#125;</span><br><span class="line"></span><br><span class="line">  // 不会报错，因为form不是只读的</span><br><span class="line">  // read会受原始对象影响</span><br><span class="line">  form.name = &quot;野兽&quot;</span><br><span class="line">  console.log(form, read)   // -&gt; &#123;name:&quot;野兽&quot;,age:24&#125;, &#123;name:&quot;野兽&quot;,age:24&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="shallowReactive"><a href="#shallowReactive" class="headerlink" title="shallowReactive"></a>shallowReactive</h1><p>只有浅层的数据（第一层）才会变成响应式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;reactive: &#123;&#123; form &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;shallowReactive: &#123;&#123; obj &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;edit&quot;&gt;&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, readonly, shallowReactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">let form = reactive(&#123;</span><br><span class="line">  name: &quot;yajue&quot;,</span><br><span class="line">  age: 24</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// shallowReactive 作浅层响应式</span><br><span class="line">const obj = shallowReactive&lt;any&gt;(&#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    bar: &#123;</span><br><span class="line">      num: 114514</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const edit = ()=&gt; &#123;</span><br><span class="line">  // 改变第一层的属性可以响应</span><br><span class="line">  // obj.foo = &#123; num = 1919810 &#125;</span><br><span class="line"></span><br><span class="line">  // 改变深层嵌套的属性就不会引起视图的更新</span><br><span class="line">  // obj.foo.bar.num = 1919810</span><br><span class="line">  // console.log(obj)</span><br><span class="line"></span><br><span class="line">  // 和ref&amp;shallowRef一样，reactive和shallowReactive同时写也会出现问题</span><br><span class="line">  form.name = &quot;野兽&quot;</span><br><span class="line">  obj.foo.bar.num = 1919810</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>在Vue源码（<code>/package/reactivity/src/reactive.ts</code>）中可以看到reactive的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// reactive使用了泛型约束，只支持引用类型的参数，所以用基本类型就报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> reactive&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt;(<span class="attr">target</span>: T): <span class="title class_">UnwrapNestedRefs</span>&lt;T&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">target: <span class="built_in">object</span></span>) &#123;</span><br><span class="line">  <span class="comment">// if trying to observe a readonly proxy, return the readonly version.</span></span><br><span class="line">  <span class="comment">// 如果对象是只读的，就直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isReadonly</span>(target)) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 否则调用createReactiveObject</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createReactiveObject</span>(</span><br><span class="line">    target,</span><br><span class="line">    <span class="literal">false</span>,		<span class="comment">// isReadonly</span></span><br><span class="line">    mutableHandlers,		<span class="comment">// 用于给Array类型创建proxy</span></span><br><span class="line">    mutableCollectionHandlers,		<span class="comment">// 用于给Set Map WeakSet WeakMap类型创建proxy</span></span><br><span class="line">    reactiveMap</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createReactiveObject</span>(<span class="params"></span></span><br><span class="line"><span class="params">  target: Target,</span></span><br><span class="line"><span class="params">  isReadonly: <span class="built_in">boolean</span>,</span></span><br><span class="line"><span class="params">  baseHandlers: ProxyHandler&lt;<span class="built_in">any</span>&gt;,</span></span><br><span class="line"><span class="params">  collectionHandlers: ProxyHandler&lt;<span class="built_in">any</span>&gt;,</span></span><br><span class="line"><span class="params">  proxyMap: <span class="built_in">WeakMap</span>&lt;Target, <span class="built_in">any</span>&gt;</span></span><br><span class="line"><span class="params">  <span class="comment">// WeakMap（弱映射），主要实现值与对象的关联而不导致内存泄漏</span></span></span><br><span class="line"><span class="params">  <span class="comment">// WeakMap的键只能是Object类型的数据（null除外），且WeakMap的键名所指的对象不计入垃圾回收机制</span></span></span><br><span class="line"><span class="params">  <span class="comment">// WeakMap的值可以是任意的</span></span></span><br><span class="line"><span class="params">  <span class="comment">// 它的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内</span></span></span><br><span class="line"><span class="params">  <span class="comment">// 因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占的内存</span></span></span><br><span class="line"><span class="params">  <span class="comment">// 即，一旦不再需要，WeakMap里的键名对象和所对应的键值对会自动删除，不用手动删除引用</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 如果传入基本类型，报错</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(target)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`value cannot be made reactive: <span class="subst">$&#123;<span class="built_in">String</span>(target)&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// target is already a Proxy, return it.</span></span><br><span class="line">  <span class="comment">// exception: calling readonly() on a reactive object</span></span><br><span class="line">  <span class="comment">// 如果target已经被代理了，且程序员的目的不是将响应式对象变成只读，则直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    target[<span class="title class_">ReactiveFlags</span>.<span class="property">RAW</span>] &amp;&amp;</span><br><span class="line">    !(isReadonly &amp;&amp; target[<span class="title class_">ReactiveFlags</span>.<span class="property">IS_REACTIVE</span>])</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// target already has corresponding Proxy</span></span><br><span class="line">  <span class="comment">// 从缓存(readonlyMap, reactiveMap)中查找，如果已经被代理就直接返回</span></span><br><span class="line">  <span class="keyword">const</span> existingProxy = proxyMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (existingProxy) &#123;</span><br><span class="line">    <span class="keyword">return</span> existingProxy</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// only specific value types can be observed.</span></span><br><span class="line">  <span class="comment">// 如果目标在白名单里直接返回，例如__skip__</span></span><br><span class="line">  <span class="comment">// 通过markRaw函数处理的数据会加上__skip__，即跳过代理</span></span><br><span class="line">  <span class="keyword">const</span> targetType = <span class="title function_">getTargetType</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (targetType === <span class="title class_">TargetType</span>.<span class="property">INVALID</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> target</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//以上条件都没触发，开始做proxy代理</span></span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">    target,</span><br><span class="line">    targetType === <span class="title class_">TargetType</span>.<span class="property">COLLECTION</span> ? collectionHandlers : baseHandlers</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// 缓存新代理后的对象</span></span><br><span class="line">  proxyMap.<span class="title function_">set</span>(target, proxy)</span><br><span class="line">  <span class="keyword">return</span> proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>to全家桶</title>
    <url>/web/study/vue/8.to%E5%85%A8%E5%AE%B6%E6%A1%B6.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h1><p>基于响应式对象上的一个属性创建一个对应的ref，这样创建的ref与其源属性保持同步。</p>
<p>改变源属性的值将更新ref的值，反之亦然。</p>
<p>如果对象是非响应式的，则不产生效果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; person &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;toRef: &#123;&#123; like &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; person2 &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;toRef: &#123;&#123; like2 &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; toRef, reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const person = &#123;</span><br><span class="line">  name: &quot;yajue&quot;,</span><br><span class="line">  age: 24,</span><br><span class="line">  like: &quot;ramen&quot;</span><br><span class="line">&#125;</span><br><span class="line">// 非响应式对象经过toRef处理</span><br><span class="line">// 参数1为对象，2为对象中的一个key</span><br><span class="line">const like = toRef(person, &quot;like&quot;)</span><br><span class="line"></span><br><span class="line">const person2 = reactive(&#123;</span><br><span class="line">  name: &quot;yajue&quot;,</span><br><span class="line">  age: 24,</span><br><span class="line">  like: &quot;ramen&quot;</span><br><span class="line">&#125;)</span><br><span class="line">// 响应式对象经过toRef处理</span><br><span class="line">const like2 = toRef(person2, &quot;like&quot;)</span><br><span class="line"></span><br><span class="line">const change = ()=&gt; &#123;</span><br><span class="line">  // 如果对象不是响应式，则值改变不会造成视图的改变</span><br><span class="line">  // person.like = &quot;rape&quot;</span><br><span class="line">  // console.log(person)</span><br><span class="line"></span><br><span class="line">  // toRef作用于非响应式，然并卵，对象本身变化了，但视图不变化</span><br><span class="line">  like.value = &quot;rape&quot;</span><br><span class="line">  console.log(person, like)</span><br><span class="line"></span><br><span class="line">  // toRef作用于响应式，对象和视图都变化了</span><br><span class="line">  like2.value = &quot;rape&quot;</span><br><span class="line">  console.log(person2, like2)</span><br><span class="line"></span><br><span class="line">  // 应用场景：只需要响应式对象上的某属性，并且希望它的改变能导致对象和视图改变</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h1><p>根据一个响应式对象创建普通对象，对象的每个属性都是指向原对象属性的ref，主要是方便解构使用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; person &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;div&gt;&#123;&#123; name &#125;&#125; - &#123;&#123; age &#125;&#125; - &#123;&#123; like &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;change&quot;&gt;修改&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; toRef, reactive, toRefs &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const person = reactive(&#123;</span><br><span class="line">  name: &quot;yajue&quot;,</span><br><span class="line">  age: 24,</span><br><span class="line">  like: &quot;ramen&quot;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// toRefs可以把对象的每一个属性都变成ref，</span><br><span class="line">// const toRefs = &lt;T extends object&gt;(object: T)=&gt; &#123;</span><br><span class="line">//   const map: any = &#123;&#125;</span><br><span class="line">//   for(let key in object) &#123;</span><br><span class="line">//     map[key] = toRef(object, key)</span><br><span class="line">//   &#125;</span><br><span class="line">//   return map</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// reactive一旦被解构，响应式就不存在了（变成普通值）</span><br><span class="line">// let &#123;name, age, like&#125; = person</span><br><span class="line">// 如果想要从响应式对象上解构响应式值，需要toRefs</span><br><span class="line">const &#123;name, age, like&#125; = toRefs(person)</span><br><span class="line"></span><br><span class="line">const change = ()=&gt; &#123;</span><br><span class="line">  console.log(name, age, like)</span><br><span class="line">  // name = &quot;yjsp&quot;</span><br><span class="line">  // age = 114</span><br><span class="line">  // like = &quot;rape&quot;</span><br><span class="line">  name.value = &quot;yjsp&quot;</span><br><span class="line">  age.value = 114</span><br><span class="line">  like.value = &quot;rape&quot;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a>toRaw</h1><p>返回响应式对象的原始对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;look&quot;&gt;查看&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; reactive, toRaw &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const person = reactive&lt;any&gt;(&#123;</span><br><span class="line">  name: &quot;yajue&quot;,</span><br><span class="line">  age: 24,</span><br><span class="line">  like: &quot;ramen&quot;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const look = ()=&gt; &#123;</span><br><span class="line">  // toRaw能把响应式对象变成普通对象</span><br><span class="line">  console.log(person, toRaw(person))</span><br><span class="line">  // 本质上就是这样（__v_raw是一个隐藏属性）</span><br><span class="line">  console.log(person, person[&quot;__v_raw&quot;])</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>在Vue源码（<code>/package/reactivity/src/ref.ts</code>）中可以看到toRef和toRefs的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 前面是各种对函数的重载</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> toRef&lt;T&gt;(</span><br><span class="line">  <span class="attr">value</span>: T</span><br><span class="line">): T <span class="keyword">extends</span> () =&gt; infer R</span><br><span class="line">  ? <span class="title class_">Readonly</span>&lt;<span class="title class_">Ref</span>&lt;R&gt;&gt;</span><br><span class="line">  : T <span class="keyword">extends</span> <span class="title class_">Ref</span></span><br><span class="line">  ? T</span><br><span class="line">  : <span class="title class_">Ref</span>&lt;<span class="title class_">UnwrapRef</span>&lt;T&gt;&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> toRef&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>, K <span class="keyword">extends</span> keyof T&gt;(</span><br><span class="line">  <span class="attr">object</span>: T,</span><br><span class="line">  <span class="attr">key</span>: K</span><br><span class="line">): <span class="title class_">ToRef</span>&lt;T[K]&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> toRef&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>, K <span class="keyword">extends</span> keyof T&gt;(</span><br><span class="line">  <span class="attr">object</span>: T,</span><br><span class="line">  <span class="attr">key</span>: K,</span><br><span class="line">  <span class="attr">defaultValue</span>: T[K]</span><br><span class="line">): <span class="title class_">ToRef</span>&lt;<span class="title class_">Exclude</span>&lt;T[K], <span class="literal">undefined</span>&gt;&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">toRef</span>(<span class="params"></span></span><br><span class="line"><span class="params">  source: Record&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt; | MaybeRef,	<span class="comment">// 第一个参数：一个对象</span></span></span><br><span class="line"><span class="params">  key?: <span class="built_in">string</span>,			<span class="comment">// 第二个参数：对象的一个key值</span></span></span><br><span class="line"><span class="params">  defaultValue?: <span class="built_in">unknown</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">Ref</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isRef</span>(source)) &#123;</span><br><span class="line">    <span class="keyword">return</span> source</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isFunction</span>(source)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GetterRefImpl</span>(source) <span class="keyword">as</span> <span class="built_in">any</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isObject</span>(source) &amp;&amp; <span class="variable language_">arguments</span>.<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">propertyToRef</span>(source, key!, defaultValue)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">ref</span>(source)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">propertyToRef</span>(<span class="params">source: <span class="built_in">object</span>, key: <span class="built_in">string</span>, defaultValue?: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> val = (source <span class="keyword">as</span> <span class="built_in">any</span>)[key]		<span class="comment">// 取出key值的value</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">isRef</span>(val)			<span class="comment">// 判断value是否为ref对象</span></span><br><span class="line">    ? val					<span class="comment">// 是就直接返回</span></span><br><span class="line">    : (<span class="keyword">new</span> <span class="title class_">ObjectRefImpl</span>(		<span class="comment">// 否则变成ref</span></span><br><span class="line">        source <span class="keyword">as</span> <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">any</span>&gt;,</span><br><span class="line">        key,</span><br><span class="line">        defaultValue</span><br><span class="line">      ) <span class="keyword">as</span> <span class="built_in">any</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectRefImpl</span>&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>, K <span class="keyword">extends</span> keyof T&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isRef = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> _object: T,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> _key: K,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> _defaultValue?: T[K]</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里没有做收集依赖或者触发依赖更新，所以它对非响应式对象不会改变视图</span></span><br><span class="line">  <span class="comment">// 对响应式对象能改变视图，是因为reactive里会用proxy，里面有做收集依赖和触发依赖更新的的操作</span></span><br><span class="line">  <span class="comment">// 如果这里做了，那么就会产生做两次收集或触发的bug（toRef的属性做一次，reactive对象本身再做一次）</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> val = <span class="variable language_">this</span>.<span class="property">_object</span>[<span class="variable language_">this</span>.<span class="property">_key</span>]</span><br><span class="line">    <span class="keyword">return</span> val === <span class="literal">undefined</span> ? (<span class="variable language_">this</span>.<span class="property">_defaultValue</span> <span class="keyword">as</span> T[K]) : val</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_object</span>[<span class="variable language_">this</span>.<span class="property">_key</span>] = newVal</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">dep</span>(): <span class="title class_">Dep</span> | <span class="literal">undefined</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">getDepFromReactive</span>(<span class="title function_">toRaw</span>(<span class="variable language_">this</span>.<span class="property">_object</span>), <span class="variable language_">this</span>.<span class="property">_key</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toRefs，就是给对象的每个属性都toRef</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> toRefs&lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt;(<span class="attr">object</span>: T): <span class="title class_">ToRefs</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (__DEV__ &amp;&amp; !<span class="title function_">isProxy</span>(<span class="built_in">object</span>)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">`toRefs() expects a reactive object but received a plain one.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">ret</span>: <span class="built_in">any</span> = <span class="title function_">isArray</span>(<span class="built_in">object</span>) ? <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="built_in">object</span>.<span class="property">length</span>) : &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="built_in">object</span>) &#123;</span><br><span class="line">    ret[key] = <span class="title function_">propertyToRef</span>(<span class="built_in">object</span>, key)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在Vue源码（<code>/package/reactivity/src/reactive.ts</code>）中可以看到toRaw的源码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 它从对象里取了一个属性，这个属性就是__v_raw</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> toRaw&lt;T&gt;(<span class="attr">observed</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">const</span> raw = observed &amp;&amp; (observed <span class="keyword">as</span> <span class="title class_">Target</span>)[<span class="title class_">ReactiveFlags</span>.<span class="property">RAW</span>]</span><br><span class="line">  <span class="keyword">return</span> raw ? <span class="title function_">toRaw</span>(raw) : observed</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">ReactiveFlags</span> &#123;</span><br><span class="line">  <span class="variable constant_">SKIP</span> = <span class="string">&#x27;__v_skip&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">IS_REACTIVE</span> = <span class="string">&#x27;__v_isReactive&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">IS_READONLY</span> = <span class="string">&#x27;__v_isReadonly&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">IS_SHALLOW</span> = <span class="string">&#x27;__v_isShallow&#x27;</span>,</span><br><span class="line">  <span class="variable constant_">RAW</span> = <span class="string">&#x27;__v_raw&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3响应式原理</title>
    <url>/web/study/vue/9.Vue3%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86.html</url>
    <content><![CDATA[<p>本系列为视频课程的学习笔记。原课程：<a href="https://www.bilibili.com/video/BV1dS4y1y7vd?p=3&vd_source=abff2190dd215e2033f2ec57123dd1d6">Vue3 + vite + Ts + pinia + 实战 + 源码 +electron</a></p>
<h1 id="Vue2的不足"><a href="#Vue2的不足" class="headerlink" title="Vue2的不足"></a>Vue2的不足</h1><p>Vue2使用<code>Object.defineProperty</code>实现响应式，它有一些不足：</p>
<ul>
<li><p>对象只能劫持事先定义好的数据，新增的数据需要<code>Vue.Set(xxx)</code></p>
</li>
<li><p>数组只能使用七种（Vue重写后的）数组方法操作，使用下标修改某一项值就无法被劫持</p>
<blockquote>
<p><code>Object.defineProperty</code>其实可以做到数组修改，但是会产生性能问题</p>
</blockquote>
</li>
</ul>
<h1 id="reactive的实现"><a href="#reactive的实现" class="headerlink" title="reactive的实现"></a>reactive的实现</h1><p>Vue3使用ES6的Proxy实现响应式。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; track, trigger &#125; <span class="keyword">from</span> <span class="string">&quot;./effect&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isObject</span> = (<span class="params">target:<span class="built_in">any</span></span>)=&gt; target!=<span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> target == <span class="string">&quot;object&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现对象的响应式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reactive = &lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt;(<span class="attr">target</span>: T): <span class="function"><span class="params">T</span>=&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, &#123;</span><br><span class="line">    <span class="comment">// 属性读取操作的捕捉器</span></span><br><span class="line">    <span class="comment">// target:当前的对象 key:对象的属性 receiver:proxy或继承proxy的对象</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">      <span class="comment">// 有些情况下会造成上下文的错乱</span></span><br><span class="line">      <span class="comment">// return target[key]</span></span><br><span class="line">      <span class="comment">// 这样（有receiver）可以保证上下文的正确</span></span><br><span class="line">      <span class="keyword">let</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">      <span class="title function_">track</span>(target, key)</span><br><span class="line">      <span class="comment">// 递归监听嵌套对象</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="title function_">isObject</span>(res)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">reactive</span>(res <span class="keyword">as</span> <span class="built_in">object</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 属性设置操作的捕捉器</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">      <span class="comment">// Reflect.set返回一个布尔值</span></span><br><span class="line">      <span class="keyword">let</span> res = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">      <span class="title function_">trigger</span>(target, key)</span><br><span class="line">      <span class="keyword">return</span> res</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// delete操作符的捕捉器</span></span><br><span class="line">    <span class="comment">// deleteProperty() &#123;</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// 函数调用操作的捕捉器</span></span><br><span class="line">    <span class="comment">// apply() &#123;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 等，每种对象操作都有其捕捉器</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="effect"><a href="#effect" class="headerlink" title="effect"></a>effect</h1><p>activeEffect收集副作用函数，初始化时也会调用一下，主要用来进行视图的改变。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局变量activeEffect</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">activeEffect</span>: <span class="title class_">Function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收集当前副作用函数，并且初始化的时候调用一下</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn 匿名函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">effect</span> = (<span class="params">fn: <span class="built_in">Function</span></span>)=&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 一个闭包</span></span><br><span class="line">  <span class="keyword">const</span> _effect = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    activeEffect = _effect</span><br><span class="line">    <span class="title function_">fn</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化的时候调用一下</span></span><br><span class="line">  <span class="title function_">_effect</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="track"><a href="#track" class="headerlink" title="track"></a>track</h1><p>如图所示，通过以WeakMap为主的数据结构收集依赖。</p>
<p><img src= "/img/loading.gif" data-lazy-src="https://image.cheriko.fun/post/202305112331599.png"></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要把对象和对象的key拼装成这种数据结构</span></span><br><span class="line"><span class="keyword">const</span> targetMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 依赖的收集</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target 响应式对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> track = &lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt; <span class="function">(<span class="params">target: T, key: <span class="built_in">string</span> | <span class="built_in">symbol</span></span>)=&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="comment">// 如果targetMap中没有这个对象key</span></span><br><span class="line">  <span class="keyword">if</span>(!depsMap) &#123;</span><br><span class="line">    depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    targetMap.<span class="title function_">set</span>(target, depsMap)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> deps = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="comment">// 同理，如果deps中没有这个对象值key</span></span><br><span class="line">  <span class="keyword">if</span>(!deps) &#123;</span><br><span class="line">    deps = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">    depsMap.<span class="title function_">set</span>(key, deps)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  deps.<span class="title function_">add</span>(activeEffect)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="trigger"><a href="#trigger" class="headerlink" title="trigger"></a>trigger</h1><p>更新依赖（就是调用这个值的副作用函数）</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 依赖的更新</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> trigger = &lt;T <span class="keyword">extends</span> <span class="built_in">object</span>&gt; <span class="function">(<span class="params">target: T, key: <span class="built_in">string</span> | <span class="built_in">symbol</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span>(!depsMap) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;111&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> deps = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span>(!deps) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;222&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  deps.<span class="title function_">forEach</span>(<span class="function">(<span class="params">effect: <span class="built_in">Function</span></span>)=&gt;</span> <span class="title function_">effect</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><blockquote>
<p>要先把TypeScript代码编译成JavaScript代码。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;./reactive.js&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; effect &#125; <span class="keyword">from</span> <span class="string">&quot;./effect.js&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 定义一个reactive对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> person = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>: <span class="string">&quot;yajue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">age</span>: <span class="number">24</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 对象嵌套的情况</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">foo</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bar</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">baz</span>: <span class="number">1919810</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 接收匿名函数，模拟DOM和数据的绑定</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">effect</span>(<span class="function">()=&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#app&quot;</span>).<span class="property">innerText</span> = <span class="string">`<span class="subst">$&#123;person.name&#125;</span> - <span class="subst">$&#123;person.age&#125;</span> - <span class="subst">$&#123;person.foo.bar.baz&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 实现了当数据变化时，视图就变化的响应式效果</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      person.<span class="property">name</span> = <span class="string">&quot;yjsp&quot;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        person.<span class="property">age</span> = <span class="number">114514</span></span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          person.<span class="property">foo</span>.<span class="property">bar</span>.<span class="property">baz</span> = <span class="number">364364</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
        <category>学习</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Vue.js</tag>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
